{"version":3,"file":"index.cjs","sources":["../src/editor-event-listener.tsx","../src/internal-utils/compound-client-rect.ts","../src/internal-utils/debug.ts","../src/internal-utils/drag-selection.ts","../src/internal-utils/values.ts","../src/internal-utils/slate-utils.ts","../src/internal-utils/event-position.ts","../src/internal-utils/paths.ts","../src/internal-utils/ranges.ts","../src/internal-utils/selection.ts","../src/internal-utils/selection-elements.ts","../src/internal-utils/weakMaps.ts","../src/editor/editor-actor-context.ts","../src/editor/components/drop-indicator.tsx","../src/editor/components/render-default-object.tsx","../src/editor/key-generator.ts","../src/priority/priority.types.ts","../src/priority/priority.core.ts","../src/behaviors/behavior.core.block-element.ts","../src/editor/components/use-core-block-element-behaviors.ts","../src/editor/components/render-block-object.tsx","../src/editor/components/render-inline-object.tsx","../src/editor/components/render-text-block.tsx","../src/editor/components/render-element.tsx","../src/editor/hooks/usePortableTextEditor.ts","../src/internal-utils/stop-actor.ts","../src/converters/converter.json.ts","../src/converters/converter.portable-text.ts","../src/converters/converter.text-html.ts","../src/converters/converter.text-plain.ts","../src/converters/converters.core.ts","../src/internal-utils/schema.ts","../src/internal-utils/operationToPatches.ts","../src/operations/behavior.operation.insert.text.ts","../../../node_modules/.pnpm/@portabletext+toolkit@2.0.17/node_modules/@portabletext/toolkit/dist/index.js","../src/internal-utils/sibling-utils.ts","../src/internal-utils/withChanges.ts","../src/internal-utils/withUndoRedo.ts","../src/editor/plugins/createWithPortableTextMarkModel.ts","../../../node_modules/.pnpm/@sanity+diff-match-patch@3.2.0/node_modules/@sanity/diff-match-patch/dist/index.js","../src/editor/with-undo-step.ts","../src/editor/plugins/createWithUndoRedo.ts","../src/operations/behavior.operation.annotation.add.ts","../src/operations/behavior.operation.annotation.remove.ts","../src/operations/behavior.operation.block.set.ts","../src/operations/behavior.operation.block.unset.ts","../src/operations/behavior.operation.decorator.add.ts","../src/operations/behavior.operation.delete.ts","../src/operations/behavior.operation.delete.backward.ts","../src/operations/behavior.operation.delete.block.ts","../src/operations/behavior.operation.delete.forward.ts","../src/operations/behavior.operation.insert-inline-object.ts","../src/operations/behavior.operation.insert-span.ts","../src/operations/behavior.operation.insert.block.ts","../src/operations/behavior.operation.move.backward.ts","../src/operations/behavior.operation.move.block.ts","../src/operations/behavior.operation.move.forward.ts","../src/operations/behavior.operation.select.ts","../src/operations/behavior.operations.ts","../src/editor/with-applying-behavior-operations.ts","../src/editor/plugins/create-with-event-listeners.ts","../src/editor/plugins/createWithMaxBlocks.ts","../src/editor/plugins/createWithObjectKeys.ts","../src/internal-utils/applyPatch.ts","../src/internal-utils/withoutPatching.ts","../src/editor/plugins/createWithPatches.ts","../src/editor/plugins/createWithPlaceholderBlock.ts","../src/editor/plugins/createWithPortableTextBlockStyle.ts","../src/editor/plugins/createWithPortableTextSelections.ts","../src/editor/plugins/createWithSchemaTypes.ts","../src/editor/plugins/createWithUtils.ts","../src/editor/plugins/with-plugins.ts","../src/editor/create-slate-editor.tsx","../src/behaviors/behavior.core.annotations.ts","../src/internal-utils/is-hotkey.ts","../src/behaviors/behavior.core.block-objects.ts","../src/behaviors/behavior.core.decorators.ts","../src/behaviors/behavior.core.dnd.ts","../src/behaviors/behavior.core.insert-break.ts","../src/behaviors/behavior.core.lists.ts","../src/behaviors/behavior.core.ts","../src/behaviors/behavior.abstract.annotation.ts","../src/behaviors/behavior.abstract.decorator.ts","../src/behaviors/behavior.abstract.delete.ts","../src/behaviors/behavior.abstract.insert.ts","../src/internal-utils/key-is.ts","../src/behaviors/behavior.abstract.keyboard.ts","../src/behaviors/behavior.abstract.list-item.ts","../src/behaviors/behavior.abstract.move.ts","../src/behaviors/behavior.abstract.select.ts","../src/behaviors/behavior.abstract.split.ts","../src/behaviors/behavior.abstract.style.ts","../src/behaviors/behavior.abstract.ts","../src/behaviors/behavior.types.event.ts","../src/behaviors/behavior.perform-event.ts","../src/priority/priority.sort.ts","../src/internal-utils/slate-children-to-blocks.ts","../src/editor/get-active-decorators.ts","../src/editor/editor-snapshot.ts","../src/editor/editor-machine.ts","../src/editor/legacy-schema.ts","../src/editor/editor-schema.ts","../src/editor/editor-selector.ts","../src/editor/mutation-machine.ts","../src/editor/plugins/createWithEditableAPI.ts","../src/editor/relay-machine.ts","../src/internal-utils/validateValue.ts","../src/editor/sync-machine.ts","../src/editor/create-editor.ts","../src/editor/hooks/usePortableTextEditorSelection.tsx","../src/editor/relay-actor-context.ts","../src/editor/route-events-to-changes.tsx","../src/editor/PortableTextEditor.tsx","../src/editor/components/render-span.tsx","../src/editor/components/render-leaf.tsx","../src/editor/components/render-text.tsx","../src/editor/plugins/createWithHotKeys.ts","../src/editor/range-decorations-machine.ts","../src/editor/Editable.tsx","../src/internal-utils/use-constant.ts","../src/editor/editor-provider.tsx"],"sourcesContent":["import {useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorEmittedEvent} from './editor/relay-machine'\nimport {useEditor} from './editor/use-editor'\n\n/**\n * @public\n * @deprecated\n * This component has been renamed. Use `EventListenerPlugin` instead.\n *\n * ```\n * import {EventListenerPlugin} from '@portabletext/editor/plugins'\n * ```\n */\nexport function EditorEventListener(props: {\n  on: (event: EditorEmittedEvent) => void\n}) {\n  const editor = useEditor()\n  const on = useEffectEvent(props.on)\n\n  useEffect(() => {\n    const subscription = editor.on('*', on)\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editor])\n\n  return null\n}\n","export function getCompoundClientRect(nodes: Array<Node>): DOMRect {\n  if (nodes.length === 0) {\n    return new DOMRect(0, 0, 0, 0)\n  }\n\n  const elements = nodes.filter((node) => node instanceof Element)\n\n  const firstRect = elements.at(0)?.getBoundingClientRect()\n\n  if (!firstRect) {\n    return new DOMRect(0, 0, 0, 0)\n  }\n\n  let left = firstRect.left\n  let top = firstRect.top\n  let right = firstRect.right\n  let bottom = firstRect.bottom\n\n  for (let i = 1; i < elements.length; i++) {\n    const rect = elements[i].getBoundingClientRect()\n    left = Math.min(left, rect.left)\n    top = Math.min(top, rect.top)\n    right = Math.max(right, rect.right)\n    bottom = Math.max(bottom, rect.bottom)\n  }\n\n  return new DOMRect(left, top, right - left, bottom - top)\n}\n","import debug from 'debug'\n\nconst rootName = 'sanity-pte:'\n\nexport default debug(rootName)\nexport function debugWithName(name: string): debug.Debugger {\n  const namespace = `${rootName}${name}`\n  if (debug && debug.enabled(namespace)) {\n    return debug(namespace)\n  }\n  return debug(rootName)\n}\n","import type {EditorSnapshot} from '..'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport type {EventPosition} from './event-position'\n\n/**\n * Given the current editor `snapshot` and an `eventSelection` representing\n * where the drag event origins from, this function calculates the selection\n * in the editor that should be dragged.\n */\nexport function getDragSelection({\n  eventSelection,\n  snapshot,\n}: {\n  eventSelection: EventPosition['selection']\n  snapshot: EditorSnapshot\n}) {\n  let dragSelection = eventSelection\n\n  const draggedInlineObject = selectors.getFocusInlineObject({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n\n  if (draggedInlineObject) {\n    return dragSelection\n  }\n\n  const draggingCollapsedSelection = selectors.isSelectionCollapsed({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n  const draggedTextBlock = selectors.getFocusTextBlock({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n  const draggedSpan = selectors.getFocusSpan({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n\n  if (draggingCollapsedSelection && draggedTextBlock && draggedSpan) {\n    // Looks like we are dragging an empty span\n    // Let's drag the entire block instead\n    dragSelection = {\n      anchor: utils.getBlockStartPoint({\n        context: snapshot.context,\n        block: draggedTextBlock,\n      }),\n      focus: utils.getBlockEndPoint({\n        context: snapshot.context,\n        block: draggedTextBlock,\n      }),\n    }\n  }\n\n  const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n\n  if (\n    snapshot.context.selection &&\n    selectors.isSelectionExpanded(snapshot) &&\n    selectedBlocks.length > 1\n  ) {\n    const selectionStartBlock = selectors.getSelectionStartBlock(snapshot)\n    const selectionEndBlock = selectors.getSelectionEndBlock(snapshot)\n\n    if (!selectionStartBlock || !selectionEndBlock) {\n      return dragSelection\n    }\n\n    const selectionStartPoint = utils.getBlockStartPoint({\n      context: snapshot.context,\n      block: selectionStartBlock,\n    })\n    const selectionEndPoint = utils.getBlockEndPoint({\n      context: snapshot.context,\n      block: selectionEndBlock,\n    })\n\n    const eventSelectionInsideBlocks = selectors.isOverlappingSelection(\n      eventSelection,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {anchor: selectionStartPoint, focus: selectionEndPoint},\n      },\n    })\n\n    if (eventSelectionInsideBlocks) {\n      dragSelection = {\n        anchor: selectionStartPoint,\n        focus: selectionEndPoint,\n      }\n    }\n  }\n\n  return dragSelection\n}\n","import type {\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Element, Text, type Descendant, type Node} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\n\nexport const EMPTY_MARKDEFS: PortableTextObject[] = []\n\nexport const VOID_CHILD_KEY = 'void-child'\n\ntype Partial<T> = {\n  [P in keyof T]?: T[P]\n}\n\nfunction keepObjectEquality(\n  object: PortableTextBlock | PortableTextChild,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild>,\n) {\n  const value = keyMap[object._key]\n  if (value && isEqual(object, value)) {\n    return value\n  }\n  keyMap[object._key] = object\n  return object\n}\n\nexport function toSlateValue(\n  value: PortableTextBlock[] | undefined,\n  {schemaTypes}: {schemaTypes: EditorSchema},\n  keyMap: Record<string, any> = {},\n): Descendant[] {\n  if (value && Array.isArray(value)) {\n    return value.map((block) => {\n      const {_type, _key, ...rest} = block\n      const isPortableText = block && block._type === schemaTypes.block.name\n      if (isPortableText) {\n        const textBlock = block as PortableTextTextBlock\n        let hasInlines = false\n        const hasMissingStyle = typeof textBlock.style === 'undefined'\n        const hasMissingMarkDefs = typeof textBlock.markDefs === 'undefined'\n        const hasMissingChildren = typeof textBlock.children === 'undefined'\n\n        const children = (textBlock.children || []).map((child) => {\n          const {_type: cType, _key: cKey, ...cRest} = child\n          // Return 'slate' version of inline object where the actual\n          // value is stored in the `value` property.\n          // In slate, inline objects are represented as regular\n          // children with actual text node in order to be able to\n          // be selected the same way as the rest of the (text) content.\n          if (cType !== 'span') {\n            hasInlines = true\n            return keepObjectEquality(\n              {\n                _type: cType,\n                _key: cKey,\n                children: [\n                  {\n                    _key: VOID_CHILD_KEY,\n                    _type: 'span',\n                    text: '',\n                    marks: [],\n                  },\n                ],\n                value: cRest,\n                __inline: true,\n              },\n              keyMap,\n            )\n          }\n          // Original child object (span)\n          return child\n        })\n        // Return original block\n        if (\n          !hasMissingStyle &&\n          !hasMissingMarkDefs &&\n          !hasMissingChildren &&\n          !hasInlines &&\n          Element.isElement(block)\n        ) {\n          // Original object\n          return block\n        }\n        // TODO: remove this when we have a better way to handle missing style\n        if (hasMissingStyle) {\n          rest.style = schemaTypes.styles[0].name\n        }\n        return keepObjectEquality({_type, _key, ...rest, children}, keyMap)\n      }\n      return keepObjectEquality(\n        {\n          _type,\n          _key,\n          children: [\n            {\n              _key: VOID_CHILD_KEY,\n              _type: 'span',\n              text: '',\n              marks: [],\n            },\n          ],\n          value: rest,\n        },\n        keyMap,\n      )\n    }) as Descendant[]\n  }\n  return []\n}\n\nexport function fromSlateValue(\n  value: Descendant[],\n  textBlockType: string,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild> = {},\n): PortableTextBlock[] {\n  return value.map((block) => {\n    const {_key, _type} = block\n    if (!_key || !_type) {\n      throw new Error('Not a valid block')\n    }\n    if (\n      _type === textBlockType &&\n      'children' in block &&\n      Array.isArray(block.children) &&\n      _key\n    ) {\n      let hasInlines = false\n      const children = block.children.map((child) => {\n        const {_type: _cType} = child\n        if ('value' in child && _cType !== 'span') {\n          hasInlines = true\n          const {\n            value: v,\n            _key: k,\n            _type: t,\n            __inline: _i,\n            children: _c,\n            ...rest\n          } = child\n          return keepObjectEquality(\n            {...rest, ...v, _key: k as string, _type: t as string},\n            keyMap,\n          )\n        }\n        return child\n      })\n      if (!hasInlines) {\n        return block as PortableTextBlock // Original object\n      }\n      return keepObjectEquality(\n        {...block, children, _key, _type},\n        keyMap,\n      ) as PortableTextBlock\n    }\n    const blockValue = 'value' in block && block.value\n    return keepObjectEquality(\n      {_key, _type, ...(typeof blockValue === 'object' ? blockValue : {})},\n      keyMap,\n    ) as PortableTextBlock\n  })\n}\n\nexport function isEqualToEmptyEditor(\n  children: Descendant[] | PortableTextBlock[],\n  schemaTypes: EditorSchema,\n): boolean {\n  return (\n    children === undefined ||\n    (children && Array.isArray(children) && children.length === 0) ||\n    (children &&\n      Array.isArray(children) &&\n      children.length === 1 &&\n      Element.isElement(children[0]) &&\n      children[0]._type === schemaTypes.block.name &&\n      'style' in children[0] &&\n      children[0].style === schemaTypes.styles[0].name &&\n      !('listItem' in children[0]) &&\n      Array.isArray(children[0].children) &&\n      children[0].children.length === 1 &&\n      Text.isText(children[0].children[0]) &&\n      children[0].children[0]._type === 'span' &&\n      !children[0].children[0].marks?.join('') &&\n      children[0].children[0].text === '')\n  )\n}\n\nexport function findBlockAndIndexFromPath(\n  firstPathSegment: PathSegment,\n  children: (Node | Partial<Node>)[],\n): [Element | undefined, number | undefined] {\n  let blockIndex = -1\n  const isNumber = Number.isInteger(Number(firstPathSegment))\n  if (isNumber) {\n    blockIndex = Number(firstPathSegment)\n  } else if (children) {\n    blockIndex = children.findIndex(\n      (blk) =>\n        Element.isElement(blk) && isEqual({_key: blk._key}, firstPathSegment),\n    )\n  }\n  if (blockIndex > -1) {\n    return [children[blockIndex] as Element, blockIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function findChildAndIndexFromPath(\n  secondPathSegment: PathSegment,\n  block: Element,\n): [Element | Text | undefined, number] {\n  let childIndex = -1\n  const isNumber = Number.isInteger(Number(secondPathSegment))\n  if (isNumber) {\n    childIndex = Number(secondPathSegment)\n  } else {\n    childIndex = block.children.findIndex((child) =>\n      isEqual({_key: child._key}, secondPathSegment),\n    )\n  }\n  if (childIndex > -1) {\n    return [block.children[childIndex] as Element | Text, childIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function getValueOrInitialValue(\n  value: unknown,\n  initialValue: PortableTextBlock[],\n): PortableTextBlock[] | undefined {\n  if (value && Array.isArray(value) && value.length > 0) {\n    return value\n  }\n  return initialValue\n}\n","import {Editor, Element, Node, Range, type Path, type Point} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorSelection, PortableTextSlateEditor} from '../types/editor'\nimport {fromSlateValue} from './values'\n\nexport function getAnchorBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  try {\n    return (\n      Editor.node(editor, editor.selection.anchor.path.slice(0, 1)) ?? [\n        undefined,\n        undefined,\n      ]\n    )\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFocusBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  try {\n    return (\n      Editor.node(editor, editor.selection.focus.path.slice(0, 1)) ?? [\n        undefined,\n        undefined,\n      ]\n    )\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getSelectionStartBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  const selectionStartPoint = Range.start(editor.selection)\n\n  return getPointBlock({editor, point: selectionStartPoint})\n}\n\nexport function getSelectionEndBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  const selectionEndPoint = Range.end(editor.selection)\n\n  return getPointBlock({editor, point: selectionEndPoint})\n}\n\nexport function getPointBlock({\n  editor,\n  point,\n}: {\n  editor: PortableTextSlateEditor\n  point: Point\n}): [node: Node, path: Path] | [undefined, undefined] {\n  try {\n    const [block] = Editor.node(editor, point.path.slice(0, 1)) ?? [\n      undefined,\n      undefined,\n    ]\n    return block ? [block, point.path.slice(0, 1)] : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFocusChild({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  const [focusBlock, focusBlockPath] = getFocusBlock({editor})\n  const childIndex = editor.selection?.focus.path.at(1)\n\n  if (!focusBlock || !focusBlockPath || childIndex === undefined) {\n    return [undefined, undefined]\n  }\n\n  try {\n    const focusChild = Node.child(focusBlock, childIndex)\n\n    return focusChild\n      ? [focusChild, [...focusBlockPath, childIndex]]\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nfunction getPointChild({\n  editor,\n  point,\n}: {\n  editor: PortableTextSlateEditor\n  point: Point\n}): [node: Node, path: Path] | [undefined, undefined] {\n  const [block, blockPath] = getPointBlock({editor, point})\n  const childIndex = point.path.at(1)\n\n  if (!block || !blockPath || childIndex === undefined) {\n    return [undefined, undefined]\n  }\n\n  try {\n    const pointChild = Node.child(block, childIndex)\n\n    return pointChild\n      ? [pointChild, [...blockPath, childIndex]]\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFirstBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  const firstPoint = Editor.start(editor, [])\n  const firstBlockPath = firstPoint.path.at(0)\n\n  try {\n    return firstBlockPath !== undefined\n      ? (Editor.node(editor, [firstBlockPath]) ?? [undefined, undefined])\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getLastBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  const lastPoint = Editor.end(editor, [])\n  const lastBlockPath = lastPoint.path.at(0)\n\n  try {\n    return lastBlockPath !== undefined\n      ? (Editor.node(editor, [lastBlockPath]) ?? [undefined, undefined])\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getNodeBlock({\n  editor,\n  schema,\n  node,\n}: {\n  editor: PortableTextSlateEditor\n  schema: EditorSchema\n  node: Node\n}) {\n  if (Editor.isEditor(node)) {\n    return undefined\n  }\n\n  if (isBlockElement({editor, schema}, node)) {\n    return elementToBlock({schema, element: node})\n  }\n\n  const parent = Array.from(\n    Editor.nodes(editor, {\n      mode: 'highest',\n      at: [],\n      match: (n) =>\n        isBlockElement({editor, schema}, n) &&\n        n.children.some((child) => child._key === node._key),\n    }),\n  )\n    .at(0)\n    ?.at(0)\n\n  return Element.isElement(parent)\n    ? elementToBlock({\n        schema,\n        element: parent,\n      })\n    : undefined\n}\n\nfunction elementToBlock({\n  schema,\n  element,\n}: {\n  schema: EditorSchema\n  element: Element\n}) {\n  return fromSlateValue([element], schema.block.name)?.at(0)\n}\n\nfunction isBlockElement(\n  {editor, schema}: {editor: PortableTextSlateEditor; schema: EditorSchema},\n  node: Node,\n): node is Element {\n  return (\n    Element.isElement(node) &&\n    !editor.isInline(node) &&\n    (schema.block.name === node._type ||\n      schema.blockObjects.some(\n        (blockObject) => blockObject.name === node._type,\n      ))\n  )\n}\n\nexport function isListItemActive({\n  editor,\n  listItem,\n}: {\n  editor: Editor\n  listItem: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(\n      ([node]) => editor.isListBlock(node) && node.listItem === listItem,\n    )\n  }\n\n  return false\n}\n\nexport function isStyleActive({\n  editor,\n  style,\n}: {\n  editor: Editor\n  style: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(([node]) => node.style === style)\n  }\n\n  return false\n}\n\nexport function slateRangeToSelection({\n  schema,\n  editor,\n  range,\n}: {\n  schema: EditorSchema\n  editor: PortableTextSlateEditor\n  range: Range\n}): EditorSelection {\n  const [anchorBlock] = getPointBlock({\n    editor,\n    point: range.anchor,\n  })\n  const [focusBlock] = getPointBlock({\n    editor,\n    point: range.focus,\n  })\n\n  if (!anchorBlock || !focusBlock) {\n    return null\n  }\n\n  const [anchorChild] =\n    anchorBlock._type === schema.block.name\n      ? getPointChild({\n          editor,\n          point: range.anchor,\n        })\n      : [undefined, undefined]\n  const [focusChild] =\n    focusBlock._type === schema.block.name\n      ? getPointChild({\n          editor,\n          point: range.focus,\n        })\n      : [undefined, undefined]\n\n  const selection: EditorSelection = {\n    anchor: {\n      path: [{_key: anchorBlock._key}],\n      offset: range.anchor.offset,\n    },\n    focus: {\n      path: [{_key: focusBlock._key}],\n      offset: range.focus.offset,\n    },\n    backward: Range.isBackward(range),\n  }\n\n  if (anchorChild) {\n    selection.anchor.path.push('children')\n    selection.anchor.path.push({_key: anchorChild._key})\n  }\n\n  if (focusChild) {\n    selection.focus.path.push('children')\n    selection.focus.path.push({_key: focusChild._key})\n  }\n\n  return selection\n}\n","import {Editor, type BaseRange, type Node} from 'slate'\nimport {DOMEditor, isDOMNode} from 'slate-dom'\nimport type {EditorSchema, EditorSelection} from '..'\nimport type {EditorActor} from '../editor/editor-machine'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport * as utils from '../utils'\nimport {\n  getFirstBlock,\n  getLastBlock,\n  getNodeBlock,\n  slateRangeToSelection,\n} from './slate-utils'\n\nexport type EventPosition = {\n  block: 'start' | 'end'\n  /**\n   * Did the event origin from the editor DOM node itself or from a child node?\n   */\n  isEditor: boolean\n  selection: NonNullable<EditorSelection>\n}\nexport type EventPositionBlock = EventPosition['block']\n\nexport function getEventPosition({\n  editorActor,\n  slateEditor,\n  event,\n}: {\n  editorActor: EditorActor\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EventPosition | undefined {\n  if (editorActor.getSnapshot().matches({setup: 'setting up'})) {\n    return undefined\n  }\n\n  const node = getEventNode({slateEditor, event})\n\n  if (!node) {\n    return undefined\n  }\n\n  const block = getNodeBlock({\n    editor: slateEditor,\n    schema: editorActor.getSnapshot().context.schema,\n    node,\n  })\n\n  const positionBlock = getEventPositionBlock({node, slateEditor, event})\n  const selection = getEventSelection({\n    schema: editorActor.getSnapshot().context.schema,\n    slateEditor,\n    event,\n  })\n\n  if (block && positionBlock && !selection && !Editor.isEditor(node)) {\n    return {\n      block: positionBlock,\n      isEditor: false,\n      selection: {\n        anchor: utils.getBlockStartPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: block,\n            path: [{_key: block._key}],\n          },\n        }),\n        focus: utils.getBlockEndPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: block,\n            path: [{_key: block._key}],\n          },\n        }),\n      },\n    }\n  }\n\n  if (!positionBlock || !selection) {\n    return undefined\n  }\n\n  const focusBlockPath = selection.focus.path.at(0)\n  const focusBlockKey = utils.isKeyedSegment(focusBlockPath)\n    ? focusBlockPath._key\n    : undefined\n\n  if (!focusBlockKey) {\n    return undefined\n  }\n\n  if (\n    utils.isSelectionCollapsed(selection) &&\n    block &&\n    focusBlockKey !== block._key\n  ) {\n    return {\n      block: positionBlock,\n      isEditor: false,\n      selection: {\n        anchor: utils.getBlockStartPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: block,\n            path: [{_key: block._key}],\n          },\n        }),\n        focus: utils.getBlockEndPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: block,\n            path: [{_key: block._key}],\n          },\n        }),\n      },\n    }\n  }\n\n  return {\n    block: positionBlock,\n    isEditor: Editor.isEditor(node),\n    selection,\n  }\n}\n\nexport function getEventNode({\n  slateEditor,\n  event,\n}: {\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}) {\n  if (!DOMEditor.hasTarget(slateEditor, event.target)) {\n    return undefined\n  }\n\n  const node = DOMEditor.toSlateNode(slateEditor, event.target)\n\n  return node\n}\n\nfunction getEventPositionBlock({\n  node,\n  slateEditor,\n  event,\n}: {\n  node: Node\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EventPositionBlock | undefined {\n  const [firstBlock] = getFirstBlock({editor: slateEditor})\n\n  if (!firstBlock) {\n    return undefined\n  }\n\n  const firstBlockElement = DOMEditor.toDOMNode(slateEditor, firstBlock)\n  const firstBlockRect = firstBlockElement.getBoundingClientRect()\n\n  if (event.pageY < firstBlockRect.top) {\n    return 'start'\n  }\n\n  const [lastBlock] = getLastBlock({editor: slateEditor})\n\n  if (!lastBlock) {\n    return undefined\n  }\n\n  const lastBlockElement = DOMEditor.toDOMNode(slateEditor, lastBlock)\n  const lastBlockRef = lastBlockElement.getBoundingClientRect()\n\n  if (event.pageY > lastBlockRef.bottom) {\n    return 'end'\n  }\n\n  const element = DOMEditor.toDOMNode(slateEditor, node)\n  const elementRect = element.getBoundingClientRect()\n  const top = elementRect.top\n  const height = elementRect.height\n  const location = Math.abs(top - event.pageY)\n\n  return location < height / 2 ? 'start' : 'end'\n}\n\nexport function getEventSelection({\n  schema,\n  slateEditor,\n  event,\n}: {\n  schema: EditorSchema\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EditorSelection {\n  const range = getSlateRangeFromEvent(slateEditor, event)\n\n  const selection = range\n    ? slateRangeToSelection({\n        schema,\n        editor: slateEditor,\n        range,\n      })\n    : null\n\n  return selection\n}\n\nfunction getSlateRangeFromEvent(\n  editor: PortableTextSlateEditor,\n  event: DragEvent | MouseEvent,\n) {\n  if (!event.target) {\n    return undefined\n  }\n\n  if (!isDOMNode(event.target)) {\n    return undefined\n  }\n\n  const window = DOMEditor.getWindow(editor)\n\n  let domRange: Range | undefined\n\n  if (window.document.caretPositionFromPoint !== undefined) {\n    const position = window.document.caretPositionFromPoint(\n      event.clientX,\n      event.clientY,\n    )\n\n    if (position) {\n      try {\n        domRange = window.document.createRange()\n        domRange.setStart(position.offsetNode, position.offset)\n        domRange.setEnd(position.offsetNode, position.offset)\n      } catch {}\n    }\n  } else if (window.document.caretRangeFromPoint !== undefined) {\n    // Use WebKit-proprietary fallback method\n    domRange =\n      window.document.caretRangeFromPoint(event.clientX, event.clientY) ??\n      undefined\n  } else {\n    console.warn(\n      'Neither caretPositionFromPoint nor caretRangeFromPoint is supported',\n    )\n    return undefined\n  }\n\n  if (!domRange) {\n    return undefined\n  }\n\n  let range: BaseRange | undefined\n\n  try {\n    range = DOMEditor.toSlateRange(editor, domRange, {\n      exactMatch: false,\n      // It can still throw even with this option set to true\n      suppressThrow: false,\n    })\n  } catch {}\n\n  return range\n}\n","import {isKeySegment, type Path} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Editor, Element, type Descendant, type Path as SlatePath} from 'slate'\n\nexport function toSlatePath(path: Path, editor: Editor): SlatePath {\n  if (!editor) {\n    return []\n  }\n  const [block, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) =>\n        isKeySegment(path[0]) && (n as Descendant)._key === path[0]._key,\n    }),\n  )[0] || [undefined, undefined]\n\n  if (!block || !Element.isElement(block)) {\n    return []\n  }\n\n  if (editor.isVoid(block)) {\n    return [blockPath[0], 0]\n  }\n\n  const childPath = [path[2]]\n  const childIndex = block.children.findIndex((child) =>\n    isEqual([{_key: child._key}], childPath),\n  )\n\n  if (childIndex >= 0 && block.children[childIndex]) {\n    const child = block.children[childIndex]\n    if (Element.isElement(child) && editor.isVoid(child)) {\n      return blockPath.concat(childIndex).concat(0)\n    }\n    return blockPath.concat(childIndex)\n  }\n\n  return [blockPath[0], 0]\n}\n","import {Point, type Editor, type Operation, type Range} from 'slate'\nimport type {EditorSelection} from '../types/editor'\nimport {toSlatePath} from './paths'\n\nexport interface ObjectWithKeyAndType {\n  _key: string\n  _type: string\n  children?: ObjectWithKeyAndType[]\n}\n\nexport function toSlateRange(\n  selection: EditorSelection,\n  editor: Editor,\n): Range | null {\n  if (!selection || !editor) {\n    return null\n  }\n  const anchor = {\n    path: toSlatePath(selection.anchor.path, editor),\n    offset: selection.anchor.offset,\n  }\n  const focus = {\n    path: toSlatePath(selection.focus.path, editor),\n    offset: selection.focus.offset,\n  }\n  if (focus.path.length === 0 || anchor.path.length === 0) {\n    return null\n  }\n  const range = anchor && focus ? {anchor, focus} : null\n  return range\n}\n\nexport function moveRangeByOperation(\n  range: Range,\n  operation: Operation,\n): Range | null {\n  const anchor = Point.transform(range.anchor, operation)\n  const focus = Point.transform(range.focus, operation)\n\n  if (anchor === null || focus === null) {\n    return null\n  }\n\n  if (Point.equals(anchor, range.anchor) && Point.equals(focus, range.focus)) {\n    return range\n  }\n\n  return {anchor, focus}\n}\n","import type {Path, PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\nexport function normalizePoint(\n  point: EditorSelectionPoint,\n  value: PortableTextBlock[],\n): EditorSelectionPoint | null {\n  if (!point || !value) {\n    return null\n  }\n  const newPath: Path = []\n  let newOffset: number = point.offset || 0\n  const blockKey =\n    typeof point.path[0] === 'object' &&\n    '_key' in point.path[0] &&\n    point.path[0]._key\n  const childKey =\n    typeof point.path[2] === 'object' &&\n    '_key' in point.path[2] &&\n    point.path[2]._key\n  const block: PortableTextBlock | undefined = value.find(\n    (blk) => blk._key === blockKey,\n  )\n  if (block) {\n    newPath.push({_key: block._key})\n  } else {\n    return null\n  }\n  if (block && point.path[1] === 'children') {\n    if (\n      !block.children ||\n      (Array.isArray(block.children) && block.children.length === 0)\n    ) {\n      return null\n    }\n    const child =\n      Array.isArray(block.children) &&\n      block.children.find((cld) => cld._key === childKey)\n    if (child) {\n      newPath.push('children')\n      newPath.push({_key: child._key})\n      newOffset =\n        child.text && child.text.length >= point.offset\n          ? point.offset\n          : (child.text && child.text.length) || 0\n    } else {\n      return null\n    }\n  }\n  return {path: newPath, offset: newOffset}\n}\n\nexport function normalizeSelection(\n  selection: EditorSelection,\n  value: PortableTextBlock[] | undefined,\n): EditorSelection | null {\n  if (!selection || !value || value.length === 0) {\n    return null\n  }\n  let newAnchor: EditorSelectionPoint | null = null\n  let newFocus: EditorSelectionPoint | null = null\n  const {anchor, focus} = selection\n  if (\n    anchor &&\n    value.find((blk) => isEqual({_key: blk._key}, anchor.path[0]))\n  ) {\n    newAnchor = normalizePoint(anchor, value)\n  }\n  if (focus && value.find((blk) => isEqual({_key: blk._key}, focus.path[0]))) {\n    newFocus = normalizePoint(focus, value)\n  }\n  if (newAnchor && newFocus) {\n    return {anchor: newAnchor, focus: newFocus, backward: selection.backward}\n  }\n  return null\n}\n","import {Editor} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport type {EditorSnapshot} from '..'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {toSlateRange} from './ranges'\n\nexport type SelectionDomNodes = {\n  blockNodes: Array<Node>\n  childNodes: Array<Node>\n}\n\nexport function getSelectionDomNodes({\n  slateEditor,\n  snapshot,\n}: {\n  slateEditor: PortableTextSlateEditor\n  snapshot: EditorSnapshot\n}): SelectionDomNodes {\n  if (!snapshot.context.selection) {\n    return {\n      blockNodes: [],\n      childNodes: [],\n    }\n  }\n\n  const range = toSlateRange(snapshot.context.selection, slateEditor)\n\n  if (!range) {\n    return {\n      blockNodes: [],\n      childNodes: [],\n    }\n  }\n\n  const blockEntries = Array.from(\n    Editor.nodes(slateEditor, {\n      at: range,\n      mode: 'highest',\n      match: (n) => !Editor.isEditor(n),\n    }),\n  )\n\n  const childEntries = Array.from(\n    Editor.nodes(slateEditor, {\n      at: range,\n      mode: 'lowest',\n      match: (n) =>\n        (!Editor.isEditor(n) && slateEditor.isTextSpan(n)) ||\n        !slateEditor.isBlock(n),\n    }),\n  )\n\n  return {\n    blockNodes: blockEntries.map(([blockNode]) =>\n      DOMEditor.toDOMNode(slateEditor, blockNode),\n    ),\n    childNodes: childEntries.map(([childNode]) =>\n      DOMEditor.toDOMNode(slateEditor, childNode),\n    ),\n  }\n}\n","import type {Editor, Range} from 'slate'\nimport type {EditorSelection} from '..'\n\n// Is the editor currently receiving remote changes that are being applied to the content?\nexport const IS_PROCESSING_REMOTE_CHANGES: WeakMap<Editor, boolean> =\n  new WeakMap()\n\nexport const KEY_TO_SLATE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\nexport const KEY_TO_VALUE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\n\n// Keep object relation to slate range in the portable-text-range\nexport const SLATE_TO_PORTABLE_TEXT_RANGE = new WeakMap<\n  Range,\n  EditorSelection\n>()\n","import {createContext} from 'react'\nimport type {EditorActor} from './editor-machine'\n\nexport const EditorActorContext = createContext<EditorActor>({} as EditorActor)\n","export function DropIndicator() {\n  return (\n    <div\n      contentEditable={false}\n      className=\"pt-drop-indicator\"\n      style={{\n        position: 'absolute',\n        width: '100%',\n        height: 1,\n        borderBottom: '1px solid currentColor',\n        zIndex: 5,\n      }}\n    >\n      <span />\n    </div>\n  )\n}\n","import type {PortableTextChild, PortableTextObject} from '@sanity/types'\n\nexport function RenderDefaultBlockObject(props: {\n  blockObject: PortableTextObject\n}) {\n  return (\n    <div style={{userSelect: 'none'}}>\n      [{props.blockObject._type}: {props.blockObject._key}]\n    </div>\n  )\n}\n\nexport function RenderDefaultInlineObject(props: {\n  inlineObject: PortableTextObject | PortableTextChild\n}) {\n  return (\n    <span style={{userSelect: 'none'}}>\n      [{props.inlineObject._type}: {props.inlineObject._key}]\n    </span>\n  )\n}\n","import getRandomValues from 'get-random-values-esm'\n\n/**\n * @public\n */\nexport const defaultKeyGenerator = (): string => randomKey(12)\n\nconst getByteHexTable = (() => {\n  let table: any[]\n  return () => {\n    if (table) {\n      return table\n    }\n\n    table = []\n    for (let i = 0; i < 256; ++i) {\n      table[i] = (i + 0x100).toString(16).slice(1)\n    }\n    return table\n  }\n})()\n\n// WHATWG crypto RNG - https://w3c.github.io/webcrypto/Overview.html\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length)\n  getRandomValues(rnds8)\n  return rnds8\n}\n\nfunction randomKey(length?: number): string {\n  const table = getByteHexTable()\n  return whatwgRNG(length)\n    .reduce((str, n) => str + table[n], '')\n    .slice(0, length)\n}\n","import {defaultKeyGenerator} from '../editor/key-generator'\n\nexport type EditorPriority = {\n  id: string\n  name?: string\n  reference?: {\n    priority: EditorPriority\n    importance: 'higher' | 'lower'\n  }\n}\n\nexport function createEditorPriority(config?: {\n  name?: string\n  reference?: {\n    priority: EditorPriority\n    importance: 'higher' | 'lower'\n  }\n}): EditorPriority {\n  return {\n    id: defaultKeyGenerator(),\n    name: config?.name,\n    reference: config?.reference,\n  }\n}\n","import {createEditorPriority} from './priority.types'\n\nexport const corePriority = createEditorPriority({name: 'core'})\n","import type {EventPositionBlock} from '../internal-utils/event-position'\nimport {corePriority} from '../priority/priority.core'\nimport {createEditorPriority} from '../priority/priority.types'\nimport * as selectors from '../selectors'\nimport {forward} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport function createCoreBlockElementBehaviorsConfig({\n  key,\n  onSetDragPositionBlock,\n}: {\n  key: string\n  onSetDragPositionBlock: (\n    eventPositionBlock: EventPositionBlock | undefined,\n  ) => void\n}) {\n  return [\n    {\n      behavior: defineBehavior({\n        on: 'drag.dragover',\n        guard: ({snapshot, event}) => {\n          const dropFocusBlock = selectors.getFocusBlock({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: event.position.selection,\n            },\n          })\n\n          if (!dropFocusBlock || dropFocusBlock.node._key !== key) {\n            return false\n          }\n\n          const dragOrigin = snapshot.beta.internalDrag?.origin\n\n          if (!dragOrigin) {\n            return false\n          }\n\n          const draggedBlocks = selectors.getSelectedBlocks({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n\n          if (\n            draggedBlocks.some((draggedBlock) => draggedBlock.node._key === key)\n          ) {\n            return false\n          }\n\n          const draggingEntireBlocks = selectors.isSelectingEntireBlocks({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n\n          return draggingEntireBlocks\n        },\n        actions: [\n          ({event}) => [\n            {\n              type: 'effect',\n              effect: () => {\n                onSetDragPositionBlock(event.position.block)\n              },\n            },\n          ],\n        ],\n      }),\n      priority: createEditorPriority({\n        reference: {\n          priority: corePriority,\n          importance: 'lower',\n        },\n      }),\n    },\n    {\n      behavior: defineBehavior({\n        on: 'drag.*',\n        guard: ({event}) => {\n          return event.type !== 'drag.dragover'\n        },\n        actions: [\n          ({event}) => [\n            {\n              type: 'effect',\n              effect: () => {\n                onSetDragPositionBlock(undefined)\n              },\n            },\n            forward(event),\n          ],\n        ],\n      }),\n      priority: createEditorPriority({\n        reference: {\n          priority: corePriority,\n          importance: 'lower',\n        },\n      }),\n    },\n  ]\n}\n","import {useContext, useEffect} from 'react'\nimport {createCoreBlockElementBehaviorsConfig} from '../../behaviors/behavior.core.block-element'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport {EditorActorContext} from '../editor-actor-context'\n\nexport function useCoreBlockElementBehaviors({\n  key,\n  onSetDragPositionBlock,\n}: {\n  key: string\n  onSetDragPositionBlock: (\n    eventPositionBlock: EventPositionBlock | undefined,\n  ) => void\n}) {\n  const editorActor = useContext(EditorActorContext)\n\n  useEffect(() => {\n    const behaviorConfigs = createCoreBlockElementBehaviorsConfig({\n      key,\n      onSetDragPositionBlock,\n    })\n\n    for (const behaviorConfig of behaviorConfigs) {\n      editorActor.send({\n        type: 'add behavior',\n        behaviorConfig,\n      })\n    }\n\n    return () => {\n      for (const behaviorConfig of behaviorConfigs) {\n        editorActor.send({\n          type: 'remove behavior',\n          behaviorConfig,\n        })\n      }\n    }\n  }, [editorActor, key, onSetDragPositionBlock])\n}\n","import type {PortableTextObject} from '@sanity/types'\nimport {useSelector} from '@xstate/react'\nimport {useContext, useRef, useState, type ReactElement} from 'react'\nimport {Range, type Element as SlateElement} from 'slate'\nimport {useSelected, useSlateStatic, type RenderElementProps} from 'slate-react'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport type {RenderBlockFunction} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {DropIndicator} from './drop-indicator'\nimport {RenderDefaultBlockObject} from './render-default-object'\nimport {useCoreBlockElementBehaviors} from './use-core-block-element-behaviors'\n\nexport function RenderBlockObject(props: {\n  attributes: RenderElementProps['attributes']\n  blockObject: PortableTextObject\n  children: ReactElement\n  element: SlateElement\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n}) {\n  const [dragPositionBlock, setDragPositionBlock] =\n    useState<EventPositionBlock>()\n  const blockObjectRef = useRef<HTMLDivElement>(null)\n\n  const slateEditor = useSlateStatic()\n  const selected = useSelected()\n\n  const editorActor = useContext(EditorActorContext)\n\n  useCoreBlockElementBehaviors({\n    key: props.element._key,\n    onSetDragPositionBlock: setDragPositionBlock,\n  })\n\n  const legacySchemaType = useSelector(editorActor, (s) =>\n    s.context\n      .getLegacySchema()\n      .blockObjects.find(\n        (blockObject) => blockObject.name === props.element._type,\n      ),\n  )\n\n  if (!legacySchemaType) {\n    console.error(\n      `Block object type ${props.element._type} not found in Schema`,\n    )\n  }\n\n  const focused =\n    selected &&\n    slateEditor.selection !== null &&\n    Range.isCollapsed(slateEditor.selection)\n\n  return (\n    <div\n      {...props.attributes}\n      className=\"pt-block pt-object-block\"\n      data-block-key={props.element._key}\n      data-block-name={props.element._type}\n      data-block-type=\"object\"\n    >\n      {dragPositionBlock === 'start' ? <DropIndicator /> : null}\n      {props.children}\n      <div\n        ref={blockObjectRef}\n        contentEditable={false}\n        draggable={!props.readOnly}\n      >\n        {props.renderBlock && legacySchemaType ? (\n          props.renderBlock({\n            children: (\n              <RenderDefaultBlockObject blockObject={props.blockObject} />\n            ),\n            editorElementRef: blockObjectRef,\n            focused,\n            path: [{_key: props.element._key}],\n            schemaType: legacySchemaType,\n            selected,\n            type: legacySchemaType,\n            value: props.blockObject,\n          })\n        ) : (\n          <RenderDefaultBlockObject blockObject={props.blockObject} />\n        )}\n      </div>\n      {dragPositionBlock === 'end' ? <DropIndicator /> : null}\n    </div>\n  )\n}\n","import type {PortableTextObject} from '@sanity/types'\nimport {useSelector} from '@xstate/react'\nimport {useContext, useRef, type ReactElement} from 'react'\nimport {Range, type Element as SlateElement} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport {useSelected, useSlateStatic, type RenderElementProps} from 'slate-react'\nimport {getPointBlock} from '../../internal-utils/slate-utils'\nimport type {RenderChildFunction} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {RenderDefaultInlineObject} from './render-default-object'\n\nexport function RenderInlineObject(props: {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  inlineObject: PortableTextObject\n  readOnly: boolean\n  renderChild?: RenderChildFunction\n}) {\n  const inlineObjectRef = useRef<HTMLElement>(null)\n\n  const slateEditor = useSlateStatic()\n  const selected = useSelected()\n\n  const editorActor = useContext(EditorActorContext)\n  const legacySchemaType = useSelector(editorActor, (s) =>\n    s.context\n      .getLegacySchema()\n      .inlineObjects.find(\n        (inlineObject) => inlineObject.name === props.element._type,\n      ),\n  )\n\n  if (!legacySchemaType) {\n    console.error(\n      `Inline object type ${props.element._type} not found in Schema`,\n    )\n  }\n\n  const focused =\n    selected &&\n    slateEditor.selection !== null &&\n    Range.isCollapsed(slateEditor.selection)\n  const path = DOMEditor.findPath(slateEditor, props.element)\n  const [block] = getPointBlock({\n    editor: slateEditor,\n    point: {\n      path,\n      offset: 0,\n    },\n  })\n\n  if (!block) {\n    console.error(\n      `Unable to find parent block of inline object ${props.element._key}`,\n    )\n  }\n\n  return (\n    <span\n      {...props.attributes}\n      draggable={!props.readOnly}\n      className=\"pt-inline-object\"\n      data-child-key={props.inlineObject._key}\n      data-child-name={props.inlineObject._type}\n      data-child-type=\"object\"\n    >\n      {props.children}\n      <span ref={inlineObjectRef} style={{display: 'inline-block'}}>\n        {props.renderChild && block && legacySchemaType ? (\n          props.renderChild({\n            annotations: [],\n            children: (\n              <RenderDefaultInlineObject inlineObject={props.inlineObject} />\n            ),\n            editorElementRef: inlineObjectRef,\n            selected,\n            focused,\n            path: [{_key: block._key}, 'children', {_key: props.element._key}],\n            schemaType: legacySchemaType,\n            value: props.inlineObject,\n            type: legacySchemaType,\n          })\n        ) : (\n          <RenderDefaultInlineObject inlineObject={props.inlineObject} />\n        )}\n      </span>\n    </span>\n  )\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\nimport {useSelector} from '@xstate/react'\nimport {useContext, useRef, useState, type ReactElement} from 'react'\nimport {Range, type Element as SlateElement} from 'slate'\nimport {useSelected, useSlateStatic, type RenderElementProps} from 'slate-react'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport type {\n  RenderBlockFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {DropIndicator} from './drop-indicator'\nimport {useCoreBlockElementBehaviors} from './use-core-block-element-behaviors'\n\nexport function RenderTextBlock(props: {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n  textBlock: PortableTextTextBlock\n}) {\n  const [dragPositionBlock, setDragPositionBlock] =\n    useState<EventPositionBlock>()\n  const blockRef = useRef<HTMLDivElement>(null)\n\n  const slateEditor = useSlateStatic()\n  const selected = useSelected()\n\n  const editorActor = useContext(EditorActorContext)\n\n  useCoreBlockElementBehaviors({\n    key: props.element._key,\n    onSetDragPositionBlock: setDragPositionBlock,\n  })\n\n  const legacySchema = useSelector(editorActor, (s) =>\n    s.context.getLegacySchema(),\n  )\n\n  const focused =\n    selected &&\n    slateEditor.selection !== null &&\n    Range.isCollapsed(slateEditor.selection)\n\n  let children = props.children\n\n  const legacyBlockSchemaType = legacySchema.block\n\n  if (props.renderStyle && props.textBlock.style) {\n    const legacyStyleSchemaType =\n      props.textBlock.style !== undefined\n        ? legacySchema.styles.find(\n            (style) => style.value === props.textBlock.style,\n          )\n        : undefined\n\n    if (legacyStyleSchemaType) {\n      children = props.renderStyle({\n        block: props.textBlock,\n        children,\n        editorElementRef: blockRef,\n        focused,\n        path: [{_key: props.textBlock._key}],\n        schemaType: legacyStyleSchemaType,\n        selected,\n        value: props.textBlock.style,\n      })\n    } else {\n      console.error(\n        `Unable to find Schema type for text block style ${props.textBlock.style}`,\n      )\n    }\n  }\n\n  if (props.renderListItem && props.textBlock.listItem) {\n    const legacyListItemSchemaType = legacySchema.lists.find(\n      (list) => list.value === props.textBlock.listItem,\n    )\n\n    if (legacyListItemSchemaType) {\n      children = props.renderListItem({\n        block: props.textBlock,\n        children,\n        editorElementRef: blockRef,\n        focused,\n        level: props.textBlock.level ?? 1,\n        path: [{_key: props.textBlock._key}],\n        selected,\n        value: props.textBlock.listItem,\n        schemaType: legacyListItemSchemaType,\n      })\n    } else {\n      console.error(\n        `Unable to find Schema type for text block list item ${props.textBlock.listItem}`,\n      )\n    }\n  }\n\n  return (\n    <div\n      {...props.attributes}\n      className={[\n        'pt-block',\n        'pt-text-block',\n        ...(props.textBlock.style\n          ? [`pt-text-block-style-${props.textBlock.style}`]\n          : []),\n        ...(props.textBlock.listItem\n          ? [\n              'pt-list-item',\n              `pt-list-item-${props.textBlock.listItem}`,\n              `pt-list-item-level-${props.textBlock.level ?? 1}`,\n            ]\n          : []),\n      ].join(' ')}\n      spellCheck={props.spellCheck}\n      data-block-key={props.textBlock._key}\n      data-block-name={props.textBlock._type}\n      data-block-type=\"text\"\n      {...(props.textBlock.listItem !== undefined\n        ? {\n            'data-list-item': props.textBlock.listItem,\n          }\n        : {})}\n      {...(props.textBlock.level !== undefined\n        ? {\n            'data-level': props.textBlock.level,\n          }\n        : {})}\n      {...(props.textBlock.style !== undefined\n        ? {\n            'data-style': props.textBlock.style,\n          }\n        : {})}\n    >\n      {dragPositionBlock === 'start' ? <DropIndicator /> : null}\n      <div ref={blockRef}>\n        {props.renderBlock\n          ? props.renderBlock({\n              children,\n              editorElementRef: blockRef,\n              focused,\n              level: props.textBlock.level,\n              listItem: props.textBlock.listItem,\n              path: [{_key: props.textBlock._key}],\n              selected,\n              schemaType: legacyBlockSchemaType,\n              style: props.textBlock.style,\n              type: legacyBlockSchemaType,\n              value: props.textBlock,\n            })\n          : props.children}\n      </div>\n      {dragPositionBlock === 'end' ? <DropIndicator /> : null}\n    </div>\n  )\n}\n","import {useSelector} from '@xstate/react'\nimport {useContext, type ReactElement} from 'react'\nimport type {Element as SlateElement} from 'slate'\nimport type {RenderElementProps} from 'slate-react'\nimport {\n  parseBlockObject,\n  parseInlineObject,\n  parseTextBlock,\n} from '../../internal-utils/parse-blocks'\nimport type {\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {RenderBlockObject} from './render-block-object'\nimport {RenderInlineObject} from './render-inline-object'\nimport {RenderTextBlock} from './render-text-block'\n\nexport function RenderElement(props: {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n}) {\n  const editorActor = useContext(EditorActorContext)\n  const schema = useSelector(editorActor, (s) => s.context.schema)\n  const isInline =\n    '__inline' in props.element && props.element.__inline === true\n\n  if (isInline) {\n    const inlineObject = parseInlineObject({\n      context: {\n        keyGenerator: () => '',\n        schema,\n      },\n      options: {refreshKeys: false, validateFields: false},\n      inlineObject: {\n        _key: props.element._key,\n        _type: props.element._type,\n        ...('value' in props.element && typeof props.element.value === 'object'\n          ? props.element.value\n          : {}),\n      },\n    })\n\n    if (!inlineObject) {\n      console.error(\n        `Unable to find Inline Object \"${props.element._type}\" in Schema`,\n      )\n    }\n\n    return (\n      <RenderInlineObject\n        attributes={props.attributes}\n        element={props.element}\n        inlineObject={\n          inlineObject ?? {\n            _key: props.element._key,\n            _type: props.element._type,\n          }\n        }\n        readOnly={props.readOnly}\n        renderChild={props.renderChild}\n      >\n        {props.children}\n      </RenderInlineObject>\n    )\n  }\n\n  const textBlock = parseTextBlock({\n    context: {\n      keyGenerator: () => '',\n      schema,\n    },\n    options: {refreshKeys: false, validateFields: false},\n    block: props.element,\n  })\n\n  if (textBlock) {\n    return (\n      <RenderTextBlock\n        attributes={props.attributes}\n        element={props.element}\n        readOnly={props.readOnly}\n        renderBlock={props.renderBlock}\n        renderListItem={props.renderListItem}\n        renderStyle={props.renderStyle}\n        spellCheck={props.spellCheck}\n        textBlock={textBlock}\n      >\n        {props.children}\n      </RenderTextBlock>\n    )\n  }\n\n  const blockObject = parseBlockObject({\n    context: {\n      keyGenerator: () => '',\n      schema,\n    },\n    options: {refreshKeys: false, validateFields: false},\n    blockObject: {\n      _key: props.element._key,\n      _type: props.element._type,\n      ...('value' in props.element && typeof props.element.value === 'object'\n        ? props.element.value\n        : {}),\n    },\n  })\n\n  if (!blockObject) {\n    console.error(\n      `Unable to find Block Object \"${props.element._type}\" in Schema`,\n    )\n  }\n\n  return (\n    <RenderBlockObject\n      attributes={props.attributes}\n      blockObject={\n        blockObject ?? {\n          _key: props.element._key,\n          _type: props.element._type,\n        }\n      }\n      element={props.element}\n      readOnly={props.readOnly}\n      renderBlock={props.renderBlock}\n    >\n      {props.children}\n    </RenderBlockObject>\n  )\n}\n","import {createContext, useContext} from 'react'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\n/**\n * A React context for sharing the editor object.\n */\nexport const PortableTextEditorContext =\n  createContext<PortableTextEditor | null>(null)\n\n/**\n * @deprecated Use `useEditor` to get the current editor instance.\n * @public\n * Get the current editor object from the React context.\n */\nexport const usePortableTextEditor = (): PortableTextEditor => {\n  const editor = useContext(PortableTextEditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`usePortableTextEditor\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n\n  return editor\n}\n","/**\n * Copy/pasted from https://github.com/statelyai/xstate/blob/main/packages/xstate-react/src/stopRootWithRehydration.ts\n * and renamed to `stopActor`\n */\n\nimport type {AnyActorRef, Snapshot} from 'xstate'\n\nconst forEachActor = (\n  actorRef: AnyActorRef,\n  callback: (ref: AnyActorRef) => void,\n) => {\n  callback(actorRef)\n  const children = actorRef.getSnapshot().children\n  if (children) {\n    Object.values(children).forEach((child) => {\n      forEachActor(child as AnyActorRef, callback)\n    })\n  }\n}\n\nexport function stopActor(actorRef: AnyActorRef) {\n  // persist snapshot here in a custom way allows us to persist inline actors and to preserve actor references\n  // we do it to avoid setState in useEffect when the effect gets \"reconnected\"\n  // this currently only happens in Strict Effects but it simulates the Offscreen aka Activity API\n  // it also just allows us to end up with a somewhat more predictable behavior for the users\n  const persistedSnapshots: Array<[AnyActorRef, Snapshot<unknown>]> = []\n  forEachActor(actorRef, (ref) => {\n    persistedSnapshots.push([ref, ref.getSnapshot()])\n    // muting observers allow us to avoid `useSelector` from being notified about the stopped snapshot\n    // React reconnects its subscribers (from the useSyncExternalStore) on its own\n    // and userland subscibers should basically always do the same anyway\n    // as each subscription should have its own cleanup logic and that should be called each such reconnect\n    ;(ref as any).observers = new Set()\n  })\n  const systemSnapshot = actorRef.system.getSnapshot?.()\n\n  actorRef.stop()\n  ;(actorRef.system as any)._snapshot = systemSnapshot\n  persistedSnapshots.forEach(([ref, snapshot]) => {\n    ;(ref as any)._processingStatus = 0\n    ;(ref as any)._snapshot = snapshot\n  })\n}\n","import {defineConverter} from './converter.types'\n\nexport const converterJson = defineConverter({\n  mimeType: 'application/json',\n  serialize: ({snapshot, event}) => {\n    const portableTextConverter = snapshot.context.converters.find(\n      (converter) => converter.mimeType === 'application/x-portable-text',\n    )\n\n    if (!portableTextConverter) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/json',\n        originEvent: event.originEvent,\n        reason: 'No application/x-portable-text Converter found',\n      }\n    }\n\n    const serializationEvent = portableTextConverter.serialize({\n      snapshot,\n      event,\n    })\n\n    return {\n      ...serializationEvent,\n      mimeType: 'application/json',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({snapshot, event}) => {\n    const portableTextConverter = snapshot.context.converters.find(\n      (converter) => converter.mimeType === 'application/x-portable-text',\n    )\n\n    if (!portableTextConverter) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/json',\n        reason: 'No application/x-portable-text Converter found',\n      }\n    }\n\n    const deserializationEvent = portableTextConverter.deserialize({\n      snapshot,\n      event,\n    })\n\n    return {\n      ...deserializationEvent,\n      mimeType: 'application/json',\n    }\n  },\n})\n","import {parseBlock} from '../internal-utils/parse-blocks'\nimport {sliceBlocks} from '../utils'\nimport {defineConverter} from './converter.types'\n\nexport const converterPortableText = defineConverter({\n  mimeType: 'application/x-portable-text',\n  serialize: ({snapshot, event}) => {\n    const selection =\n      snapshot.beta.internalDrag?.origin.selection ?? snapshot.context.selection\n\n    if (!selection) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/x-portable-text',\n        originEvent: event.originEvent,\n        reason: 'No selection',\n      }\n    }\n\n    const blocks = sliceBlocks({\n      context: {\n        selection,\n        schema: snapshot.context.schema,\n      },\n      blocks: snapshot.context.value,\n    })\n\n    if (blocks.length === 0) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'No blocks serialized',\n        originEvent: event.originEvent,\n      }\n    }\n\n    return {\n      type: 'serialization.success',\n      data: JSON.stringify(blocks),\n      mimeType: 'application/x-portable-text',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({snapshot, event}) => {\n    const blocks = JSON.parse(event.data)\n\n    if (!Array.isArray(blocks)) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'Data is not an array',\n      }\n    }\n\n    const parsedBlocks = blocks.flatMap((block) => {\n      const parsedBlock = parseBlock({\n        context: snapshot.context,\n        block,\n        options: {\n          /**\n           * If we are dragging internally then we would like to keep the\n           * dropped portable text as is.\n           */\n          refreshKeys: !snapshot.beta.hasTag?.('dragging internally'),\n          validateFields: false,\n        },\n      })\n      return parsedBlock ? [parsedBlock] : []\n    })\n\n    if (parsedBlocks.length === 0 && blocks.length > 0) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'No blocks were parsed',\n      }\n    }\n\n    return {\n      type: 'deserialization.success',\n      data: parsedBlocks,\n      mimeType: 'application/x-portable-text',\n    }\n  },\n})\n","import {htmlToBlocks} from '@portabletext/block-tools'\nimport {toHTML} from '@portabletext/to-html'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {sliceBlocks} from '../utils'\nimport {defineConverter} from './converter.types'\n\nexport function createConverterTextHtml(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return defineConverter({\n    mimeType: 'text/html',\n    serialize: ({snapshot, event}) => {\n      const selection =\n        snapshot.beta.internalDrag?.origin.selection ??\n        snapshot.context.selection\n\n      if (!selection) {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/html',\n          originEvent: event.originEvent,\n          reason: 'No selection',\n        }\n      }\n\n      const blocks = sliceBlocks({\n        context: {\n          selection,\n          schema: snapshot.context.schema,\n        },\n        blocks: snapshot.context.value,\n      })\n\n      const html = toHTML(blocks, {\n        onMissingComponent: false,\n        components: {\n          unknownType: ({children}) =>\n            children !== undefined ? `${children}` : '',\n        },\n      })\n\n      if (html === '') {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/html',\n          originEvent: event.originEvent,\n          reason: 'Serialized HTML is empty',\n        }\n      }\n\n      return {\n        type: 'serialization.success',\n        data: html,\n        mimeType: 'text/html',\n        originEvent: event.originEvent,\n      }\n    },\n    deserialize: ({snapshot, event}) => {\n      const blocks = htmlToBlocks(event.data, legacySchema.portableText, {\n        keyGenerator: snapshot.context.keyGenerator,\n        unstable_whitespaceOnPasteMode:\n          legacySchema.block.options.unstable_whitespaceOnPasteMode,\n      }) as Array<PortableTextBlock>\n\n      const parsedBlocks = blocks.flatMap((block) => {\n        const parsedBlock = parseBlock({\n          context: snapshot.context,\n          block,\n          options: {\n            refreshKeys: false,\n            validateFields: true,\n          },\n        })\n        return parsedBlock ? [parsedBlock] : []\n      })\n\n      if (parsedBlocks.length === 0) {\n        return {\n          type: 'deserialization.failure',\n          mimeType: 'text/html',\n          reason: 'No blocks deserialized',\n        }\n      }\n\n      return {\n        type: 'deserialization.success',\n        data: parsedBlocks,\n        mimeType: 'text/html',\n      }\n    },\n  })\n}\n","import {htmlToBlocks} from '@portabletext/block-tools'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {isTextBlock, parseBlock} from '../internal-utils/parse-blocks'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {sliceBlocks} from '../utils'\nimport {defineConverter} from './converter.types'\n\nexport function createConverterTextPlain(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return defineConverter({\n    mimeType: 'text/plain',\n    serialize: ({snapshot, event}) => {\n      const selection =\n        snapshot.beta.internalDrag?.origin.selection ??\n        snapshot.context.selection\n\n      if (!selection) {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/plain',\n          originEvent: event.originEvent,\n          reason: 'No selection',\n        }\n      }\n\n      const blocks = sliceBlocks({\n        context: {\n          selection,\n          schema: snapshot.context.schema,\n        },\n        blocks: snapshot.context.value,\n      })\n\n      const data = blocks\n        .map((block) => {\n          if (isTextBlock(snapshot.context, block)) {\n            return block.children\n              .map((child) => {\n                if (child._type === snapshot.context.schema.span.name) {\n                  return child.text\n                }\n\n                return snapshot.beta.hasTag('dragging internally')\n                  ? `[${\n                      snapshot.context.schema.inlineObjects.find(\n                        (inlineObjectType) =>\n                          inlineObjectType.name === child._type,\n                      )?.title ?? 'Object'\n                    }]`\n                  : ''\n              })\n              .join('')\n          }\n\n          return snapshot.beta.hasTag('dragging internally')\n            ? `[${\n                snapshot.context.schema.blockObjects.find(\n                  (blockObjectType) => blockObjectType.name === block._type,\n                )?.title ?? 'Object'\n              }]`\n            : ''\n        })\n        .filter((block) => block !== '')\n        .join('\\n\\n')\n\n      return {\n        type: 'serialization.success',\n        data,\n        mimeType: 'text/plain',\n        originEvent: event.originEvent,\n      }\n    },\n    deserialize: ({snapshot, event}) => {\n      const html = escapeHtml(event.data)\n        .split(/\\n{2,}/)\n        .map((line) =>\n          line\n            ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')}</p>`\n            : '<p></p>',\n        )\n        .join('')\n\n      const textToHtml = `<html><body>${html}</body></html>`\n\n      const blocks = htmlToBlocks(textToHtml, legacySchema.portableText, {\n        keyGenerator: snapshot.context.keyGenerator,\n      }) as Array<PortableTextBlock>\n\n      const parsedBlocks = blocks.flatMap((block) => {\n        const parsedBlock = parseBlock({\n          context: snapshot.context,\n          block,\n          options: {\n            refreshKeys: false,\n            validateFields: true,\n          },\n        })\n        return parsedBlock ? [parsedBlock] : []\n      })\n\n      if (parsedBlocks.length === 0) {\n        return {\n          type: 'deserialization.failure',\n          mimeType: 'text/plain',\n          reason: 'No blocks deserialized',\n        }\n      }\n\n      return {\n        type: 'deserialization.success',\n        data: parsedBlocks,\n        mimeType: 'text/plain',\n      }\n    },\n  })\n}\n\nconst entityMap: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;',\n}\n\nfunction escapeHtml(str: string) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s: string) => entityMap[s])\n}\n","import type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {converterJson} from './converter.json'\nimport {converterPortableText} from './converter.portable-text'\nimport {createConverterTextHtml} from './converter.text-html'\nimport {createConverterTextPlain} from './converter.text-plain'\n\nexport function createCoreConverters(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return [\n    converterJson,\n    converterPortableText,\n    createConverterTextHtml(legacySchema),\n    createConverterTextPlain(legacySchema),\n  ]\n}\n","import {Schema} from '@sanity/schema'\n\nexport function compileType(rawType: any) {\n  return Schema.compile({\n    name: 'blockTypeSchema',\n    types: [rawType],\n  }).get(rawType.name)\n}\n","import {\n  diffMatchPatch,\n  insert,\n  set,\n  setIfMissing,\n  unset,\n  type InsertPosition,\n  type Patch,\n} from '@portabletext/patches'\nimport type {Path, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {get, isUndefined, omitBy} from 'lodash'\nimport {\n  Text,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport type {EditorActor} from '../editor/editor-machine'\nimport type {PatchFunctions} from '../editor/plugins/createWithPatches'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {debugWithName} from './debug'\nimport {fromSlateValue} from './values'\n\nconst debug = debugWithName('operationToPatches')\n\nexport function createOperationToPatches(\n  editorActor: EditorActor,\n): PatchFunctions {\n  const textBlockName = editorActor.getSnapshot().context.schema.block.name\n  function insertTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    if (debug.enabled) {\n      debug('Operation', JSON.stringify(operation, null, 2))\n    }\n    const block =\n      editor.isTextBlock(editor.children[operation.path[0]]) &&\n      editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const textChild =\n      editor.isTextBlock(block) &&\n      editor.isTextSpan(block.children[operation.path[1]]) &&\n      (block.children[operation.path[1]] as PortableTextSpan)\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [\n      {_key: block._key},\n      'children',\n      {_key: textChild._key},\n      'text',\n    ]\n    const prevBlock = beforeValue[operation.path[0]]\n    const prevChild =\n      editor.isTextBlock(prevBlock) && prevBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevChild) ? prevChild.text : ''\n    const patch = diffMatchPatch(prevText, textChild.text, path)\n    return patch.value.length ? [patch] : []\n  }\n\n  function removeTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = editor && editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const child =\n      (editor.isTextBlock(block) && block.children[operation.path[1]]) ||\n      undefined\n    const textChild: PortableTextSpan | undefined = editor.isTextSpan(child)\n      ? child\n      : undefined\n    if (child && !textChild) {\n      throw new Error('Expected span')\n    }\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [\n      {_key: block._key},\n      'children',\n      {_key: textChild._key},\n      'text',\n    ]\n    const beforeBlock = beforeValue[operation.path[0]]\n    const prevTextChild =\n      editor.isTextBlock(beforeBlock) && beforeBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevTextChild) && prevTextChild.text\n    const patch = diffMatchPatch(prevText || '', textChild.text, path)\n    return patch.value ? [patch] : []\n  }\n\n  function setNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n  ) {\n    if (operation.path.length === 1) {\n      const block = editor.children[operation.path[0]]\n      if (typeof block._key !== 'string') {\n        throw new Error('Expected block to have a _key')\n      }\n      const setNode = omitBy(\n        {...editor.children[operation.path[0]], ...operation.newProperties},\n        isUndefined,\n      ) as unknown as Descendant\n      return [\n        set(fromSlateValue([setNode], textBlockName)[0], [{_key: block._key}]),\n      ]\n    } else if (operation.path.length === 2) {\n      const block = editor.children[operation.path[0]]\n      if (editor.isTextBlock(block)) {\n        const child = block.children[operation.path[1]]\n        if (child) {\n          const blockKey = block._key\n          const childKey = child._key\n          const patches: Patch[] = []\n          const keys = Object.keys(operation.newProperties)\n          keys.forEach((keyName) => {\n            // Special case for setting _key on a child. We have to target it by index and not the _key.\n            if (keys.length === 1 && keyName === '_key') {\n              const val = get(operation.newProperties, keyName)\n              patches.push(\n                set(val, [\n                  {_key: blockKey},\n                  'children',\n                  block.children.indexOf(child),\n                  keyName,\n                ]),\n              )\n            } else {\n              const val = get(operation.newProperties, keyName)\n              patches.push(\n                set(val, [\n                  {_key: blockKey},\n                  'children',\n                  {_key: childKey},\n                  keyName,\n                ]),\n              )\n            }\n          })\n          return patches\n        }\n        throw new Error('Could not find a valid child')\n      }\n      throw new Error('Could not find a valid block')\n    } else {\n      throw new Error(\n        `Unexpected path encountered: ${JSON.stringify(operation.path)}`,\n      )\n    }\n  }\n\n  function insertNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    beforeValue: Descendant[],\n  ): Patch[] {\n    const block = beforeValue[operation.path[0]]\n    const isTextBlock = editor.isTextBlock(block)\n    if (operation.path.length === 1) {\n      const position = operation.path[0] === 0 ? 'before' : 'after'\n      const beforeBlock = beforeValue[operation.path[0] - 1]\n      const targetKey =\n        operation.path[0] === 0 ? block?._key : beforeBlock?._key\n      if (targetKey) {\n        return [\n          insert(\n            [fromSlateValue([operation.node as Descendant], textBlockName)[0]],\n            position,\n            [{_key: targetKey}],\n          ),\n        ]\n      }\n      return [\n        setIfMissing(beforeValue, []),\n        insert(\n          [fromSlateValue([operation.node as Descendant], textBlockName)[0]],\n          'before',\n          [operation.path[0]],\n        ),\n      ]\n    } else if (\n      isTextBlock &&\n      operation.path.length === 2 &&\n      editor.children[operation.path[0]]\n    ) {\n      const position =\n        block.children.length === 0 || !block.children[operation.path[1] - 1]\n          ? 'before'\n          : 'after'\n      const node = {...operation.node} as Descendant\n      if (!node._type && Text.isText(node)) {\n        node._type = 'span'\n        node.marks = []\n      }\n      const blk = fromSlateValue(\n        [\n          {\n            _key: 'bogus',\n            _type: textBlockName,\n            children: [node],\n          },\n        ],\n        textBlockName,\n      )[0] as PortableTextTextBlock\n      const child = blk.children[0]\n      return [\n        insert([child], position, [\n          {_key: block._key},\n          'children',\n          block.children.length <= 1 || !block.children[operation.path[1] - 1]\n            ? 0\n            : {_key: block.children[operation.path[1] - 1]._key},\n        ]),\n      ]\n    }\n    debug(\n      'Something was inserted into a void block. Not producing editor patches.',\n    )\n    return []\n  }\n\n  function splitNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const splitBlock = editor.children[operation.path[0]]\n    if (!editor.isTextBlock(splitBlock)) {\n      throw new Error(\n        `Block with path ${JSON.stringify(\n          operation.path[0],\n        )} is not a text block and can't be split`,\n      )\n    }\n    if (operation.path.length === 1) {\n      const oldBlock = beforeValue[operation.path[0]]\n      if (editor.isTextBlock(oldBlock)) {\n        const targetValue = fromSlateValue(\n          [editor.children[operation.path[0] + 1]],\n          textBlockName,\n        )[0]\n        if (targetValue) {\n          patches.push(\n            insert([targetValue], 'after', [{_key: splitBlock._key}]),\n          )\n          const spansToUnset = oldBlock.children.slice(operation.position)\n          spansToUnset.forEach((span) => {\n            const path = [{_key: oldBlock._key}, 'children', {_key: span._key}]\n            patches.push(unset(path))\n          })\n        }\n      }\n      return patches\n    }\n    if (operation.path.length === 2) {\n      const splitSpan = splitBlock.children[operation.path[1]]\n      if (editor.isTextSpan(splitSpan)) {\n        const targetSpans = (\n          fromSlateValue(\n            [\n              {\n                ...splitBlock,\n                children: splitBlock.children.slice(\n                  operation.path[1] + 1,\n                  operation.path[1] + 2,\n                ),\n              } as Descendant,\n            ],\n            textBlockName,\n          )[0] as PortableTextTextBlock\n        ).children\n\n        patches.push(\n          insert(targetSpans, 'after', [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n          ]),\n        )\n        patches.push(\n          set(splitSpan.text, [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n            'text',\n          ]),\n        )\n      }\n      return patches\n    }\n    return patches\n  }\n\n  function removeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = beforeValue[operation.path[0]]\n    if (operation.path.length === 1) {\n      // Remove a single block\n      if (block && block._key) {\n        return [unset([{_key: block._key}])]\n      }\n      throw new Error('Block not found')\n    } else if (editor.isTextBlock(block) && operation.path.length === 2) {\n      const spanToRemove = block.children[operation.path[1]]\n\n      if (spanToRemove) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === operation.node._key,\n        )\n\n        if (spansMatchingKey.length > 1) {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`,\n            JSON.stringify(block, null, 2),\n          )\n          return []\n        }\n\n        return [\n          unset([{_key: block._key}, 'children', {_key: spanToRemove._key}]),\n        ]\n      }\n      debug('Span not found in editor trying to remove node')\n      return []\n    } else {\n      debug('Not creating patch inside object block')\n      return []\n    }\n  }\n\n  function mergeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n\n    const block = beforeValue[operation.path[0]]\n    const updatedBlock = editor.children[operation.path[0]]\n\n    if (operation.path.length === 1) {\n      if (block?._key) {\n        const newBlock = fromSlateValue(\n          [editor.children[operation.path[0] - 1]],\n          textBlockName,\n        )[0]\n        patches.push(set(newBlock, [{_key: newBlock._key}]))\n        patches.push(unset([{_key: block._key}]))\n      } else {\n        throw new Error('Target key not found!')\n      }\n    } else if (\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(updatedBlock) &&\n      operation.path.length === 2\n    ) {\n      const updatedSpan =\n        updatedBlock.children[operation.path[1] - 1] &&\n        editor.isTextSpan(updatedBlock.children[operation.path[1] - 1])\n          ? updatedBlock.children[operation.path[1] - 1]\n          : undefined\n      const removedSpan =\n        block.children[operation.path[1]] &&\n        editor.isTextSpan(block.children[operation.path[1]])\n          ? block.children[operation.path[1]]\n          : undefined\n\n      if (updatedSpan) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === updatedSpan._key,\n        )\n\n        if (spansMatchingKey.length === 1) {\n          patches.push(\n            set(updatedSpan.text, [\n              {_key: block._key},\n              'children',\n              {_key: updatedSpan._key},\n              'text',\n            ]),\n          )\n        } else {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`,\n            JSON.stringify(block, null, 2),\n          )\n        }\n      }\n\n      if (removedSpan) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === removedSpan._key,\n        )\n\n        if (spansMatchingKey.length === 1) {\n          patches.push(\n            unset([{_key: block._key}, 'children', {_key: removedSpan._key}]),\n          )\n        } else {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`,\n            JSON.stringify(block, null, 2),\n          )\n        }\n      }\n    } else {\n      debug(\"Void nodes can't be merged, not creating any patches\")\n    }\n    return patches\n  }\n\n  function moveNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const block = beforeValue[operation.path[0]]\n    const targetBlock = beforeValue[operation.newPath[0]]\n\n    if (!targetBlock) {\n      return patches\n    }\n\n    if (operation.path.length === 1) {\n      const position: InsertPosition =\n        operation.path[0] > operation.newPath[0] ? 'before' : 'after'\n      patches.push(unset([{_key: block._key}]))\n      patches.push(\n        insert([fromSlateValue([block], textBlockName)[0]], position, [\n          {_key: targetBlock._key},\n        ]),\n      )\n    } else if (\n      operation.path.length === 2 &&\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(targetBlock)\n    ) {\n      const child = block.children[operation.path[1]]\n      const targetChild = targetBlock.children[operation.newPath[1]]\n      const position =\n        operation.newPath[1] === targetBlock.children.length\n          ? 'after'\n          : 'before'\n      const childToInsert = (\n        fromSlateValue([block], textBlockName)[0] as PortableTextTextBlock\n      ).children[operation.path[1]]\n      patches.push(unset([{_key: block._key}, 'children', {_key: child._key}]))\n      patches.push(\n        insert([childToInsert], position, [\n          {_key: targetBlock._key},\n          'children',\n          {_key: targetChild._key},\n        ]),\n      )\n    }\n    return patches\n  }\n\n  return {\n    insertNodePatch,\n    insertTextPatch,\n    mergeNodePatch,\n    moveNodePatch,\n    removeNodePatch,\n    removeTextPatch,\n    setNodePatch,\n    splitNodePatch,\n  }\n}\n","import {Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertTextOperationImplementation: BehaviorOperationImplementation<\n  'insert.text'\n> = ({operation}) => {\n  if (operation.editor.marks) {\n    Transforms.insertNodes(operation.editor, {\n      text: operation.text,\n      ...operation.editor.marks,\n    })\n  } else {\n    Transforms.insertText(operation.editor, operation.text)\n  }\n\n  operation.editor.marks = null\n}\n","function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every(mark => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && (\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    !(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) &&\n    // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every(def => typeof def._key == \"string\")) &&\n    // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every(child => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction isPortableTextListItemBlock(block) {\n  return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem == \"string\" && (typeof block.level > \"u\" || typeof block.level == \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n  return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n  return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n  return node._type === \"@text\";\n}\nconst knownDecorators = [\"strong\", \"em\", \"code\", \"underline\", \"strike-through\"];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n  if (!isPortableTextSpan(span) || !span.marks) return [];\n  if (!span.marks.length) return [];\n  const marks = span.marks.slice(),\n    occurences = {};\n  return marks.forEach(mark => {\n    occurences[mark] = 1;\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex];\n      if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) occurences[mark]++;else break;\n    }\n  }), marks.sort((markA, markB) => sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n  const aOccurences = occurences[markA],\n    bOccurences = occurences[markB];\n  if (aOccurences !== bOccurences) return bOccurences - aOccurences;\n  const aKnownPos = knownDecorators.indexOf(markA),\n    bKnownPos = knownDecorators.indexOf(markB);\n  return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n  var _a, _b;\n  const {\n      children\n    } = block,\n    markDefs = (_a = block.markDefs) != null ? _a : [];\n  if (!children || !children.length) return [];\n  const sortedMarks = children.map(sortMarksByOccurences),\n    rootNode = {\n      _type: \"@span\",\n      children: [],\n      markType: \"<unknown>\"\n    };\n  let nodeStack = [rootNode];\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i];\n    if (!span) continue;\n    const marksNeeded = sortedMarks[i] || [];\n    let pos = 1;\n    if (nodeStack.length > 1) for (pos; pos < nodeStack.length; pos++) {\n      const mark = ((_b = nodeStack[pos]) == null ? void 0 : _b.markKey) || \"\",\n        index = marksNeeded.indexOf(mark);\n      if (index === -1) break;\n      marksNeeded.splice(index, 1);\n    }\n    nodeStack = nodeStack.slice(0, pos);\n    let currentNode = nodeStack[nodeStack.length - 1];\n    if (currentNode) {\n      for (const markKey of marksNeeded) {\n        const markDef = markDefs == null ? void 0 : markDefs.find(def => def._key === markKey),\n          markType = markDef ? markDef._type : markKey,\n          node = {\n            _type: \"@span\",\n            _key: span._key,\n            children: [],\n            markDef,\n            markType,\n            markKey\n          };\n        currentNode.children.push(node), nodeStack.push(node), currentNode = node;\n      }\n      if (isPortableTextSpan(span)) {\n        const lines = span.text.split(`\n`);\n        for (let line = lines.length; line-- > 1;) lines.splice(line, 0, `\n`);\n        currentNode.children = currentNode.children.concat(lines.map(text => ({\n          _type: \"@text\",\n          text\n        })));\n      } else currentNode.children = currentNode.children.concat(span);\n    }\n  }\n  return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n  const tree = [];\n  let currentList;\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    if (block) {\n      if (!isPortableTextListItemBlock(block)) {\n        tree.push(block), currentList = void 0;\n        continue;\n      }\n      if (!currentList) {\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (blockMatchesList(block, currentList)) {\n        currentList.children.push(block);\n        continue;\n      }\n      if ((block.level || 1) > currentList.level) {\n        const newList = listFromBlock(block, i, mode);\n        if (mode === \"html\") {\n          const lastListItem = currentList.children[currentList.children.length - 1],\n            newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {\n              children: [...lastListItem.children, newList]\n            });\n          currentList.children[currentList.children.length - 1] = newLastChild;\n        } else currentList.children.push(newList);\n        currentList = newList;\n        continue;\n      }\n      if ((block.level || 1) < currentList.level) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, block);\n        if (match) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        }\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (block.listItem !== currentList.listItem) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, {\n            level: block.level || 1\n          });\n        if (match && match.listItem === block.listItem) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        } else {\n          currentList = listFromBlock(block, i, mode), tree.push(currentList);\n          continue;\n        }\n      }\n      console.warn(\"Unknown state encountered for block\", block), tree.push(block);\n    }\n  }\n  return tree;\n}\nfunction blockMatchesList(block, list) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n  return {\n    _type: \"@list\",\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block]\n  };\n}\nfunction findListMatching(rootNode, matching) {\n  const level = matching.level || 1,\n    style = matching.listItem || \"normal\",\n    filterOnType = typeof matching.listItem == \"string\";\n  if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style) return rootNode;\n  if (!(\"children\" in rootNode)) return;\n  const node = rootNode.children[rootNode.children.length - 1];\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nfunction spanToPlainText(span) {\n  let text = \"\";\n  return span.children.forEach(current => {\n    isPortableTextToolkitTextNode(current) ? text += current.text : isPortableTextToolkitSpan(current) && (text += spanToPlainText(current));\n  }), text;\n}\nconst leadingSpace = /^\\s/,\n  trailingSpace = /\\s$/;\nfunction toPlainText(block) {\n  const blocks = Array.isArray(block) ? block : [block];\n  let text = \"\";\n  return blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current)) return;\n    let pad = !1;\n    current.children.forEach(span => {\n      isPortableTextSpan(span) ? (text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\", text += span.text, pad = !1) : pad = !0;\n    }), index !== blocks.length - 1 && (text += `\n\n`);\n  }), text;\n}\nconst LIST_NEST_MODE_HTML = \"html\",\n  LIST_NEST_MODE_DIRECT = \"direct\";\nexport { LIST_NEST_MODE_DIRECT, LIST_NEST_MODE_HTML, buildMarksTree, isPortableTextBlock, isPortableTextListItemBlock, isPortableTextSpan, isPortableTextToolkitList, isPortableTextToolkitSpan, isPortableTextToolkitTextNode, nestLists, sortMarksByOccurences, spanToPlainText, toPlainText };\n//# sourceMappingURL=index.js.map\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Node, Path} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\nexport function getPreviousSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let previousSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath, {\n    reverse: true,\n  })) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isBefore(childPath, spanPath)) {\n      previousSpan = child\n      break\n    }\n  }\n\n  return previousSpan\n}\n\nexport function getNextSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let nextSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath)) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isAfter(childPath, spanPath)) {\n      nextSpan = child\n      break\n    }\n  }\n\n  return nextSpan\n}\n","import type {Editor} from 'slate'\nimport {IS_PROCESSING_REMOTE_CHANGES} from './weakMaps'\n\nexport function withRemoteChanges(editor: Editor, fn: () => void): void {\n  const prev = isChangingRemotely(editor) || false\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, true)\n  fn()\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, prev)\n}\n\nexport function isChangingRemotely(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor)\n}\n","import type {Editor} from 'slate'\n\nconst IS_UDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\nconst IS_REDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withUndoing(editor: Editor, fn: () => void) {\n  const prev = isUndoing(editor)\n  IS_UDOING.set(editor, true)\n  fn()\n  IS_UDOING.set(editor, prev)\n}\n\nexport function isUndoing(editor: Editor) {\n  return IS_UDOING.get(editor) ?? false\n}\n\nexport function setIsUndoing(editor: Editor, isUndoing: boolean) {\n  IS_UDOING.set(editor, isUndoing)\n}\n\nexport function withRedoing(editor: Editor, fn: () => void) {\n  const prev = isRedoing(editor)\n  IS_REDOING.set(editor, true)\n  fn()\n  IS_REDOING.set(editor, prev)\n}\n\nexport function isRedoing(editor: Editor) {\n  return IS_REDOING.get(editor) ?? false\n}\n\nexport function setIsRedoing(editor: Editor, isRedoing: boolean) {\n  IS_REDOING.set(editor, isRedoing)\n}\n","/**\n *\n * This plugin will change Slate's default marks model (every prop is a mark) with the Portable Text model (marks is an array of strings on prop .marks).\n *\n */\n\nimport {isPortableTextBlock, isPortableTextSpan} from '@portabletext/toolkit'\nimport type {PortableTextObject, PortableTextSpan} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Element, Node, Path, Range, Text, Transforms} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {getNextSpan, getPreviousSpan} from '../../internal-utils/sibling-utils'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {BehaviorOperationImplementation} from '../../operations/behavior.operations'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextMarkModel')\n\nexport function createWithPortableTextMarkModel(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPortableTextMarkModel(editor: PortableTextSlateEditor) {\n    const {apply, normalizeNode} = editor\n    const decorators = editorActor\n      .getSnapshot()\n      .context.schema.decorators.map((t) => t.name)\n\n    // Extend Slate's default normalization. Merge spans with same set of .marks when doing merge_node operations, and clean up markDefs / marks\n    editor.normalizeNode = (nodeEntry) => {\n      const [node, path] = nodeEntry\n\n      if (editor.isTextBlock(node)) {\n        const children = Node.children(editor, path)\n\n        for (const [child, childPath] of children) {\n          const nextNode = node.children[childPath[1] + 1]\n\n          if (\n            editor.isTextSpan(child) &&\n            editor.isTextSpan(nextNode) &&\n            child.marks?.every((mark) => nextNode.marks?.includes(mark)) &&\n            nextNode.marks?.every((mark) => child.marks?.includes(mark))\n          ) {\n            debug(\n              'Merging spans',\n              JSON.stringify(child, null, 2),\n              JSON.stringify(nextNode, null, 2),\n            )\n            editorActor.send({type: 'normalizing'})\n            Transforms.mergeNodes(editor, {\n              at: [childPath[0], childPath[1] + 1],\n              voids: true,\n            })\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Add missing .markDefs to block nodes\n       */\n      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n        debug('Adding .markDefs to block node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {markDefs: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Add missing .marks to span nodes\n       */\n      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n        debug('Adding .marks to span node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {marks: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Remove annotations from empty spans\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n        const decorators = editorActor\n          .getSnapshot()\n          .context.schema.decorators.map((decorator) => decorator.name)\n        const annotations = node.marks?.filter(\n          (mark) => !decorators.includes(mark),\n        )\n\n        if (editor.isTextBlock(block)) {\n          if (node.text === '' && annotations && annotations.length > 0) {\n            debug('Removing annotations from empty span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {marks: node.marks?.filter((mark) => decorators.includes(mark))},\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from child spans of block nodes\n       */\n      if (editor.isTextBlock(node)) {\n        const decorators = editorActor\n          .getSnapshot()\n          .context.schema.decorators.map((decorator) => decorator.name)\n\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (editor.isTextSpan(child)) {\n            const marks = child.marks ?? []\n            const orphanedAnnotations = marks.filter((mark) => {\n              return (\n                !decorators.includes(mark) &&\n                !node.markDefs?.find((def) => def._key === mark)\n              )\n            })\n\n            if (orphanedAnnotations.length > 0) {\n              debug('Removing orphaned annotations from span node')\n              editorActor.send({type: 'normalizing'})\n              Transforms.setNodes(\n                editor,\n                {\n                  marks: marks.filter(\n                    (mark) => !orphanedAnnotations.includes(mark),\n                  ),\n                },\n                {at: childPath},\n              )\n              editorActor.send({type: 'done normalizing'})\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from span nodes\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n\n        if (editor.isTextBlock(block)) {\n          const decorators = editorActor\n            .getSnapshot()\n            .context.schema.decorators.map((decorator) => decorator.name)\n          const marks = node.marks ?? []\n          const orphanedAnnotations = marks.filter((mark) => {\n            return (\n              !decorators.includes(mark) &&\n              !block.markDefs?.find((def) => def._key === mark)\n            )\n          })\n\n          if (orphanedAnnotations.length > 0) {\n            debug('Removing orphaned annotations from span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {\n                marks: marks.filter(\n                  (mark) => !orphanedAnnotations.includes(mark),\n                ),\n              },\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      // Remove duplicate markDefs\n      if (editor.isTextBlock(node)) {\n        const markDefs = node.markDefs ?? []\n        const markDefKeys = new Set<string>()\n        const newMarkDefs: Array<PortableTextObject> = []\n\n        for (const markDef of markDefs) {\n          if (!markDefKeys.has(markDef._key)) {\n            markDefKeys.add(markDef._key)\n            newMarkDefs.push(markDef)\n          }\n        }\n\n        if (markDefs.length !== newMarkDefs.length) {\n          debug('Removing duplicate markDefs')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(editor, {markDefs: newMarkDefs}, {at: path})\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      // Check consistency of markDefs (unless we are merging two nodes)\n      if (\n        editor.isTextBlock(node) &&\n        !editor.operations.some(\n          (op) =>\n            op.type === 'merge_node' &&\n            'markDefs' in op.properties &&\n            op.path.length === 1,\n        )\n      ) {\n        const newMarkDefs = (node.markDefs || []).filter((def) => {\n          return node.children.find((child) => {\n            return (\n              Text.isText(child) &&\n              Array.isArray(child.marks) &&\n              child.marks.includes(def._key)\n            )\n          })\n        })\n        if (node.markDefs && !isEqual(newMarkDefs, node.markDefs)) {\n          debug('Removing markDef not in use')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {\n              markDefs: newMarkDefs,\n            },\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    editor.apply = (op) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'set_selection') {\n        const marks = Editor.marks(editor)\n\n        if (\n          marks &&\n          op.properties &&\n          op.newProperties &&\n          op.properties.anchor &&\n          op.properties.focus &&\n          op.newProperties.anchor &&\n          op.newProperties.focus\n        ) {\n          const previousSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.properties.anchor,\n            focus: op.properties.focus,\n          })\n          const newSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.newProperties.anchor,\n            focus: op.newProperties.focus,\n          })\n\n          if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n            const focusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.properties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const newFocusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.newProperties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const movedToNextSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] + 1 &&\n              focusSpan.text.length === op.properties.focus.offset &&\n              op.newProperties.focus.offset === 0\n            const movedToPreviousSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] - 1 &&\n              op.properties.focus.offset === 0 &&\n              newFocusSpan.text.length === op.newProperties.focus.offset\n\n            // If the editor has marks and we are not visually moving the\n            // selection then we just abort. Otherwise the marks would be\n            // cleared and we can't use them for the possible subsequent insert\n            // operation.\n            if (movedToNextSpan || movedToPreviousSpan) {\n              return\n            }\n          }\n        }\n      }\n\n      if (op.type === 'insert_node') {\n        const {selection} = editor\n\n        if (selection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {depth: 1})\n          const previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath: op.path,\n          })\n          const previousSpanAnnotations = previousSpan\n            ? previousSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath: [op.path[0], op.path[1] - 1],\n          })\n          const nextSpanAnnotations = nextSpan\n            ? nextSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const annotationsEnding =\n            previousSpanAnnotations?.filter(\n              (annotation) => !nextSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheEndOfAnnotation = annotationsEnding.length > 0\n\n          if (\n            atTheEndOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsEnding.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsEnding.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const annotationsStarting =\n            nextSpanAnnotations?.filter(\n              (annotation) => !previousSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheStartOfAnnotation = annotationsStarting.length > 0\n\n          if (\n            atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsStarting.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsStarting.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const nextSpanDecorators =\n            nextSpan?.marks?.filter((mark) => decorators.includes(mark)) ?? []\n          const decoratorStarting = nextSpanDecorators.length > 0\n\n          if (\n            decoratorStarting &&\n            atTheEndOfAnnotation &&\n            !atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.length === 0\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks: nextSpanDecorators,\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'insert_text') {\n        const {selection} = editor\n        const collapsedSelection = selection\n          ? Range.isCollapsed(selection)\n          : false\n\n        if (selection && collapsedSelection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: selection.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          const marks = span.marks ?? []\n          const marksWithoutAnnotations = marks.filter((mark) =>\n            decorators.includes(mark),\n          )\n          const spanHasAnnotations =\n            marks.length > marksWithoutAnnotations.length\n\n          const spanIsEmpty = span.text.length === 0\n\n          const atTheBeginningOfSpan = selection.anchor.offset === 0\n          const atTheEndOfSpan = selection.anchor.offset === span.text.length\n\n          const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n          const nextSpan = getNextSpan({editor, blockPath, spanPath})\n          const nextSpanAnnotations =\n            nextSpan?.marks?.filter((mark) => !decorators.includes(mark)) ?? []\n          const spanAnnotations = marks.filter(\n            (mark) => !decorators.includes(mark),\n          )\n\n          const previousSpanHasAnnotations = previousSpan\n            ? previousSpan.marks?.some((mark) => !decorators.includes(mark))\n            : false\n          const previousSpanHasSameAnnotations = previousSpan\n            ? previousSpan.marks\n                ?.filter((mark) => !decorators.includes(mark))\n                .every((mark) => marks.includes(mark))\n            : false\n          const previousSpanHasSameAnnotation = previousSpan\n            ? previousSpan.marks?.some(\n                (mark) => !decorators.includes(mark) && marks.includes(mark),\n              )\n            : false\n\n          const previousSpanHasSameMarks = previousSpan\n            ? previousSpan.marks?.every((mark) => marks.includes(mark))\n            : false\n          const nextSpanSharesSomeAnnotations = spanAnnotations.some((mark) =>\n            nextSpanAnnotations?.includes(mark),\n          )\n\n          if (spanHasAnnotations && !spanIsEmpty) {\n            if (atTheBeginningOfSpan) {\n              if (previousSpanHasSameMarks) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? [],\n                })\n                return\n              } else if (previousSpanHasSameAnnotations) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? [],\n                })\n                return\n              } else if (previousSpanHasSameAnnotation) {\n                apply(op)\n                return\n              } else if (!previousSpan) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: [],\n                })\n                return\n              }\n            }\n\n            if (atTheEndOfSpan) {\n              if (\n                (nextSpan &&\n                  nextSpanSharesSomeAnnotations &&\n                  nextSpanAnnotations.length < spanAnnotations.length) ||\n                !nextSpanSharesSomeAnnotations\n              ) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: nextSpan?.marks ?? [],\n                })\n                return\n              }\n\n              if (!nextSpan) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: [],\n                })\n                return\n              }\n            }\n          }\n\n          if (atTheBeginningOfSpan && !spanIsEmpty && !!previousSpan) {\n            Transforms.insertNodes(editor, {\n              _type: 'span',\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              text: op.text,\n              marks: previousSpanHasAnnotations\n                ? []\n                : (previousSpan.marks ?? []).filter((mark) =>\n                    decorators.includes(mark),\n                  ),\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'remove_text') {\n        const {selection} = editor\n\n        if (selection && Range.isExpanded(selection)) {\n          const [block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: {path: op.path, offset: op.offset},\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          if (span && block && isPortableTextBlock(block)) {\n            const markDefs = block.markDefs ?? []\n            const marks = span.marks ?? []\n            const spanHasAnnotations = marks.some((mark) =>\n              markDefs.find((markDef) => markDef._key === mark),\n            )\n            const deletingFromTheEnd =\n              op.offset + op.text.length === span.text.length\n            const deletingAllText = op.offset === 0 && deletingFromTheEnd\n\n            const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n            const nextSpan = getNextSpan({editor, blockPath, spanPath})\n\n            const previousSpanHasSameAnnotation = previousSpan\n              ? previousSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n            const nextSpanHasSameAnnotation = nextSpan\n              ? nextSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n\n            if (\n              spanHasAnnotations &&\n              deletingAllText &&\n              !previousSpanHasSameAnnotation &&\n              !nextSpanHasSameAnnotation\n            ) {\n              const marksWithoutAnnotationMarks: string[] = (\n                {\n                  ...(Editor.marks(editor) || {}),\n                }.marks || []\n              ).filter((mark) => decorators.includes(mark))\n\n              Editor.withoutNormalizing(editor, () => {\n                apply(op)\n                Transforms.setNodes(\n                  editor,\n                  {marks: marksWithoutAnnotationMarks},\n                  {at: op.path},\n                )\n              })\n\n              editor.onChange()\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Copy over markDefs when merging blocks\n       */\n      if (\n        op.type === 'merge_node' &&\n        op.path.length === 1 &&\n        'markDefs' in op.properties &&\n        op.properties._type ===\n          editorActor.getSnapshot().context.schema.block.name &&\n        Array.isArray(op.properties.markDefs) &&\n        op.properties.markDefs.length > 0 &&\n        op.path[0] - 1 >= 0\n      ) {\n        const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] - 1])\n\n        if (editor.isTextBlock(targetBlock)) {\n          const oldDefs =\n            (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n          const newMarkDefs = uniq([...oldDefs, ...op.properties.markDefs])\n\n          debug(`Copying markDefs over to merged block`, op)\n          Transforms.setNodes(\n            editor,\n            {markDefs: newMarkDefs},\n            {at: targetPath, voids: false},\n          )\n          apply(op)\n          return\n        }\n      }\n\n      apply(op)\n    }\n\n    return editor\n  }\n}\n\nexport const removeDecoratorOperationImplementation: BehaviorOperationImplementation<\n  'decorator.remove'\n> = ({operation}) => {\n  const editor = operation.editor\n  const mark = operation.decorator\n  const {selection} = editor\n\n  if (selection) {\n    if (Range.isExpanded(selection)) {\n      // Split if needed\n      Transforms.setNodes(\n        editor,\n        {},\n        {match: Text.isText, split: true, hanging: true},\n      )\n      if (editor.selection) {\n        const splitTextNodes = [\n          ...Editor.nodes(editor, {\n            at: editor.selection,\n            match: Text.isText,\n          }),\n        ]\n        splitTextNodes.forEach(([node, path]) => {\n          const block = editor.children[path[0]]\n          if (Element.isElement(block) && block.children.includes(node)) {\n            Transforms.setNodes(\n              editor,\n              {\n                marks: (Array.isArray(node.marks) ? node.marks : []).filter(\n                  (eMark: string) => eMark !== mark,\n                ),\n                _type: 'span',\n              },\n              {at: path},\n            )\n          }\n        })\n      }\n    } else {\n      const [block, blockPath] = Editor.node(editor, selection, {\n        depth: 1,\n      })\n      const lonelyEmptySpan =\n        editor.isTextBlock(block) &&\n        block.children.length === 1 &&\n        editor.isTextSpan(block.children[0]) &&\n        block.children[0].text === ''\n          ? block.children[0]\n          : undefined\n\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? []\n        const existingMarksWithoutDecorator = existingMarks.filter(\n          (existingMark) => existingMark !== mark,\n        )\n\n        Transforms.setNodes(\n          editor,\n          {\n            marks: existingMarksWithoutDecorator,\n          },\n          {\n            at: blockPath,\n            match: (node) => editor.isTextSpan(node),\n          },\n        )\n      } else {\n        const existingMarks: string[] =\n          {\n            ...(Editor.marks(editor) || {}),\n          }.marks || []\n        const marks = {\n          ...(Editor.marks(editor) || {}),\n          marks: existingMarks.filter((eMark) => eMark !== mark),\n        } as Text\n        editor.marks = {marks: marks.marks, _type: 'span'} as Text\n      }\n    }\n\n    if (editor.selection) {\n      // Reselect\n      const selection = editor.selection\n      editor.selection = {...selection}\n    }\n  }\n}\n\nexport function isDecoratorActive({\n  editor,\n  decorator,\n}: {\n  editor: PortableTextSlateEditor\n  decorator: string\n}) {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedTextNodes = Array.from(\n    Editor.nodes(editor, {match: Text.isText, at: editor.selection}),\n  )\n\n  if (selectedTextNodes.length === 0) {\n    return false\n  }\n\n  if (Range.isExpanded(editor.selection)) {\n    return selectedTextNodes.every((n) => {\n      const [node] = n\n\n      return node.marks?.includes(decorator)\n    })\n  }\n\n  return (\n    {\n      ...(Editor.marks(editor) || {}),\n    }.marks || []\n  ).includes(decorator)\n}\n","function cloneDiff(diff2) {\n  const [type, patch] = diff2;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA, text2 = textB;\n  const text1Length = text1.length, text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0)\n    return 0;\n  text1Length > text2Length ? text1 = text1.substring(text1Length - text2Length) : text1Length < text2Length && (text2 = text2.substring(0, text1Length));\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2)\n    return textLength;\n  let best = 0, length = 1;\n  for (let found = 0; found !== -1; ) {\n    const pattern = text1.substring(textLength - length);\n    if (found = text2.indexOf(pattern), found === -1)\n      return best;\n    length += found, (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) && (best = length, length++);\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerStart = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid) ? (pointerMin = pointerMid, pointerStart = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerEnd = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd) ? (pointerMin = pointerMid, pointerEnd = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length, text2Length = text2.length, maxD = Math.ceil((text1Length + text2Length) / 2), vOffset = maxD, vLength = 2 * maxD, v1 = new Array(vLength), v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++)\n    v1[x] = -1, v2[x] = -1;\n  v1[vOffset + 1] = 0, v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length, front = delta % 2 !== 0;\n  let k1start = 0, k1end = 0, k2start = 0, k2end = 0;\n  for (let d = 0; d < maxD && !(Date.now() > deadline); d++) {\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1] ? x1 = v1[k1Offset + 1] : x1 = v1[k1Offset - 1] + 1;\n      let y1 = x1 - k1;\n      for (; x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1); )\n        x1++, y1++;\n      if (v1[k1Offset] = x1, x1 > text1Length)\n        k1end += 2;\n      else if (y1 > text2Length)\n        k1start += 2;\n      else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1] ? x2 = v2[k2Offset + 1] : x2 = v2[k2Offset - 1] + 1;\n      let y2 = x2 - k2;\n      for (; x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1); )\n        x2++, y2++;\n      if (v2[k2Offset] = x2, x2 > text1Length)\n        k2end += 2;\n      else if (y2 > text2Length)\n        k2start += 2;\n      else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset], y1 = vOffset + x1 - k1Offset;\n          if (x2 = text1Length - x2, x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n  }\n  return [\n    [DIFF_DELETE, text1],\n    [DIFF_INSERT, text2]\n  ];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x), text2a = text2.substring(0, y), text1b = text1.substring(x), text2b = text2.substring(y), diffs = doDiff(text1a, text2a, { checkLines: !1, deadline }), diffsb = doDiff(text1b, text2b, { checkLines: !1, deadline });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2, timeout = 1) {\n  if (timeout <= 0)\n    return null;\n  const longText = text1.length > text2.length ? text1 : text2, shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length)\n    return null;\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4)), halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2)\n    halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  else {\n    if (!halfMatch1 && !halfMatch2)\n      return null;\n    halfMatch2 ? halfMatch1 || (halfMatch = halfMatch2) : halfMatch = halfMatch1;\n  }\n  if (!halfMatch)\n    throw new Error(\"Unable to find a half match.\");\n  let text1A, text1B, text2A, text2B;\n  text1.length > text2.length ? (text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3]) : (text2A = halfMatch[0], text2B = halfMatch[1], text1A = halfMatch[2], text1B = halfMatch[3]);\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1, bestCommon = \"\", bestLongTextA, bestLongTextB, bestShortTextA, bestShortTextB;\n  for (; (j = shortText.indexOf(seed, j + 1)) !== -1; ) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j)), suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    bestCommon.length < suffixLength + prefixLength && (bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength), bestLongTextA = longText.slice(0, i - suffixLength), bestLongTextB = longText.slice(i + prefixLength), bestShortTextA = shortText.slice(0, j - suffixLength), bestShortTextB = shortText.slice(j + prefixLength));\n  }\n  return bestCommon.length * 2 >= longText.length ? [\n    bestLongTextA || \"\",\n    bestLongTextB || \"\",\n    bestShortTextA || \"\",\n    bestShortTextB || \"\",\n    bestCommon || \"\"\n  ] : null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1], text = [];\n    for (let y = 0; y < chars.length; y++)\n      text[y] = lineArray[chars.charCodeAt(y)];\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [], lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\", lineStart = 0, lineEnd = -1, lineArrayLength = lineArray.length;\n    for (; lineEnd < text.length - 1; ) {\n      lineEnd = text.indexOf(`\n`, lineStart), lineEnd === -1 && (lineEnd = text.length - 1);\n      let line = text.slice(lineStart, lineEnd + 1);\n      (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) ? chars += String.fromCharCode(lineHash[line]) : (lineArrayLength === maxLines && (line = text.slice(lineStart), lineEnd = text.length), chars += String.fromCharCode(lineArrayLength), lineHash[line] = lineArrayLength, lineArray[lineArrayLength++] = line), lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return { chars1, chars2, lineArray };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA, text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1, text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: !1,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray), diffs = cleanupSemantic(diffs), diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\";\n  for (; pointer < diffs.length; ) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert), pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: !1,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--)\n            diffs.splice(pointer, 0, aa[j]);\n          pointer += aa.length;\n        }\n        countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  return diffs.pop(), diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1)\n    return [[DIFF_INSERT, text2]];\n  if (!text2)\n    return [[DIFF_DELETE, text1]];\n  const longtext = text1.length > text2.length ? text1 : text2, shorttext = text1.length > text2.length ? text2 : text1, i = longtext.indexOf(shorttext);\n  if (i !== -1)\n    return diffs = [\n      [DIFF_INSERT, longtext.substring(0, i)],\n      [DIFF_EQUAL, shorttext],\n      [DIFF_INSERT, longtext.substring(i + shorttext.length)]\n    ], text1.length > text2.length && (diffs[0][0] = DIFF_DELETE, diffs[2][0] = DIFF_DELETE), diffs;\n  if (shorttext.length === 1)\n    return [\n      [DIFF_DELETE, text1],\n      [DIFF_INSERT, text2]\n    ];\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3], midCommon = halfMatch[4], diffsA = doDiff(text1A, text2A, opts), diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  return opts.checkLines && text1.length > 100 && text2.length > 100 ? doLineModeDiff(text1, text2, opts) : bisect(text1, text2, opts.deadline);\n}\nvar __defProp$2 = Object.defineProperty, __getOwnPropSymbols$2 = Object.getOwnPropertySymbols, __hasOwnProp$2 = Object.prototype.hasOwnProperty, __propIsEnum$2 = Object.prototype.propertyIsEnumerable, __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$2 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  if (__getOwnPropSymbols$2)\n    for (var prop of __getOwnPropSymbols$2(b))\n      __propIsEnum$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  return a;\n};\nconst DIFF_DELETE = -1, DIFF_INSERT = 1, DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null)\n    throw new Error(\"Null input. (diff)\");\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  return adjustDiffForSurrogatePairs(diffs), diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA, text2 = textB;\n  if (text1 === text2)\n    return text1 ? [[DIFF_EQUAL, text1]] : [];\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength), text2 = text2.substring(commonlength), commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength), text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  return commonprefix && diffs.unshift([DIFF_EQUAL, commonprefix]), commonsuffix && diffs.push([DIFF_EQUAL, commonsuffix]), diffs = cleanupMerge(diffs), diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  return typeof timeout < \"u\" && (t = timeout <= 0 ? Number.MAX_VALUE : timeout), Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return __spreadValues$2({\n    checkLines: !0,\n    deadline: createDeadLine(opts.timeout || 1)\n  }, opts);\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null, deleteIdx = null, j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length !== 0) {\n      if (op === DIFF_INSERT) {\n        insertIdx === null && (insertIdx = j);\n        continue;\n      } else if (op === DIFF_DELETE) {\n        deleteIdx === null && (deleteIdx = j);\n        continue;\n      } else if (op === DIFF_EQUAL) {\n        if (insertIdx === null && deleteIdx === null) {\n          const [rest, char2] = splitChar(diffs[i][1], dir);\n          diffs[i][1] = rest, diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n          return;\n        }\n        break;\n      }\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText, insertChar] = splitChar(diffs[insertIdx][1], inv), [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText, diffs[deleteIdx][1] = deleteText, diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text, insertIdx === null ? (diffs.splice(j, 0, [DIFF_INSERT, char]), deleteIdx !== null && deleteIdx >= j && deleteIdx++) : diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv), deleteIdx === null ? diffs.splice(j, 0, [DIFF_DELETE, char]) : diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0], lastChar = diffText[diffText.length - 1];\n    isHighSurrogate(lastChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, 1), isLowSurrogate(firstChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, -1);\n  }\n  for (let i = 0; i < diffs.length; i++)\n    diffs[i][1].length === 0 && diffs.splice(i, 1);\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (equalities[equalitiesLength++] = pointer, lengthInsertions1 = lengthInsertions2, lengthDeletions1 = lengthDeletions2, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = diffs[pointer][1]) : (diffs[pointer][0] === DIFF_INSERT ? lengthInsertions2 += diffs[pointer][1].length : lengthDeletions2 += diffs[pointer][1].length, lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = null, hasChanges = !0)), pointer++;\n  for (hasChanges && (diffs = cleanupMerge(diffs)), diffs = cleanupSemanticLossless(diffs), pointer = 1; pointer < diffs.length; ) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1], insertion = diffs[pointer][1], overlapLength1 = getCommonOverlap(deletion, insertion), overlapLength2 = getCommonOverlap(insertion, deletion);\n      overlapLength1 >= overlapLength2 ? (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]), diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1), diffs[pointer + 1][1] = insertion.substring(overlapLength1), pointer++) : (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]), diffs[pointer - 1][0] = DIFF_INSERT, diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2), diffs[pointer + 1][0] = DIFF_DELETE, diffs[pointer + 1][1] = deletion.substring(overlapLength2), pointer++), pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/, whitespaceRegex = /\\s/, linebreakRegex = /[\\r\\n]/, blanklineEndRegex = /\\n\\r?\\n$/, blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two)\n      return 6;\n    const char1 = one.charAt(one.length - 1), char2 = two.charAt(0), nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex), nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex), whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex), whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex), lineBreak1 = whitespace1 && char1.match(linebreakRegex), lineBreak2 = whitespace2 && char2.match(linebreakRegex), blankLine1 = lineBreak1 && one.match(blanklineEndRegex), blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    return blankLine1 || blankLine2 ? 5 : lineBreak1 || lineBreak2 ? 4 : nonAlphaNumeric1 && !whitespace1 && whitespace2 ? 3 : whitespace1 || whitespace2 ? 2 : nonAlphaNumeric1 || nonAlphaNumeric2 ? 1 : 0;\n  }\n  let pointer = 1;\n  for (; pointer < diffs.length - 1; ) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1], edit = diffs[pointer][1], equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset), edit = commonString + edit.substring(0, edit.length - commonOffset), equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2, bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      for (; edit.charAt(0) === equality2.charAt(0); ) {\n        equality1 += edit.charAt(0), edit = edit.substring(1) + equality2.charAt(0), equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        score >= bestScore && (bestScore = score, bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2);\n      }\n      diffs[pointer - 1][1] !== bestEquality1 && (bestEquality1 ? diffs[pointer - 1][1] = bestEquality1 : (diffs.splice(pointer - 1, 1), pointer--), diffs[pointer][1] = bestEdit, bestEquality2 ? diffs[pointer + 1][1] = bestEquality2 : (diffs.splice(pointer + 1, 1), pointer--));\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\", commonlength;\n  for (; pointer < diffs.length; )\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_EQUAL:\n        countDelete + countInsert > 1 ? (countDelete !== 0 && countInsert !== 0 && (commonlength = getCommonPrefix(textInsert, textDelete), commonlength !== 0 && (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL ? diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(\n          0,\n          commonlength\n        ) : (diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]), pointer++), textInsert = textInsert.substring(commonlength), textDelete = textDelete.substring(commonlength)), commonlength = getCommonSuffix(textInsert, textDelete), commonlength !== 0 && (diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1], textInsert = textInsert.substring(0, textInsert.length - commonlength), textDelete = textDelete.substring(0, textDelete.length - commonlength))), pointer -= countDelete + countInsert, diffs.splice(pointer, countDelete + countInsert), textDelete.length && (diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]), pointer++), textInsert.length && (diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]), pointer++), pointer++) : pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL ? (diffs[pointer - 1][1] += diffs[pointer][1], diffs.splice(pointer, 1)) : pointer++, countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation\");\n    }\n  diffs[diffs.length - 1][1] === \"\" && diffs.pop();\n  let hasChanges = !1;\n  for (pointer = 1; pointer < diffs.length - 1; )\n    diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL && (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1] ? (diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length), diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1], diffs.splice(pointer - 1, 1), hasChanges = !0) : diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1] && (diffs[pointer - 1][1] += diffs[pointer + 1][1], diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1], diffs.splice(pointer + 1, 1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nfunction trueCount(...args) {\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs, editCost = 4) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, preIns = !1, preDel = !1, postIns = !1, postDel = !1;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (diffs[pointer][1].length < editCost && (postIns || postDel) ? (equalities[equalitiesLength++] = pointer, preIns = postIns, preDel = postDel, lastEquality = diffs[pointer][1]) : (equalitiesLength = 0, lastEquality = null), postIns = !1, postDel = !1) : (diffs[pointer][0] === DIFF_DELETE ? postDel = !0 : postIns = !0, lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, lastEquality = null, preIns && preDel ? (postIns = !0, postDel = !0, equalitiesLength = 0) : (equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, postIns = !1, postDel = !1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nvar __defProp$1 = Object.defineProperty, __getOwnPropSymbols$1 = Object.getOwnPropertySymbols, __hasOwnProp$1 = Object.prototype.hasOwnProperty, __propIsEnum$1 = Object.prototype.propertyIsEnumerable, __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols$1)\n    for (var prop of __getOwnPropSymbols$1(b))\n      __propIsEnum$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return __spreadValues$1(__spreadValues$1({}, DEFAULT_OPTIONS), options);\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc, opts = {}) {\n  if (pattern.length > MAX_BITS$1)\n    throw new Error(\"Pattern too long for this browser.\");\n  const options = applyDefaults(opts), s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length, proximity = Math.abs(loc - x);\n    return options.distance ? accuracy + proximity / options.distance : proximity ? 1 : accuracy;\n  }\n  let scoreThreshold = options.threshold, bestLoc = text.indexOf(pattern, loc);\n  bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold), bestLoc = text.lastIndexOf(pattern, loc + pattern.length), bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold)));\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin, binMid, binMax = pattern.length + text.length, lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    for (binMin = 0, binMid = binMax; binMin < binMid; )\n      getBitapScore(d, loc + binMid) <= scoreThreshold ? binMin = binMid : binMax = binMid, binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length, rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0 ? rd[j] = (rd[j + 1] << 1 | 1) & charMatch : rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1], rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold)\n          if (scoreThreshold = score, bestLoc = j - 1, bestLoc > loc)\n            start = Math.max(1, 2 * loc - bestLoc);\n          else\n            break;\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold)\n      break;\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] = 0;\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  return s;\n}\nfunction match(text, pattern, searchLocation, options = {}) {\n  if (text === null || pattern === null || searchLocation === null)\n    throw new Error(\"Null input. (match())\");\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern)\n    return 0;\n  if (text.length) {\n    if (text.substring(loc, loc + pattern.length) === pattern)\n      return loc;\n  } else return -1;\n  return bitap(text, pattern, loc, options);\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_INSERT && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_DELETE && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction levenshtein(diffs) {\n  let leven = 0, insertions = 0, deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0], data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions), insertions = 0, deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  return leven += Math.max(insertions, deletions), leven;\n}\nfunction xIndex(diffs, location) {\n  let chars1 = 0, chars2 = 0, lastChars1 = 0, lastChars2 = 0, x;\n  for (x = 0; x < diffs.length && (diffs[x][0] !== DIFF_INSERT && (chars1 += diffs[x][1].length), diffs[x][0] !== DIFF_DELETE && (chars2 += diffs[x][1].length), !(chars1 > location)); x++)\n    lastChars1 = chars1, lastChars2 = chars2;\n  return diffs.length !== x && diffs[x][0] === DIFF_DELETE ? lastChars2 : lastChars2 + (location - lastChars1);\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint > \"u\")\n      throw new Error(\"Failed to get codepoint\");\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base, options = {}) {\n  let byteOffset = 0, idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target; ) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint > \"u\")\n        return idx;\n      byteOffset += utf8len(codePoint), codePoint > 65535 ? idx += 2 : idx += 1;\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target)\n      throw new Error(\"Failed to determine byte offset\");\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches)\n    adjusted.push({\n      diffs: patch.diffs.map((diff2) => cloneDiff(diff2)),\n      start1: advanceTo(patch.start1),\n      start2: advanceTo(patch.start2),\n      utf8Start1: patch.utf8Start1,\n      utf8Start2: patch.utf8Start2,\n      length1: patch.length1,\n      length2: patch.length2,\n      utf8Length1: patch.utf8Length1,\n      utf8Length2: patch.utf8Length2\n    });\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  return codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : 4;\n}\nconst MAX_BITS = 32, DEFAULT_MARGIN = 4;\nfunction addPadding(patches, margin = DEFAULT_MARGIN) {\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++)\n    nullPadding += String.fromCharCode(x);\n  for (const p of patches)\n    p.start1 += paddingLength, p.start2 += paddingLength, p.utf8Start1 += paddingLength, p.utf8Start2 += paddingLength;\n  let patch = patches[0], diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL)\n    diffs.unshift([DIFF_EQUAL, nullPadding]), patch.start1 -= paddingLength, patch.start2 -= paddingLength, patch.utf8Start1 -= paddingLength, patch.utf8Start2 -= paddingLength, patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length, extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1], patch.start1 -= extraLength, patch.start2 -= extraLength, patch.utf8Start1 -= extraLength, patch.utf8Start2 -= extraLength, patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  if (patch = patches[patches.length - 1], diffs = patch.diffs, diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL)\n    diffs.push([DIFF_EQUAL, nullPadding]), patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength), patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction splitMax(patches, margin = DEFAULT_MARGIN) {\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize)\n      continue;\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1, start2 = bigpatch.start2, preContext = \"\";\n    for (; bigpatch.diffs.length !== 0; ) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = !0;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length, patch.utf8Length1 = precontextByteCount, patch.length2 = preContext.length, patch.utf8Length2 = precontextByteCount, patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      for (; bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin; ) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1], diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length;\n          const diff2 = bigpatch.diffs.shift();\n          diff2 && patch.diffs.push(diff2), empty = !1;\n        } else diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize ? (patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, empty = !1, patch.diffs.push([diffType, diffText]), bigpatch.diffs.shift()) : (diffText = diffText.substring(0, patchSize - patch.length1 - margin), diffTextByteCount = countUtf8Bytes(diffText), patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, diffType === DIFF_EQUAL ? (patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length) : empty = !1, patch.diffs.push([diffType, diffText]), diffText === bigpatch.diffs[0][1] ? bigpatch.diffs.shift() : bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length));\n      }\n      preContext = diffText2(patch.diffs), preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin), postContextByteCount = countUtf8Bytes(postContext);\n      postContext !== \"\" && (patch.length1 += postContext.length, patch.length2 += postContext.length, patch.utf8Length1 += postContextByteCount, patch.utf8Length2 += postContextByteCount, patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL ? patch.diffs[patch.diffs.length - 1][1] += postContext : patch.diffs.push([DIFF_EQUAL, postContext])), empty || patches.splice(++x, 0, patch);\n    }\n  }\n}\nfunction apply(patches, originalText, opts = {}) {\n  if (typeof patches == \"string\")\n    throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  let text = originalText;\n  if (patches.length === 0)\n    return [text, []];\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  }), margin = opts.margin || DEFAULT_MARGIN, deleteThreshold = opts.deleteThreshold || 0.4, nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding, splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta, text1 = diffText1(parsed[x].diffs);\n    let startLoc, endLoc = -1;\n    if (text1.length > MAX_BITS ? (startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc), startLoc !== -1 && (endLoc = match(\n      text,\n      text1.substring(text1.length - MAX_BITS),\n      expectedLoc + text1.length - MAX_BITS\n    ), (endLoc === -1 || startLoc >= endLoc) && (startLoc = -1))) : startLoc = match(text, text1, expectedLoc), startLoc === -1)\n      results[x] = !1, delta -= parsed[x].length2 - parsed[x].length1;\n    else {\n      results[x] = !0, delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1 ? text2 = text.substring(startLoc, startLoc + text1.length) : text2 = text.substring(startLoc, endLoc + MAX_BITS), text1 === text2)\n        text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      else {\n        let diffs = diff(text1, text2, { checkLines: !1 });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold)\n          results[x] = !1;\n        else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0, index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            mod[0] !== DIFF_EQUAL && (index2 = xIndex(diffs, index1)), mod[0] === DIFF_INSERT ? text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2) : mod[0] === DIFF_DELETE && (text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length))), mod[0] !== DIFF_DELETE && (index1 += mod[1].length);\n          }\n        }\n      }\n    }\n  }\n  return text = text.substring(nullPadding.length, text.length - nullPadding.length), [text, results];\n}\nvar __defProp = Object.defineProperty, __getOwnPropSymbols = Object.getOwnPropertySymbols, __hasOwnProp = Object.prototype.hasOwnProperty, __propIsEnum = Object.prototype.propertyIsEnumerable, __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b))\n      __propIsEnum.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTS = {\n  margin: 4\n};\nfunction getDefaultOpts(opts = {}) {\n  return __spreadValues(__spreadValues({}, DEFAULT_OPTS), opts);\n}\nfunction make(a, b, options) {\n  if (typeof a == \"string\" && typeof b == \"string\") {\n    let diffs = diff(a, b, { checkLines: !0 });\n    return diffs.length > 2 && (diffs = cleanupSemantic(diffs), diffs = cleanupEfficiency(diffs)), _make(a, diffs, getDefaultOpts(options));\n  }\n  if (a && Array.isArray(a) && typeof b > \"u\")\n    return _make(diffText1(a), a, getDefaultOpts(options));\n  if (typeof a == \"string\" && b && Array.isArray(b))\n    return _make(a, b, getDefaultOpts(options));\n  throw new Error(\"Unknown call format to make()\");\n}\nfunction _make(textA, diffs, options) {\n  if (diffs.length === 0)\n    return [];\n  const patches = [];\n  let patch = createPatchObject(0, 0), patchDiffLength = 0, charCount1 = 0, charCount2 = 0, utf8Count1 = 0, utf8Count2 = 0, prepatchText = textA, postpatchText = textA;\n  for (let x = 0; x < diffs.length; x++) {\n    const currentDiff = diffs[x], [diffType, diffText] = currentDiff, diffTextLength = diffText.length, diffByteLength = countUtf8Bytes(diffText);\n    switch (!patchDiffLength && diffType !== DIFF_EQUAL && (patch.start1 = charCount1, patch.start2 = charCount2, patch.utf8Start1 = utf8Count1, patch.utf8Start2 = utf8Count2), diffType) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = currentDiff, patch.length2 += diffTextLength, patch.utf8Length2 += diffByteLength, postpatchText = postpatchText.substring(0, charCount2) + diffText + postpatchText.substring(charCount2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.diffs[patchDiffLength++] = currentDiff, postpatchText = postpatchText.substring(0, charCount2) + postpatchText.substring(charCount2 + diffTextLength);\n        break;\n      case DIFF_EQUAL:\n        diffTextLength <= 2 * options.margin && patchDiffLength && diffs.length !== x + 1 ? (patch.diffs[patchDiffLength++] = currentDiff, patch.length1 += diffTextLength, patch.length2 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.utf8Length2 += diffByteLength) : diffTextLength >= 2 * options.margin && patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch), patch = createPatchObject(-1, -1), patchDiffLength = 0, prepatchText = postpatchText, charCount1 = charCount2, utf8Count1 = utf8Count2);\n        break;\n      default:\n        throw new Error(\"Unknown diff type\");\n    }\n    diffType !== DIFF_INSERT && (charCount1 += diffTextLength, utf8Count1 += diffByteLength), diffType !== DIFF_DELETE && (charCount2 += diffTextLength, utf8Count2 += diffByteLength);\n  }\n  return patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch)), patches;\n}\nfunction addContext(patch, text, opts) {\n  if (text.length === 0)\n    return;\n  let pattern = text.substring(patch.start2, patch.start2 + patch.length1), padding = 0;\n  for (; text.indexOf(pattern) !== text.lastIndexOf(pattern) && pattern.length < MAX_BITS - opts.margin - opts.margin; )\n    padding += opts.margin, pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);\n  padding += opts.margin;\n  let prefixStart = patch.start2 - padding;\n  prefixStart >= 1 && isLowSurrogate(text[prefixStart]) && prefixStart--;\n  const prefix = text.substring(prefixStart, patch.start2);\n  prefix && patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  const prefixLength = prefix.length, prefixUtf8Length = countUtf8Bytes(prefix);\n  let suffixEnd = patch.start2 + patch.length1 + padding;\n  suffixEnd < text.length && isLowSurrogate(text[suffixEnd]) && suffixEnd++;\n  const suffix = text.substring(patch.start2 + patch.length1, suffixEnd);\n  suffix && patch.diffs.push([DIFF_EQUAL, suffix]);\n  const suffixLength = suffix.length, suffixUtf8Length = countUtf8Bytes(suffix);\n  patch.start1 -= prefixLength, patch.start2 -= prefixLength, patch.utf8Start1 -= prefixUtf8Length, patch.utf8Start2 -= prefixUtf8Length, patch.length1 += prefixLength + suffixLength, patch.length2 += prefixLength + suffixLength, patch.utf8Length1 += prefixUtf8Length + suffixUtf8Length, patch.utf8Length2 += prefixUtf8Length + suffixUtf8Length;\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline)\n    return [];\n  const patches = [], lines = textline.split(`\n`);\n  let textPointer = 0;\n  for (; textPointer < lines.length; ) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m)\n      throw new Error(`Invalid patch string: ${lines[textPointer]}`);\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    for (patches.push(patch), m[2] === \"\" ? (patch.start1--, patch.utf8Start1--, patch.length1 = 1, patch.utf8Length1 = 1) : m[2] === \"0\" ? (patch.length1 = 0, patch.utf8Length1 = 0) : (patch.start1--, patch.utf8Start1--, patch.utf8Length1 = toInt(m[2]), patch.length1 = patch.utf8Length1), m[4] === \"\" ? (patch.start2--, patch.utf8Start2--, patch.length2 = 1, patch.utf8Length2 = 1) : m[4] === \"0\" ? (patch.length2 = 0, patch.utf8Length2 = 0) : (patch.start2--, patch.utf8Start2--, patch.utf8Length2 = toInt(m[4]), patch.length2 = patch.utf8Length2), textPointer++; textPointer < lines.length; ) {\n      const currentLine = lines[textPointer], sign = currentLine.charAt(0);\n      if (sign === \"@\")\n        break;\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch (ex) {\n        throw new Error(`Illegal escape in parse: ${currentLine}`);\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\")\n        patch.diffs.push([DIFF_DELETE, line]), patch.length1 -= utf8Diff;\n      else if (sign === \"+\")\n        patch.diffs.push([DIFF_INSERT, line]), patch.length2 -= utf8Diff;\n      else if (sign === \" \")\n        patch.diffs.push([DIFF_EQUAL, line]), patch.length1 -= utf8Diff, patch.length2 -= utf8Diff;\n      else\n        throw new Error(`Invalid patch mode \"${sign}\" in: ${line}`);\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nfunction stringify(patches) {\n  return patches.map(stringifyPatch).join(\"\");\n}\nfunction stringifyPatch(patch) {\n  const { utf8Length1, utf8Length2, utf8Start1, utf8Start2, diffs } = patch;\n  let coords1;\n  utf8Length1 === 0 ? coords1 = `${utf8Start1},0` : utf8Length1 === 1 ? coords1 = `${utf8Start1 + 1}` : coords1 = `${utf8Start1 + 1},${utf8Length1}`;\n  let coords2;\n  utf8Length2 === 0 ? coords2 = `${utf8Start2},0` : utf8Length2 === 1 ? coords2 = `${utf8Start2 + 1}` : coords2 = `${utf8Start2 + 1},${utf8Length2}`;\n  const text = [`@@ -${coords1} +${coords2} @@\n`];\n  let op;\n  for (let x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        op = \"+\";\n        break;\n      case DIFF_DELETE:\n        op = \"-\";\n        break;\n      case DIFF_EQUAL:\n        op = \" \";\n        break;\n      default:\n        throw new Error(\"Unknown patch operation.\");\n    }\n    text[x + 1] = `${op + encodeURI(diffs[x][1])}\n`;\n  }\n  return text.join(\"\").replace(/%20/g, \" \");\n}\nexport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  adjustIndiciesToUcs2,\n  apply as applyPatches,\n  cleanupEfficiency,\n  cleanupSemantic,\n  diff as makeDiff,\n  make as makePatches,\n  match,\n  parse as parsePatch,\n  stringifyPatch,\n  stringify as stringifyPatches,\n  xIndex\n};\n//# sourceMappingURL=index.js.map\n","import type {Editor} from 'slate'\nimport {defaultKeyGenerator} from './key-generator'\n\nconst CURRENT_UNDO_STEP: WeakMap<Editor, {undoStepId: string} | undefined> =\n  new WeakMap()\n\nexport function withUndoStep(editor: Editor, fn: () => void) {\n  const current = CURRENT_UNDO_STEP.get(editor)\n\n  if (current) {\n    fn()\n    return\n  }\n\n  CURRENT_UNDO_STEP.set(\n    editor,\n    current ?? {\n      undoStepId: defaultKeyGenerator(),\n    },\n  )\n  fn()\n  CURRENT_UNDO_STEP.set(editor, undefined)\n}\n\nexport function getCurrentUndoStepId(editor: Editor) {\n  return CURRENT_UNDO_STEP.get(editor)?.undoStepId\n}\n","/**\n * This plugin will make the editor support undo/redo on the local state only.\n * The undo/redo steps are rebased against incoming patches since the step occurred.\n */\n\nimport type {Patch} from '@portabletext/patches'\nimport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {flatten, isEqual} from 'lodash'\nimport {\n  Editor,\n  Operation,\n  Path,\n  Transforms,\n  type Descendant,\n  type SelectionOperation,\n} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {fromSlateValue} from '../../internal-utils/values'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {\n  isRedoing,\n  isUndoing,\n  setIsRedoing,\n  setIsUndoing,\n  withRedoing,\n  withUndoing,\n} from '../../internal-utils/withUndoRedo'\nimport type {BehaviorOperationImplementation} from '../../operations/behavior.operations'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getCurrentUndoStepId} from '../with-undo-step'\n\nconst debug = debugWithName('plugin:withUndoRedo')\nconst debugVerbose = debug.enabled && false\n\nconst SAVING = new WeakMap<Editor, boolean | undefined>()\nconst REMOTE_PATCHES = new WeakMap<\n  Editor,\n  {\n    patch: Patch\n    time: Date\n    snapshot: PortableTextBlock[] | undefined\n    previousSnapshot: PortableTextBlock[] | undefined\n  }[]\n>()\nconst UNDO_STEP_LIMIT = 1000\n\nconst isSaving = (editor: Editor): boolean | undefined => {\n  const state = SAVING.get(editor)\n  return state === undefined ? true : state\n}\n\nexport interface Options {\n  editorActor: EditorActor\n  subscriptions: Array<() => () => void>\n}\n\nconst getRemotePatches = (editor: Editor) => {\n  if (!REMOTE_PATCHES.get(editor)) {\n    REMOTE_PATCHES.set(editor, [])\n  }\n  return REMOTE_PATCHES.get(editor) || []\n}\n\nexport function createWithUndoRedo(\n  options: Options,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const {editorActor} = options\n\n  return (editor: PortableTextSlateEditor) => {\n    let previousSnapshot: PortableTextBlock[] | undefined = fromSlateValue(\n      editor.children,\n      editorActor.getSnapshot().context.schema.block.name,\n    )\n    const remotePatches = getRemotePatches(editor)\n    let previousUndoStepId = getCurrentUndoStepId(editor)\n\n    options.subscriptions.push(() => {\n      debug('Subscribing to patches')\n      const sub = editorActor.on('patches', ({patches, snapshot}) => {\n        let reset = false\n        patches.forEach((patch) => {\n          if (!reset && patch.origin !== 'local' && remotePatches) {\n            if (patch.type === 'unset' && patch.path.length === 0) {\n              debug(\n                'Someone else cleared the content, resetting undo/redo history',\n              )\n              editor.history = {undos: [], redos: []}\n              remotePatches.splice(0, remotePatches.length)\n              SAVING.set(editor, true)\n              reset = true\n              return\n            }\n            remotePatches.push({\n              patch,\n              time: new Date(),\n              snapshot,\n              previousSnapshot,\n            })\n          }\n        })\n        previousSnapshot = snapshot\n      })\n      return () => {\n        debug('Unsubscribing to patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.history = {undos: [], redos: []}\n\n    const {apply} = editor\n\n    editor.apply = (op: Operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      const {operations, history} = editor\n      const {undos} = history\n      const step = undos[undos.length - 1]\n      const lastOp =\n        step && step.operations && step.operations[step.operations.length - 1]\n      const overwrite = shouldOverwrite(op, lastOp)\n      const save = isSaving(editor)\n\n      const currentUndoStepId = getCurrentUndoStepId(editor)\n\n      let merge =\n        currentUndoStepId !== undefined && previousUndoStepId === undefined\n          ? false\n          : currentUndoStepId !== undefined && previousUndoStepId !== undefined\n            ? currentUndoStepId === previousUndoStepId\n            : true\n\n      if (save) {\n        if (!step) {\n          merge = false\n        } else if (operations.length === 0) {\n          merge =\n            currentUndoStepId === undefined && previousUndoStepId === undefined\n              ? shouldMerge(op, lastOp) || overwrite\n              : merge\n        }\n\n        if (step && merge) {\n          step.operations.push(op)\n        } else {\n          const newStep = {\n            operations: [\n              ...(editor.selection === null\n                ? []\n                : [createSelectOperation(editor)]),\n              op,\n            ],\n            timestamp: new Date(),\n          }\n          undos.push(newStep)\n          debug('Created new undo step', step)\n        }\n\n        while (undos.length > UNDO_STEP_LIMIT) {\n          undos.shift()\n        }\n\n        if (shouldClear(op)) {\n          history.redos = []\n        }\n      }\n\n      previousUndoStepId = currentUndoStepId\n\n      apply(op)\n    }\n\n    // Plugin return\n    return editor\n  }\n}\n\nexport const historyUndoOperationImplementation: BehaviorOperationImplementation<\n  'history.undo'\n> = ({operation}) => {\n  const editor = operation.editor\n  const {undos} = editor.history\n  const remotePatches = getRemotePatches(editor)\n\n  if (undos.length > 0) {\n    const step = undos[undos.length - 1]\n    debug('Undoing', step)\n    if (step.operations.length > 0) {\n      const otherPatches = remotePatches.filter(\n        (item) => item.time >= step.timestamp,\n      )\n      let transformedOperations = step.operations\n      otherPatches.forEach((item) => {\n        transformedOperations = flatten(\n          transformedOperations.map((op) =>\n            transformOperation(\n              editor,\n              item.patch,\n              op,\n              item.snapshot,\n              item.previousSnapshot,\n            ),\n          ),\n        )\n      })\n      const reversedOperations = transformedOperations\n        .map(Operation.inverse)\n        .reverse()\n\n      try {\n        Editor.withoutNormalizing(editor, () => {\n          withUndoing(editor, () => {\n            withoutSaving(editor, () => {\n              reversedOperations.forEach((op) => {\n                editor.apply(op)\n              })\n            })\n          })\n        })\n      } catch (err) {\n        debug('Could not perform undo step', err)\n        remotePatches.splice(0, remotePatches.length)\n        Transforms.deselect(editor)\n        editor.history = {undos: [], redos: []}\n        SAVING.set(editor, true)\n        setIsUndoing(editor, false)\n        editor.onChange()\n        return\n      }\n      editor.history.redos.push(step)\n      editor.history.undos.pop()\n    }\n  }\n}\n\nexport const historyRedoOperationImplementation: BehaviorOperationImplementation<\n  'history.redo'\n> = ({operation}) => {\n  const editor = operation.editor\n  const {redos} = editor.history\n  const remotePatches = getRemotePatches(editor)\n\n  if (redos.length > 0) {\n    const step = redos[redos.length - 1]\n    debug('Redoing', step)\n    if (step.operations.length > 0) {\n      const otherPatches = remotePatches.filter(\n        (item) => item.time >= step.timestamp,\n      )\n      let transformedOperations = step.operations\n      otherPatches.forEach((item) => {\n        transformedOperations = flatten(\n          transformedOperations.map((op) =>\n            transformOperation(\n              editor,\n              item.patch,\n              op,\n              item.snapshot,\n              item.previousSnapshot,\n            ),\n          ),\n        )\n      })\n      try {\n        Editor.withoutNormalizing(editor, () => {\n          withRedoing(editor, () => {\n            withoutSaving(editor, () => {\n              transformedOperations.forEach((op) => {\n                editor.apply(op)\n              })\n            })\n          })\n        })\n      } catch (err) {\n        debug('Could not perform redo step', err)\n        remotePatches.splice(0, remotePatches.length)\n        Transforms.deselect(editor)\n        editor.history = {undos: [], redos: []}\n        SAVING.set(editor, true)\n        setIsRedoing(editor, false)\n        editor.onChange()\n        return\n      }\n      editor.history.undos.push(step)\n      editor.history.redos.pop()\n    }\n  }\n}\n\n/**\n * This will adjust the operation paths and offsets according to the\n * remote patches by other editors since the step operations was performed.\n */\nfunction transformOperation(\n  editor: PortableTextSlateEditor,\n  patch: Patch,\n  operation: Operation,\n  snapshot: PortableTextBlock[] | undefined,\n  previousSnapshot: PortableTextBlock[] | undefined,\n): Operation[] {\n  if (debugVerbose) {\n    debug(\n      `Adjusting '${operation.type}' operation paths for '${patch.type}' patch`,\n    )\n    debug(`Operation ${JSON.stringify(operation)}`)\n    debug(`Patch ${JSON.stringify(patch)}`)\n  }\n\n  const transformedOperation = {...operation}\n\n  if (patch.type === 'insert' && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    debug(\n      `Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n    )\n    return [\n      adjustBlockPath(\n        transformedOperation,\n        patch.items.length,\n        insertBlockIndex,\n      ),\n    ]\n  }\n\n  if (patch.type === 'unset' && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    // If this operation is targeting the same block that got removed, return empty\n    if (\n      'path' in transformedOperation &&\n      Array.isArray(transformedOperation.path) &&\n      transformedOperation.path[0] === unsetBlockIndex\n    ) {\n      debug('Skipping transformation that targeted removed block')\n      return []\n    }\n    if (debugVerbose) {\n      debug(`Selection ${JSON.stringify(editor.selection)}`)\n      debug(\n        `Adjusting block path (-1) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n      )\n    }\n    return [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)]\n  }\n\n  // Someone reset the whole value\n  if (patch.type === 'unset' && patch.path.length === 0) {\n    debug(\n      `Adjusting selection for unset everything patch and ${operation.type} operation`,\n    )\n    return []\n  }\n\n  if (patch.type === 'diffMatchPatch') {\n    const operationTargetBlock = findOperationTargetBlock(\n      editor,\n      transformedOperation,\n    )\n    if (\n      !operationTargetBlock ||\n      !isEqual({_key: operationTargetBlock._key}, patch.path[0])\n    ) {\n      return [transformedOperation]\n    }\n    const diffPatches = parsePatch(patch.value)\n    diffPatches.forEach((diffPatch) => {\n      let adjustOffsetBy = 0\n      let changedOffset = diffPatch.utf8Start1\n      const {diffs} = diffPatch\n      diffs.forEach((diff, index) => {\n        const [diffType, text] = diff\n        if (diffType === DIFF_INSERT) {\n          adjustOffsetBy += text.length\n          changedOffset += text.length\n        } else if (diffType === DIFF_DELETE) {\n          adjustOffsetBy -= text.length\n          changedOffset -= text.length\n        } else if (diffType === DIFF_EQUAL) {\n          // Only up to the point where there are no other changes\n          if (!diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL)) {\n            changedOffset += text.length\n          }\n        }\n      })\n      // Adjust accordingly if someone inserted text in the same node before us\n      if (transformedOperation.type === 'insert_text') {\n        if (changedOffset < transformedOperation.offset) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust accordingly if someone removed text in the same node before us\n      if (transformedOperation.type === 'remove_text') {\n        if (\n          changedOffset <=\n          transformedOperation.offset - transformedOperation.text.length\n        ) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust set_selection operation's points to new offset\n      if (transformedOperation.type === 'set_selection') {\n        const currentFocus = transformedOperation.properties?.focus\n          ? {...transformedOperation.properties.focus}\n          : undefined\n        const currentAnchor = transformedOperation?.properties?.anchor\n          ? {...transformedOperation.properties.anchor}\n          : undefined\n        const newFocus = transformedOperation?.newProperties?.focus\n          ? {...transformedOperation.newProperties.focus}\n          : undefined\n        const newAnchor = transformedOperation?.newProperties?.anchor\n          ? {...transformedOperation.newProperties.anchor}\n          : undefined\n        if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n          const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n          points.forEach((point) => {\n            if (point && changedOffset < point.offset) {\n              point.offset += adjustOffsetBy\n            }\n          })\n          if (currentFocus && currentAnchor) {\n            transformedOperation.properties = {\n              focus: currentFocus,\n              anchor: currentAnchor,\n            }\n          }\n          if (newFocus && newAnchor) {\n            transformedOperation.newProperties = {\n              focus: newFocus,\n              anchor: newAnchor,\n            }\n          }\n        }\n      }\n    })\n    return [transformedOperation]\n  }\n  return [transformedOperation]\n}\n/**\n * Adjust the block path for a operation\n */\nfunction adjustBlockPath(\n  operation: Operation,\n  level: number,\n  blockIndex: number,\n): Operation {\n  const transformedOperation = {...operation}\n  if (\n    blockIndex >= 0 &&\n    transformedOperation.type !== 'set_selection' &&\n    Array.isArray(transformedOperation.path) &&\n    transformedOperation.path[0] >= blockIndex + level &&\n    transformedOperation.path[0] + level > -1\n  ) {\n    const newPath = [\n      transformedOperation.path[0] + level,\n      ...transformedOperation.path.slice(1),\n    ]\n    transformedOperation.path = newPath\n  }\n  if (transformedOperation.type === 'set_selection') {\n    const currentFocus = transformedOperation.properties?.focus\n      ? {...transformedOperation.properties.focus}\n      : undefined\n    const currentAnchor = transformedOperation?.properties?.anchor\n      ? {...transformedOperation.properties.anchor}\n      : undefined\n    const newFocus = transformedOperation?.newProperties?.focus\n      ? {...transformedOperation.newProperties.focus}\n      : undefined\n    const newAnchor = transformedOperation?.newProperties?.anchor\n      ? {...transformedOperation.newProperties.anchor}\n      : undefined\n    if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n      const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n      points.forEach((point) => {\n        if (\n          point &&\n          point.path[0] >= blockIndex + level &&\n          point.path[0] + level > -1\n        ) {\n          point.path = [point.path[0] + level, ...point.path.slice(1)]\n        }\n      })\n      if (currentFocus && currentAnchor) {\n        transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor,\n        }\n      }\n      if (newFocus && newAnchor) {\n        transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor,\n        }\n      }\n    }\n  }\n  //   // Assign fresh point objects (we don't want to mutate the original ones)\n  return transformedOperation\n}\n\n// Helper functions for editor.apply above\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  // Text input\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path) &&\n    op.text !== ' ' // Tokenize between words\n  ) {\n    return true\n  }\n\n  // Text deletion\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  // Don't merge\n  return false\n}\n\nconst shouldOverwrite = (\n  op: Operation,\n  prev: Operation | undefined,\n): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n\nexport function withoutSaving(editor: Editor, fn: () => void): void {\n  const prev = isSaving(editor)\n  SAVING.set(editor, false)\n  fn()\n  SAVING.set(editor, prev)\n}\n\nfunction createSelectOperation(editor: Editor): SelectionOperation {\n  return {\n    type: 'set_selection',\n    properties: {...editor.selection},\n    newProperties: {...editor.selection},\n  }\n}\n\nfunction findOperationTargetBlock(\n  editor: PortableTextSlateEditor,\n  operation: Operation,\n): Descendant | undefined {\n  let block: Descendant | undefined\n  if (operation.type === 'set_selection' && editor.selection) {\n    block = editor.children[editor.selection.focus.path[0]]\n  } else if ('path' in operation) {\n    block = editor.children[operation.path[0]]\n  }\n  return block\n}\n","import type {Path} from '@sanity/types'\nimport {Editor, Node, Range, Text, Transforms} from 'slate'\nimport {parseAnnotation} from '../internal-utils/parse-blocks'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\n/**\n * @public\n */\nexport type AddedAnnotationPaths = {\n  /**\n   * @deprecated An annotation may be applied to multiple blocks, resulting\n   * in multiple `markDef`'s being created. Use `markDefPaths` instead.\n   */\n  markDefPath: Path\n  markDefPaths: Array<Path>\n  /**\n   * @deprecated Does not return anything meaningful since an annotation\n   * can span multiple blocks and spans. If references the span closest\n   * to the focus point of the selection.\n   */\n  spanPath: Path\n}\n\nexport const addAnnotationOperationImplementation: BehaviorOperationImplementation<\n  'annotation.add',\n  AddedAnnotationPaths | undefined\n> = ({context, operation}) => {\n  const parsedAnnotation = parseAnnotation({\n    annotation: {\n      _type: operation.annotation.name,\n      ...operation.annotation.value,\n    },\n    context,\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!parsedAnnotation) {\n    throw new Error(\n      `Failed to parse annotation ${JSON.stringify(operation.annotation)}`,\n    )\n  }\n\n  const editor = operation.editor\n\n  if (!editor.selection || Range.isCollapsed(editor.selection)) {\n    return\n  }\n\n  let paths: AddedAnnotationPaths | undefined = undefined\n  let spanPath: Path | undefined\n  let markDefPath: Path | undefined\n  const markDefPaths: Path[] = []\n\n  const selectedBlocks = Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node),\n    reverse: Range.isBackward(editor.selection),\n  })\n\n  let blockIndex = 0\n\n  for (const [block, blockPath] of selectedBlocks) {\n    if (block.children.length === 0) {\n      continue\n    }\n\n    if (block.children.length === 1 && block.children[0].text === '') {\n      continue\n    }\n\n    // Make sure we don't generate more keys than needed\n    const annotationKey =\n      blockIndex === 0 ? parsedAnnotation._key : context.keyGenerator()\n    const markDefs = block.markDefs ?? []\n    const existingMarkDef = markDefs.find(\n      (markDef) =>\n        markDef._type === parsedAnnotation._type &&\n        markDef._key === annotationKey,\n    )\n\n    if (existingMarkDef === undefined) {\n      Transforms.setNodes(\n        editor,\n        {\n          markDefs: [\n            ...markDefs,\n            {\n              ...parsedAnnotation,\n              _key: annotationKey,\n            },\n          ],\n        },\n        {at: blockPath},\n      )\n\n      markDefPath = [{_key: block._key}, 'markDefs', {_key: annotationKey}]\n\n      if (Range.isBackward(editor.selection)) {\n        markDefPaths.unshift(markDefPath)\n      } else {\n        markDefPaths.push(markDefPath)\n      }\n    }\n\n    Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n\n    const children = Node.children(editor, blockPath)\n\n    for (const [span, path] of children) {\n      if (!editor.isTextSpan(span)) {\n        continue\n      }\n\n      if (!Range.includes(editor.selection, path)) {\n        continue\n      }\n\n      const marks = span.marks ?? []\n      const existingSameTypeAnnotations = marks.filter((mark) =>\n        markDefs.some(\n          (markDef) =>\n            markDef._key === mark && markDef._type === parsedAnnotation._type,\n        ),\n      )\n\n      Transforms.setNodes(\n        editor,\n        {\n          marks: [\n            ...marks.filter(\n              (mark) => !existingSameTypeAnnotations.includes(mark),\n            ),\n            annotationKey,\n          ],\n        },\n        {at: path},\n      )\n\n      spanPath = [{_key: block._key}, 'children', {_key: span._key}]\n    }\n\n    blockIndex++\n  }\n\n  if (markDefPath && spanPath) {\n    paths = {\n      markDefPath,\n      markDefPaths,\n      spanPath,\n    }\n  }\n\n  return paths\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Editor, Node, Path, Range, Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const removeAnnotationOperationImplementation: BehaviorOperationImplementation<\n  'annotation.remove'\n> = ({operation}) => {\n  const editor = operation.editor\n\n  if (!editor.selection) {\n    return\n  }\n\n  if (Range.isCollapsed(editor.selection)) {\n    const [block, blockPath] = Editor.node(editor, editor.selection, {\n      depth: 1,\n    })\n\n    if (!editor.isTextBlock(block)) {\n      return\n    }\n\n    const markDefs = block.markDefs ?? []\n    const potentialAnnotations = markDefs.filter(\n      (markDef) => markDef._type === operation.annotation.name,\n    )\n\n    const [selectedChild, selectedChildPath] = Editor.node(\n      editor,\n      editor.selection,\n      {\n        depth: 2,\n      },\n    )\n\n    if (!editor.isTextSpan(selectedChild)) {\n      return\n    }\n\n    const annotationToRemove = selectedChild.marks?.find((mark) =>\n      potentialAnnotations.some((markDef) => markDef._key === mark),\n    )\n\n    if (!annotationToRemove) {\n      return\n    }\n\n    const previousSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: Path]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath, {\n      reverse: true,\n    })) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!Path.isBefore(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        previousSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    const nextSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: Path]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath)) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!Path.isAfter(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        nextSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    for (const [child, childPath] of [\n      ...previousSpansWithSameAnnotation,\n      [selectedChild, selectedChildPath] as const,\n      ...nextSpansWithSameAnnotation,\n    ]) {\n      Transforms.setNodes(\n        editor,\n        {\n          marks: child.marks?.filter((mark) => mark !== annotationToRemove),\n        },\n        {at: childPath},\n      )\n    }\n  } else {\n    Transforms.setNodes(\n      editor,\n      {},\n      {\n        match: (node) => editor.isTextSpan(node),\n        split: true,\n        hanging: true,\n      },\n    )\n\n    const blocks = Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    })\n\n    for (const [block, blockPath] of blocks) {\n      const children = Node.children(editor, blockPath)\n\n      for (const [child, childPath] of children) {\n        if (!editor.isTextSpan(child)) {\n          continue\n        }\n\n        if (!Range.includes(editor.selection, childPath)) {\n          continue\n        }\n\n        const markDefs = block.markDefs ?? []\n        const marks = child.marks ?? []\n        const marksWithoutAnnotation = marks.filter((mark) => {\n          const markDef = markDefs.find((markDef) => markDef._key === mark)\n          return markDef?._type !== operation.annotation.name\n        })\n\n        if (marksWithoutAnnotation.length !== marks.length) {\n          Transforms.setNodes(\n            editor,\n            {\n              marks: marksWithoutAnnotation,\n            },\n            {at: childPath},\n          )\n        }\n      }\n    }\n  }\n}\n","import {Editor, Transforms, type Element as SlateElement} from 'slate'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {fromSlateValue, toSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const blockSetOperationImplementation: BehaviorOperationImplementation<\n  'block.set'\n> = ({context, operation}) => {\n  const location = toSlateRange(\n    {\n      anchor: {path: operation.at, offset: 0},\n      focus: {path: operation.at, offset: 0},\n    },\n    operation.editor,\n  )\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`,\n    )\n  }\n\n  const blockEntry = Editor.node(operation.editor, location, {depth: 1})\n  const block = blockEntry?.[0]\n\n  if (!block) {\n    throw new Error(`Unable to find block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const parsedBlock = fromSlateValue(\n    [block],\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(operation.editor),\n  ).at(0)\n\n  if (!parsedBlock) {\n    throw new Error(`Unable to parse block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const {_type, ...filteredProps} = operation.props\n\n  const updatedBlock = parseBlock({\n    context,\n    block: {\n      ...parsedBlock,\n      ...filteredProps,\n    },\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!updatedBlock) {\n    throw new Error(`Unable to update block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const slateBlock = toSlateValue([updatedBlock], {\n    schemaTypes: context.schema,\n  })?.at(0) as SlateElement | undefined\n\n  if (!slateBlock) {\n    throw new Error(`Unable to convert block to Slate value`)\n  }\n\n  Transforms.setNodes(operation.editor, slateBlock, {at: location})\n}\n","import {omit} from 'lodash'\nimport {Editor, Transforms} from 'slate'\nimport {isTextBlock, parseBlock} from '../internal-utils/parse-blocks'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const blockUnsetOperationImplementation: BehaviorOperationImplementation<\n  'block.unset'\n> = ({context, operation}) => {\n  const location = toSlateRange(\n    {\n      anchor: {path: operation.at, offset: 0},\n      focus: {path: operation.at, offset: 0},\n    },\n    operation.editor,\n  )\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`,\n    )\n  }\n\n  const blockEntry = Editor.node(operation.editor, location, {depth: 1})\n  const block = blockEntry?.[0]\n\n  if (!block) {\n    throw new Error(`Unable to find block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const parsedBlock = fromSlateValue(\n    [block],\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(operation.editor),\n  ).at(0)\n\n  if (!parsedBlock) {\n    throw new Error(`Unable to parse block at ${JSON.stringify(operation.at)}`)\n  }\n\n  if (isTextBlock(context, parsedBlock)) {\n    const propsToRemove = operation.props.filter((prop) => prop !== '_type')\n\n    const updatedTextBlock = parseBlock({\n      context,\n      block: omit(parsedBlock, propsToRemove),\n      options: {refreshKeys: false, validateFields: true},\n    })\n\n    if (!updatedTextBlock) {\n      throw new Error(\n        `Unable to update block at ${JSON.stringify(operation.at)}`,\n      )\n    }\n\n    const propsToSet: Record<string, unknown> = {}\n\n    for (const prop of propsToRemove) {\n      if (!(prop in updatedTextBlock)) {\n        propsToSet[prop] = undefined\n      } else {\n        propsToSet[prop] = (updatedTextBlock as Record<string, unknown>)[prop]\n      }\n    }\n\n    Transforms.setNodes(operation.editor, propsToSet, {at: location})\n\n    return\n  }\n\n  const updatedBlockObject = parseBlock({\n    context,\n    block: omit(\n      parsedBlock,\n      operation.props.filter((prop) => prop !== '_type'),\n    ),\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!updatedBlockObject) {\n    throw new Error(`Unable to update block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const {_type, _key, ...props} = updatedBlockObject\n\n  Transforms.setNodes(\n    operation.editor,\n    {\n      _type,\n      _key,\n      value: props,\n    },\n    {at: location},\n  )\n}\n","import {Editor, Range, Text, Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const decoratorAddOperationImplementation: BehaviorOperationImplementation<\n  'decorator.add'\n> = ({context, operation}) => {\n  const editor = operation.editor\n  const mark = operation.decorator\n  const value = fromSlateValue(\n    editor.children,\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor),\n  )\n\n  const manualAnchor = operation.at?.anchor\n    ? utils.blockOffsetToSpanSelectionPoint({\n        context: {\n          ...context,\n          value,\n        },\n        blockOffset: operation.at.anchor,\n        direction: 'backward',\n      })\n    : undefined\n  const manualFocus = operation.at?.focus\n    ? utils.blockOffsetToSpanSelectionPoint({\n        context: {\n          ...context,\n          value,\n        },\n        blockOffset: operation.at.focus,\n        direction: 'forward',\n      })\n    : undefined\n  const manualSelection =\n    manualAnchor && manualFocus\n      ? {\n          anchor: manualAnchor,\n          focus: manualFocus,\n        }\n      : undefined\n\n  const selection = manualSelection\n    ? (toSlateRange(manualSelection, operation.editor) ?? editor.selection)\n    : editor.selection\n\n  if (!selection) {\n    return\n  }\n\n  const editorSelection = slateRangeToSelection({\n    schema: context.schema,\n    editor,\n    range: selection,\n  })\n  const anchorOffset = editorSelection\n    ? utils.selectionPointToBlockOffset({\n        context: {\n          ...context,\n          value,\n        },\n        selectionPoint: editorSelection.anchor,\n      })\n    : undefined\n  const focusOffset = editorSelection\n    ? utils.selectionPointToBlockOffset({\n        context: {\n          ...context,\n          value,\n        },\n        selectionPoint: editorSelection.focus,\n      })\n    : undefined\n\n  if (!anchorOffset || !focusOffset) {\n    throw new Error('Unable to find anchor or focus offset')\n  }\n\n  if (Range.isExpanded(selection)) {\n    // Split if needed\n    Transforms.setNodes(\n      editor,\n      {},\n      {at: selection, match: Text.isText, split: true, hanging: true},\n    )\n\n    // The value might have changed after splitting\n    const newValue = fromSlateValue(\n      editor.children,\n      context.schema.block.name,\n      KEY_TO_VALUE_ELEMENT.get(editor),\n    )\n    // We need to find the new selection from the original offsets because the\n    // split operation might have changed the value.\n    const newSelection = utils.blockOffsetsToSelection({\n      context: {\n        ...context,\n        value: newValue,\n      },\n      offsets: {anchor: anchorOffset, focus: focusOffset},\n      backward: editorSelection?.backward,\n    })\n\n    const trimmedSelection = selectors.getTrimmedSelection({\n      beta: {hasTag: () => false, internalDrag: undefined},\n      context: {\n        activeDecorators: [],\n        converters: [],\n        keyGenerator: context.keyGenerator,\n        readOnly: false,\n        schema: context.schema,\n        selection: newSelection,\n        value: newValue,\n      },\n    })\n\n    if (!trimmedSelection) {\n      throw new Error('Unable to find trimmed selection')\n    }\n\n    const newRange = toSlateRange(trimmedSelection, editor)\n\n    if (!newRange) {\n      throw new Error('Unable to find new selection')\n    }\n\n    // Use new selection to find nodes to decorate\n    const splitTextNodes = Range.isRange(newRange)\n      ? [\n          ...Editor.nodes(editor, {\n            at: newRange,\n            match: (node) => Text.isText(node),\n          }),\n        ]\n      : []\n\n    for (const [node, path] of splitTextNodes) {\n      const marks = [\n        ...(Array.isArray(node.marks) ? node.marks : []).filter(\n          (eMark: string) => eMark !== mark,\n        ),\n        mark,\n      ]\n      Transforms.setNodes(\n        editor,\n        {marks},\n        {at: path, match: Text.isText, split: true, hanging: true},\n      )\n    }\n  } else {\n    const selectedSpan = Array.from(\n      Editor.nodes(editor, {\n        at: selection,\n        match: (node) => editor.isTextSpan(node),\n      }),\n    )?.at(0)\n\n    if (!selectedSpan) {\n      return\n    }\n\n    const [block, blockPath] = Editor.node(editor, selection, {\n      depth: 1,\n    })\n    const lonelyEmptySpan =\n      editor.isTextBlock(block) &&\n      block.children.length === 1 &&\n      editor.isTextSpan(block.children[0]) &&\n      block.children[0].text === ''\n        ? block.children[0]\n        : undefined\n\n    if (lonelyEmptySpan) {\n      const existingMarks = lonelyEmptySpan.marks ?? []\n      const existingMarksWithoutDecorator = existingMarks.filter(\n        (existingMark) => existingMark !== mark,\n      )\n\n      Transforms.setNodes(\n        editor,\n        {\n          marks:\n            existingMarks.length === existingMarksWithoutDecorator.length\n              ? [...existingMarks, mark]\n              : existingMarksWithoutDecorator,\n        },\n        {\n          at: blockPath,\n          match: (node) => editor.isTextSpan(node),\n        },\n      )\n    } else {\n      const existingMarks: string[] =\n        {\n          ...(Editor.marks(editor) || {}),\n        }.marks || []\n      const marks = {\n        ...(Editor.marks(editor) || {}),\n        marks: [...existingMarks, mark],\n      }\n      editor.marks = marks as Text\n    }\n  }\n\n  if (editor.selection) {\n    // Reselect\n    const selection = editor.selection\n    editor.selection = {...selection}\n  }\n}\n","import {Range} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {getFocusBlock, getFocusChild} from '../internal-utils/slate-utils'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const deleteOperationImplementation: BehaviorOperationImplementation<\n  'delete'\n> = ({context, operation}) => {\n  const range = toSlateRange(operation.at, operation.editor)\n\n  if (!range) {\n    throw new Error(\n      `Failed to get Slate Range for selection ${JSON.stringify(operation.at)}`,\n    )\n  }\n\n  if (Range.isCollapsed(range)) {\n    const [focusBlock] = getFocusBlock({\n      editor: {...operation.editor, selection: range},\n    })\n    const [focusChild] = getFocusChild({\n      editor: {...operation.editor, selection: range},\n    })\n\n    if (\n      focusBlock &&\n      focusBlock._type === context.schema.block.name &&\n      focusChild &&\n      focusChild._type === context.schema.span.name\n    ) {\n      return\n    }\n  }\n\n  operation.editor.delete({at: range})\n}\n","import {deleteBackward} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const deleteBackwardOperationImplementation: BehaviorOperationImplementation<\n  'delete.backward'\n> = ({operation}) => {\n  deleteBackward(operation.editor, operation.unit)\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const deleteBlockOperationImplementation: BehaviorOperationImplementation<\n  'delete.block'\n> = ({operation}) => {\n  const range = toSlateRange(\n    {\n      anchor: {path: operation.at, offset: 0},\n      focus: {path: operation.at, offset: 0},\n    },\n    operation.editor,\n  )\n\n  if (!range) {\n    console.error('Unable to find Slate range from selection points')\n    return\n  }\n\n  Transforms.removeNodes(operation.editor, {\n    at: range,\n  })\n}\n","import {deleteForward} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const deleteForwardOperationImplementation: BehaviorOperationImplementation<\n  'delete.forward'\n> = ({operation}) => {\n  deleteForward(operation.editor, operation.unit)\n}\n","import {Editor, Transforms, type Element} from 'slate'\nimport {parseInlineObject} from '../internal-utils/parse-blocks'\nimport {toSlateValue} from '../internal-utils/values'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertInlineObjectOperationImplementation: BehaviorOperationImplementation<\n  'insert.inline object'\n> = ({context, operation}) => {\n  const parsedInlineObject = parseInlineObject({\n    context,\n    inlineObject: {\n      _type: operation.inlineObject.name,\n      ...(operation.inlineObject.value ?? {}),\n    },\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!parsedInlineObject) {\n    throw new Error(\n      `Failed to parse inline object ${JSON.stringify(operation.inlineObject)}`,\n    )\n  }\n\n  if (!operation.editor.selection) {\n    console.error('Unable to insert inline object without selection')\n    return\n  }\n\n  const [focusTextBlock] = Array.from(\n    Editor.nodes(operation.editor, {\n      at: operation.editor.selection.focus.path,\n      match: (node) => operation.editor.isTextBlock(node),\n    }),\n  ).at(0) ?? [undefined, undefined]\n\n  if (!focusTextBlock) {\n    console.error('Unable to perform action without focus text block')\n    return\n  }\n\n  const block = toSlateValue(\n    [\n      {\n        _type: context.schema.block.name,\n        _key: context.keyGenerator(),\n        children: [parsedInlineObject],\n      },\n    ],\n    {schemaTypes: context.schema},\n  ).at(0) as unknown as Element\n  const child = block?.children.at(0)\n\n  if (!child) {\n    console.error('Unable to insert inline object')\n    return\n  }\n\n  Transforms.insertNodes(operation.editor, child)\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertSpanOperationImplementation: BehaviorOperationImplementation<\n  'insert.span'\n> = ({context, operation}) => {\n  if (!operation.editor.selection) {\n    console.error('Unable to perform action without selection', operation)\n    return\n  }\n\n  const [focusBlock, focusBlockPath] = Array.from(\n    Editor.nodes(operation.editor, {\n      at: operation.editor.selection.focus.path,\n      match: (node) => operation.editor.isTextBlock(node),\n    }),\n  )[0] ?? [undefined, undefined]\n\n  if (!focusBlock || !focusBlockPath) {\n    console.error('Unable to perform action without focus block', operation)\n    return\n  }\n\n  const markDefs = focusBlock.markDefs ?? []\n  const annotations = operation.annotations\n    ? operation.annotations.map((annotation) => ({\n        _type: annotation.name,\n        _key: context.keyGenerator(),\n        ...annotation.value,\n      }))\n    : undefined\n\n  if (annotations && annotations.length > 0) {\n    Transforms.setNodes(operation.editor, {\n      markDefs: [...markDefs, ...annotations],\n    })\n  }\n\n  Transforms.insertNodes(operation.editor, {\n    _type: 'span',\n    _key: context.keyGenerator(),\n    text: operation.text,\n    marks: [\n      ...(annotations?.map((annotation) => annotation._key) ?? []),\n      ...(operation.decorators ?? []),\n    ],\n  })\n}\n","import {Editor, Path, Point, Range, Transforms, type Descendant} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport {\n  getFocusBlock,\n  getFocusChild,\n  getLastBlock,\n  getSelectionEndBlock,\n  getSelectionStartBlock,\n} from '../internal-utils/slate-utils'\nimport {isEqualToEmptyEditor, toSlateValue} from '../internal-utils/values'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertBlockOperationImplementation: BehaviorOperationImplementation<\n  'insert.block'\n> = ({context, operation}) => {\n  const parsedBlock = parseBlock({\n    block: operation.block,\n    context,\n    options: {refreshKeys: false, validateFields: true},\n  })\n\n  if (!parsedBlock) {\n    throw new Error(`Failed to parse block ${JSON.stringify(operation.block)}`)\n  }\n\n  const fragment = toSlateValue([parsedBlock], {schemaTypes: context.schema})[0]\n\n  if (!fragment) {\n    throw new Error(\n      `Failed to convert block to Slate fragment ${JSON.stringify(parsedBlock)}`,\n    )\n  }\n\n  insertBlock({\n    block: fragment,\n    placement: operation.placement,\n    select: operation.select ?? 'start',\n    editor: operation.editor,\n    schema: context.schema,\n  })\n}\n\nexport function insertBlock({\n  block,\n  placement,\n  select,\n  editor,\n  schema,\n}: {\n  block: Descendant\n  placement: 'auto' | 'after' | 'before'\n  select: 'start' | 'end' | 'none'\n  editor: PortableTextSlateEditor\n  schema: EditorSchema\n}) {\n  const [startBlock, startBlockPath] = getSelectionStartBlock({editor})\n  const [endBlock, endBlockPath] = getSelectionEndBlock({editor})\n\n  if (\n    !editor.selection ||\n    !startBlock ||\n    !startBlockPath ||\n    !endBlock ||\n    !endBlockPath\n  ) {\n    if (select !== 'none') {\n      DOMEditor.focus(editor)\n    }\n\n    const [lastBlock, lastBlockPath] = getLastBlock({editor})\n\n    if (placement === 'before') {\n      Transforms.insertNodes(editor, [block], {at: [0]})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, [0]))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, [0]))\n      }\n    } else if (placement === 'after') {\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0]\n      Transforms.insertNodes(editor, [block], {at: nextPath, select: false})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    } else {\n      // placement === 'auto'\n\n      if (lastBlock && isEqualToEmptyEditor([lastBlock], schema)) {\n        // And if the last block was an empty text block, let's remove\n        // that too\n        Transforms.removeNodes(editor, {at: lastBlockPath})\n\n        Transforms.insertNodes(editor, [block], {\n          at: lastBlockPath,\n          select: false,\n        })\n\n        Transforms.deselect(editor)\n\n        if (select === 'start') {\n          Transforms.select(editor, Editor.start(editor, lastBlockPath))\n        } else if (select === 'end') {\n          Transforms.select(editor, Editor.end(editor, lastBlockPath))\n        }\n\n        return\n      }\n\n      if (\n        editor.isTextBlock(block) &&\n        lastBlock &&\n        editor.isTextBlock(lastBlock)\n      ) {\n        const selectionBefore = Editor.end(editor, lastBlockPath)\n\n        Transforms.insertFragment(editor, [block], {\n          at: Editor.end(editor, lastBlockPath),\n        })\n\n        if (select === 'start') {\n          Transforms.select(editor, selectionBefore)\n        } else if (select === 'none') {\n          Transforms.deselect(editor)\n        }\n\n        return\n      }\n\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0]\n\n      Transforms.insertNodes(editor, [block], {at: nextPath, select: false})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    }\n  } else {\n    if (placement === 'before') {\n      const currentSelection = editor.selection\n      const selectionStartPoint = Range.start(currentSelection)\n\n      Transforms.insertNodes(editor, [block], {\n        at: [selectionStartPoint.path[0]],\n        select: false,\n      })\n\n      if (select === 'start') {\n        Transforms.select(\n          editor,\n          Editor.start(editor, [selectionStartPoint.path[0]]),\n        )\n      } else if (select === 'end') {\n        Transforms.select(\n          editor,\n          Editor.end(editor, [selectionStartPoint.path[0]]),\n        )\n      }\n    } else if (placement === 'after') {\n      const currentSelection = editor.selection\n      const selectionEndPoint = Range.end(currentSelection)\n\n      const nextPath = [selectionEndPoint.path[0] + 1]\n\n      Transforms.insertNodes(editor, [block], {\n        at: nextPath,\n        select: false,\n      })\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    } else {\n      // placement === 'auto'\n\n      const currentSelection = editor.selection\n      const endBlockEndPoint = Editor.start(editor, endBlockPath)\n\n      if (Range.isExpanded(currentSelection) && !editor.isTextBlock(block)) {\n        Transforms.delete(editor, {at: currentSelection})\n\n        const newSelection = editor.selection\n\n        const [focusBlock, focusBlockPath] = getFocusBlock({editor})\n\n        Transforms.insertNodes(editor, [block], {\n          voids: true,\n        })\n\n        const adjustedSelection =\n          newSelection.anchor.offset === 0\n            ? Range.transform(newSelection, {\n                type: 'insert_node',\n                node: block,\n                path: [newSelection.anchor.path[0]],\n              })\n            : newSelection\n\n        if (select === 'none' && adjustedSelection) {\n          Transforms.select(editor, adjustedSelection)\n        }\n\n        if (focusBlock && isEqualToEmptyEditor([focusBlock], schema)) {\n          Transforms.removeNodes(editor, {at: focusBlockPath})\n        }\n\n        return\n      }\n\n      if (editor.isTextBlock(endBlock) && editor.isTextBlock(block)) {\n        const selectionStartPoint = Range.start(currentSelection)\n\n        if (isEqualToEmptyEditor([endBlock], schema)) {\n          const currentSelection = editor.selection\n\n          Transforms.insertNodes(editor, [block], {\n            at: endBlockPath,\n            select: false,\n          })\n          Transforms.removeNodes(editor, {at: Path.next(endBlockPath)})\n\n          if (select === 'start') {\n            Transforms.select(editor, selectionStartPoint)\n          } else if (select === 'end') {\n            Transforms.select(editor, Editor.end(editor, endBlockPath))\n          } else {\n            Transforms.select(editor, currentSelection)\n          }\n\n          return\n        }\n\n        if (select === 'end') {\n          Transforms.insertFragment(editor, [block], {\n            voids: true,\n          })\n\n          return\n        }\n\n        Transforms.insertFragment(editor, [block], {\n          at: currentSelection,\n          voids: true,\n        })\n\n        if (select === 'start') {\n          Transforms.select(editor, selectionStartPoint)\n        } else {\n          if (!Point.equals(selectionStartPoint, endBlockEndPoint)) {\n            Transforms.select(editor, selectionStartPoint)\n          }\n        }\n      } else {\n        if (!editor.isTextBlock(endBlock)) {\n          Transforms.insertNodes(editor, [block], {select: false})\n\n          const nextPath = [endBlockPath[0] + 1]\n\n          if (select === 'start') {\n            Transforms.select(editor, Editor.start(editor, nextPath))\n          } else if (select === 'end') {\n            Transforms.select(editor, Editor.end(editor, nextPath))\n          }\n        } else {\n          const endBlockStartPoint = Editor.start(editor, endBlockPath)\n          const endBlockEndPoint = Editor.end(editor, endBlockPath)\n          const selectionStartPoint = Range.start(currentSelection)\n          const selectionEndPoint = Range.end(currentSelection)\n\n          if (\n            Range.isCollapsed(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint)\n          ) {\n            Transforms.insertNodes(editor, [block], {\n              at: endBlockPath,\n              select: false,\n            })\n\n            if (select === 'start' || select === 'end') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            }\n\n            if (isEqualToEmptyEditor([endBlock], schema)) {\n              Transforms.removeNodes(editor, {at: Path.next(endBlockPath)})\n            }\n          } else if (\n            Range.isCollapsed(currentSelection) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            const nextPath = [endBlockPath[0] + 1]\n\n            Transforms.insertNodes(editor, [block], {\n              at: nextPath,\n              select: false,\n            })\n\n            if (select === 'start' || select === 'end') {\n              Transforms.select(editor, Editor.start(editor, nextPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            } else if (select === 'end') {\n              Transforms.select(editor, Editor.end(editor, endBlockPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            } else if (select === 'end') {\n              Transforms.select(editor, Editor.end(editor, endBlockPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(\n                editor,\n                Editor.start(editor, Path.next(endBlockPath)),\n              )\n            } else if (select === 'end') {\n              Transforms.select(\n                editor,\n                Editor.end(editor, Path.next(endBlockPath)),\n              )\n            }\n          } else {\n            const currentSelection = editor.selection\n            const [focusChild] = getFocusChild({editor})\n\n            if (focusChild && editor.isTextSpan(focusChild)) {\n              Transforms.insertFragment(editor, [block], {\n                at: currentSelection,\n              })\n\n              if (select === 'start' || select === 'end') {\n                Transforms.select(editor, [endBlockPath[0] + 1])\n              } else {\n                Transforms.select(editor, currentSelection)\n              }\n            } else {\n              const nextPath = [endBlockPath[0] + 1]\n              Transforms.insertNodes(editor, [block], {\n                at: nextPath,\n                select: false,\n              })\n              Transforms.select(editor, currentSelection)\n\n              if (select === 'start') {\n                Transforms.select(editor, Editor.start(editor, nextPath))\n              } else if (select === 'end') {\n                Transforms.select(editor, Editor.end(editor, nextPath))\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n","import {Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const moveBackwardOperationImplementation: BehaviorOperationImplementation<\n  'move.backward'\n> = ({operation}) => {\n  Transforms.move(operation.editor, {\n    unit: 'character',\n    distance: operation.distance,\n    reverse: true,\n  })\n}\n","import {Transforms} from 'slate'\nimport {toSlatePath} from '../internal-utils/paths'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const moveBlockOperationImplementation: BehaviorOperationImplementation<\n  'move.block'\n> = ({operation}) => {\n  const at = [toSlatePath(operation.at, operation.editor)[0]]\n  const to = [toSlatePath(operation.to, operation.editor)[0]]\n\n  Transforms.moveNodes(operation.editor, {\n    at,\n    to,\n    mode: 'highest',\n  })\n}\n","import {Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const moveForwardOperationImplementation: BehaviorOperationImplementation<\n  'move.forward'\n> = ({operation}) => {\n  Transforms.move(operation.editor, {\n    unit: 'character',\n    distance: operation.distance,\n  })\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const selectOperationImplementation: BehaviorOperationImplementation<\n  'select'\n> = ({operation}) => {\n  const newSelection = toSlateRange(operation.at, operation.editor)\n\n  if (newSelection) {\n    Transforms.select(operation.editor, newSelection)\n  } else {\n    Transforms.deselect(operation.editor)\n  }\n}\n","import type {\n  AbstractBehaviorEventType,\n  SyntheticBehaviorEvent,\n} from '../behaviors/behavior.types.event'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {removeDecoratorOperationImplementation} from '../editor/plugins/createWithPortableTextMarkModel'\nimport {\n  historyRedoOperationImplementation,\n  historyUndoOperationImplementation,\n} from '../editor/plugins/createWithUndoRedo'\nimport type {OmitFromUnion, PickFromUnion} from '../type-utils'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {addAnnotationOperationImplementation} from './behavior.operation.annotation.add'\nimport {removeAnnotationOperationImplementation} from './behavior.operation.annotation.remove'\nimport {blockSetOperationImplementation} from './behavior.operation.block.set'\nimport {blockUnsetOperationImplementation} from './behavior.operation.block.unset'\nimport {decoratorAddOperationImplementation} from './behavior.operation.decorator.add'\nimport {deleteOperationImplementation} from './behavior.operation.delete'\nimport {deleteBackwardOperationImplementation} from './behavior.operation.delete.backward'\nimport {deleteBlockOperationImplementation} from './behavior.operation.delete.block'\nimport {deleteForwardOperationImplementation} from './behavior.operation.delete.forward'\nimport {insertInlineObjectOperationImplementation} from './behavior.operation.insert-inline-object'\nimport {insertSpanOperationImplementation} from './behavior.operation.insert-span'\nimport {insertBlockOperationImplementation} from './behavior.operation.insert.block'\nimport {insertTextOperationImplementation} from './behavior.operation.insert.text'\nimport {moveBackwardOperationImplementation} from './behavior.operation.move.backward'\nimport {moveBlockOperationImplementation} from './behavior.operation.move.block'\nimport {moveForwardOperationImplementation} from './behavior.operation.move.forward'\nimport {selectOperationImplementation} from './behavior.operation.select'\n\nexport type BehaviorOperationImplementationContext = Pick<\n  EditorContext,\n  'keyGenerator' | 'schema'\n>\n\nexport type BehaviorOperationImplementation<\n  TBehaviorOperationType extends BehaviorOperation['type'],\n  TReturnType = void,\n> = ({\n  context,\n  operation,\n}: {\n  context: BehaviorOperationImplementationContext\n  operation: PickFromUnion<BehaviorOperation, 'type', TBehaviorOperationType>\n}) => TReturnType\n\ntype BehaviorOperation = OmitFromUnion<\n  SyntheticBehaviorEvent,\n  'type',\n  AbstractBehaviorEventType\n> & {\n  editor: PortableTextSlateEditor\n}\n\ntype BehaviorOperationImplementations = {\n  [TBehaviorOperationType in BehaviorOperation['type']]: BehaviorOperationImplementation<TBehaviorOperationType>\n}\n\nconst behaviorOperationImplementations: BehaviorOperationImplementations = {\n  'annotation.add': addAnnotationOperationImplementation,\n  'annotation.remove': removeAnnotationOperationImplementation,\n  'block.set': blockSetOperationImplementation,\n  'block.unset': blockUnsetOperationImplementation,\n  'decorator.add': decoratorAddOperationImplementation,\n  'decorator.remove': removeDecoratorOperationImplementation,\n  'delete': deleteOperationImplementation,\n  'delete.backward': deleteBackwardOperationImplementation,\n  'delete.forward': deleteForwardOperationImplementation,\n  'delete.block': deleteBlockOperationImplementation,\n  'history.redo': historyRedoOperationImplementation,\n  'history.undo': historyUndoOperationImplementation,\n  'insert.block': insertBlockOperationImplementation,\n  'insert.inline object': insertInlineObjectOperationImplementation,\n  'insert.span': insertSpanOperationImplementation,\n  'insert.text': insertTextOperationImplementation,\n  'move.backward': moveBackwardOperationImplementation,\n  'move.block': moveBlockOperationImplementation,\n  'move.forward': moveForwardOperationImplementation,\n  'select': selectOperationImplementation,\n}\n\nexport function performOperation({\n  context,\n  operation,\n}: {\n  context: BehaviorOperationImplementationContext\n  operation: BehaviorOperation\n}) {\n  try {\n    switch (operation.type) {\n      case 'annotation.add': {\n        behaviorOperationImplementations['annotation.add']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'annotation.remove': {\n        behaviorOperationImplementations['annotation.remove']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'block.set': {\n        behaviorOperationImplementations['block.set']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'block.unset': {\n        behaviorOperationImplementations['block.unset']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'decorator.add': {\n        behaviorOperationImplementations['decorator.add']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'decorator.remove': {\n        behaviorOperationImplementations['decorator.remove']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'delete': {\n        behaviorOperationImplementations.delete({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'delete.backward': {\n        behaviorOperationImplementations['delete.backward']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'delete.block': {\n        behaviorOperationImplementations['delete.block']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'delete.forward': {\n        behaviorOperationImplementations['delete.forward']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'history.redo': {\n        behaviorOperationImplementations['history.redo']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'history.undo': {\n        behaviorOperationImplementations['history.undo']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'insert.block': {\n        behaviorOperationImplementations['insert.block']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'insert.inline object': {\n        behaviorOperationImplementations['insert.inline object']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'insert.span': {\n        behaviorOperationImplementations['insert.span']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'insert.text': {\n        behaviorOperationImplementations['insert.text']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'move.backward': {\n        behaviorOperationImplementations['move.backward']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'move.block': {\n        behaviorOperationImplementations['move.block']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      case 'move.forward': {\n        behaviorOperationImplementations['move.forward']({\n          context,\n          operation: operation,\n        })\n        break\n      }\n      default: {\n        behaviorOperationImplementations.select({\n          context,\n          operation: operation,\n        })\n        break\n      }\n    }\n  } catch (error) {\n    console.error(\n      new Error(\n        `Executing \"${operation.type}\" failed due to: ${error.message}`,\n      ),\n    )\n  }\n}\n","import {Editor} from 'slate'\nimport {defaultKeyGenerator} from './key-generator'\n\nconst CURRENT_OPERATION_ID: WeakMap<Editor, string | undefined> = new WeakMap()\n\nexport function withApplyingBehaviorOperations(editor: Editor, fn: () => void) {\n  CURRENT_OPERATION_ID.set(editor, defaultKeyGenerator())\n  Editor.withoutNormalizing(editor, fn)\n  CURRENT_OPERATION_ID.set(editor, undefined)\n}\n\nexport function getCurrentOperationId(editor: Editor) {\n  return CURRENT_OPERATION_ID.get(editor)\n}\n\nexport function isApplyingBehaviorOperations(editor: Editor) {\n  return getCurrentOperationId(editor) !== undefined\n}\n","import {Editor} from 'slate'\nimport {slateRangeToSelection} from '../../internal-utils/slate-utils'\nimport {insertTextOperationImplementation} from '../../operations/behavior.operation.insert.text'\nimport {performOperation} from '../../operations/behavior.operations'\nimport type {EditorActor} from '../editor-machine'\nimport {isApplyingBehaviorOperations} from '../with-applying-behavior-operations'\n\nexport function createWithEventListeners(editorActor: EditorActor) {\n  return function withEventListeners(editor: Editor) {\n    if (editorActor.getSnapshot().context.maxBlocks !== undefined) {\n      return editor\n    }\n\n    const {insertText, select} = editor\n\n    editor.deleteBackward = (unit) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error('Unexpected call to .deleteBackward(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.backward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.deleteForward = (unit) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error('Unexpected call to .deleteForward(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.forward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertBreak = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error('Unexpected call to .insertBreak(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertData = (dataTransfer) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error('Unexpected call to .insertData(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'input.*',\n          originEvent: {\n            dataTransfer,\n          },\n        },\n        editor,\n      })\n    }\n\n    editor.insertSoftBreak = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        insertTextOperationImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {type: 'insert.text', text: '\\n', editor},\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.soft break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertText = (text, options) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        insertText(text, options)\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.text',\n          text,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.redo = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {\n            type: 'history.redo',\n            editor,\n          },\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.redo',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.select = (location) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        select(location)\n        return\n      }\n\n      const range = Editor.range(editor, location)\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'select',\n          at: slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range,\n          }),\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.setFragmentData = () => {\n      console.error('Unexpected call to .setFragmentData(...)')\n      return\n    }\n\n    editor.undo = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {\n            type: 'history.undo',\n            editor,\n          },\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.undo',\n        },\n        editor,\n      })\n      return\n    }\n\n    return editor\n  }\n}\n","import {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that the PTE maxBlocks prop is respected\n *\n */\nexport function createWithMaxBlocks(editorActor: EditorActor) {\n  return function withMaxBlocks(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n    editor.apply = (operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      const rows = editorActor.getSnapshot().context.maxBlocks ?? -1\n      if (rows > 0 && editor.children.length >= rows) {\n        if (\n          (operation.type === 'insert_node' ||\n            operation.type === 'split_node') &&\n          operation.path.length === 1\n        ) {\n          return\n        }\n      }\n      apply(operation)\n    }\n    return editor\n  }\n}\n","import {Editor, Element, Node, Transforms} from 'slate'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that every new node in the editor get a new _key prop when created\n *\n */\nexport function createWithObjectKeys(editorActor: EditorActor) {\n  return function withKeys(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply, normalizeNode} = editor\n\n    // The default behavior is to always generate a new key here.\n    // For example, when undoing and redoing we want to retain the keys, but\n    // when we create a new bold span by splitting a non-bold-span we want the produced node to get a new key.\n    editor.apply = (operation) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      if (operation.type === 'split_node') {\n        const existingKeys = [...Node.descendants(editor)].map(\n          ([node]) => node._key,\n        )\n\n        apply({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            _key:\n              operation.properties._key === undefined ||\n              existingKeys.includes(operation.properties._key)\n                ? editorActor.getSnapshot().context.keyGenerator()\n                : operation.properties._key,\n          },\n        })\n\n        return\n      }\n\n      if (operation.type === 'insert_node') {\n        if (!Editor.isEditor(operation.node)) {\n          const existingKeys = [...Node.descendants(editor)].map(\n            ([node]) => node._key,\n          )\n\n          apply({\n            ...operation,\n            node: {\n              ...operation.node,\n              _key:\n                operation.node._key === undefined ||\n                existingKeys.includes(operation.node._key)\n                  ? editorActor.getSnapshot().context.keyGenerator()\n                  : operation.node._key,\n            },\n          })\n\n          return\n        }\n      }\n\n      apply(operation)\n    }\n\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (\n        Element.isElement(node) &&\n        node._type === editorActor.getSnapshot().context.schema.block.name\n      ) {\n        // Set key on block itself\n        if (!node._key) {\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {_key: editorActor.getSnapshot().context.keyGenerator()},\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n        // Set keys on it's children\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (!child._key) {\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {_key: editorActor.getSnapshot().context.keyGenerator()},\n              {at: childPath},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n      normalizeNode(entry)\n    }\n\n    return editor\n  }\n}\n","import {\n  applyAll,\n  type DiffMatchPatch,\n  type InsertPatch,\n  type Patch,\n  type SetPatch,\n  type UnsetPatch,\n} from '@portabletext/patches'\nimport {\n  cleanupEfficiency,\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  applyPatches as diffMatchPatchApplyPatches,\n  makeDiff,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {\n  KeyedSegment,\n  Path,\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n} from '@sanity/types'\nimport {\n  Element,\n  Node,\n  Text,\n  Transforms,\n  type Descendant,\n  type Path as SlatePath,\n} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {debugWithName} from './debug'\nimport {isEqualToEmptyEditor, toSlateValue} from './values'\nimport {KEY_TO_SLATE_ELEMENT} from './weakMaps'\n\nconst debug = debugWithName('applyPatches')\nconst debugVerbose = debug.enabled && true\n\n/**\n * Creates a function that can apply a patch onto a PortableTextSlateEditor.\n */\nexport function createApplyPatch(\n  schema: EditorSchema,\n): (editor: PortableTextSlateEditor, patch: Patch) => boolean {\n  return (editor: PortableTextSlateEditor, patch: Patch): boolean => {\n    let changed = false\n\n    // Save some CPU cycles by not stringifying unless enabled\n    if (debugVerbose) {\n      debug(\n        '\\n\\nNEW PATCH =============================================================',\n      )\n      debug(JSON.stringify(patch, null, 2))\n    }\n\n    try {\n      switch (patch.type) {\n        case 'insert':\n          changed = insertPatch(editor, patch, schema)\n          break\n        case 'unset':\n          changed = unsetPatch(editor, patch)\n          break\n        case 'set':\n          changed = setPatch(editor, patch)\n          break\n        case 'diffMatchPatch':\n          changed = diffMatchPatch(editor, patch)\n          break\n        default:\n          debug('Unhandled patch', patch.type)\n      }\n    } catch (err) {\n      console.error(err)\n    }\n\n    return changed\n  }\n}\n\n/**\n * Apply a remote diff match patch to the current PTE instance.\n * Note meant for external consumption, only exported for testing purposes.\n *\n * @param editor - Portable text slate editor instance\n * @param patch - The PTE diff match patch operation to apply\n * @returns true if the patch was applied, false otherwise\n * @internal\n */\nexport function diffMatchPatch(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  patch: DiffMatchPatch,\n): boolean {\n  const {block, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  if (!child || !childPath) {\n    debug('Child not found')\n    return false\n  }\n  const isSpanTextDiffMatchPatch =\n    block &&\n    editor.isTextBlock(block) &&\n    patch.path.length === 4 &&\n    patch.path[1] === 'children' &&\n    patch.path[3] === 'text'\n\n  if (!isSpanTextDiffMatchPatch || !Text.isText(child)) {\n    return false\n  }\n\n  const patches = parsePatch(patch.value)\n  const [newValue] = diffMatchPatchApplyPatches(patches, child.text, {\n    allowExceedingIndices: true,\n  })\n  const diff = cleanupEfficiency(makeDiff(child.text, newValue), 5)\n\n  debugState(editor, 'before')\n  let offset = 0\n  for (const [op, text] of diff) {\n    if (op === DIFF_INSERT) {\n      editor.apply({type: 'insert_text', path: childPath, offset, text})\n      offset += text.length\n    } else if (op === DIFF_DELETE) {\n      editor.apply({type: 'remove_text', path: childPath, offset: offset, text})\n    } else if (op === DIFF_EQUAL) {\n      offset += text.length\n    }\n  }\n  debugState(editor, 'after')\n\n  return true\n}\n\nfunction insertPatch(\n  editor: PortableTextSlateEditor,\n  patch: InsertPatch,\n  schema: EditorSchema,\n) {\n  const {\n    block: targetBlock,\n    child: targetChild,\n    blockPath: targetBlockPath,\n    childPath: targetChildPath,\n  } = findBlockAndChildFromPath(editor, patch.path)\n  if (!targetBlock || !targetBlockPath) {\n    debug('Block not found')\n    return false\n  }\n  if (patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring patch targeting void value')\n    return false\n  }\n  // Insert blocks\n  if (patch.path.length === 1) {\n    const {items, position} = patch\n    const blocksToInsert = toSlateValue(\n      items as PortableTextBlock[],\n      {schemaTypes: schema},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    ) as Descendant[]\n    const targetBlockIndex = targetBlockPath[0]\n    const normalizedIdx =\n      position === 'after' ? targetBlockIndex + 1 : targetBlockIndex\n\n    debug(`Inserting blocks at path [${normalizedIdx}]`)\n    debugState(editor, 'before')\n\n    const editorWasEmptyBefore = isEqualToEmptyEditor(editor.children, schema)\n\n    Transforms.insertNodes(editor, blocksToInsert, {at: [normalizedIdx]})\n\n    if (\n      editorWasEmptyBefore &&\n      typeof patch.path[0] === 'number' &&\n      patch.path[0] === 0\n    ) {\n      Transforms.removeNodes(editor, {\n        at: [position === 'before' ? targetBlockIndex + 1 : targetBlockIndex],\n      })\n    }\n\n    debugState(editor, 'after')\n    return true\n  }\n  // Insert children\n  const {items, position} = patch\n  if (!targetChild || !targetChildPath) {\n    debug('Child not found')\n    return false\n  }\n  const childrenToInsert =\n    targetBlock &&\n    toSlateValue(\n      [{...targetBlock, children: items as PortableTextChild[]}],\n      {schemaTypes: schema},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    )\n  const targetChildIndex = targetChildPath[1]\n  const normalizedIdx =\n    position === 'after' ? targetChildIndex + 1 : targetChildIndex\n  const childInsertPath = [targetChildPath[0], normalizedIdx]\n  debug(`Inserting children at path ${childInsertPath}`)\n  debugState(editor, 'before')\n  if (childrenToInsert && Element.isElement(childrenToInsert[0])) {\n    Transforms.insertNodes(editor, childrenToInsert[0].children, {\n      at: childInsertPath,\n    })\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction setPatch(editor: PortableTextSlateEditor, patch: SetPatch) {\n  let value = patch.value\n  if (typeof patch.path[3] === 'string') {\n    value = {}\n    value[patch.path[3]] = patch.value\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  const isTextBlock = editor.isTextBlock(block)\n\n  // Ignore patches targeting nested void data, like 'markDefs'\n  if (isTextBlock && patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring setting void value')\n    return false\n  }\n\n  debugState(editor, 'before')\n\n  // If this is targeting a text block child\n  if (isTextBlock && child && childPath) {\n    if (Text.isText(value) && Text.isText(child)) {\n      const newText = child.text\n      const oldText = value.text\n      if (oldText !== newText) {\n        debug('Setting text property')\n        editor.apply({\n          type: 'remove_text',\n          path: childPath,\n          offset: 0,\n          text: newText,\n        })\n        editor.apply({\n          type: 'insert_text',\n          path: childPath,\n          offset: 0,\n          text: value.text,\n        })\n        // call OnChange here to emit the new selection\n        // the user's selection might be interfering with\n        editor.onChange()\n      }\n    } else {\n      debug('Setting non-text property')\n      editor.apply({\n        type: 'set_node',\n        path: childPath,\n        properties: {},\n        newProperties: value as Partial<Node>,\n      })\n    }\n    return true\n  } else if (Element.isElement(block) && patch.path.length === 1 && blockPath) {\n    debug('Setting block property')\n    const {children, ...nextRest} = value as unknown as PortableTextBlock\n    const {children: prevChildren, ...prevRest} = block || {children: undefined}\n    // Set any block properties\n    editor.apply({\n      type: 'set_node',\n      path: blockPath,\n      properties: {...prevRest},\n      newProperties: nextRest,\n    })\n    // Replace the children in the block\n    // Note that children must be explicitly inserted, and can't be set with set_node\n    debug('Setting children')\n    block.children.forEach((c, cIndex) => {\n      editor.apply({\n        type: 'remove_node',\n        path: blockPath.concat(block.children.length - 1 - cIndex),\n        node: c,\n      })\n    })\n    if (Array.isArray(children)) {\n      children.forEach((c, cIndex) => {\n        editor.apply({\n          type: 'insert_node',\n          path: blockPath.concat(cIndex),\n          node: c,\n        })\n      })\n    }\n  } else if (block && 'value' in block) {\n    if (patch.path.length > 1 && patch.path[1] !== 'children') {\n      const newVal = applyAll(block.value, [\n        {\n          ...patch,\n          path: patch.path.slice(1),\n        },\n      ])\n      Transforms.setNodes(editor, {...block, value: newVal}, {at: blockPath})\n    } else {\n      return false\n    }\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction unsetPatch(editor: PortableTextSlateEditor, patch: UnsetPatch) {\n  // Value\n  if (patch.path.length === 0) {\n    debug('Removing everything')\n    debugState(editor, 'before')\n    const previousSelection = editor.selection\n    Transforms.deselect(editor)\n\n    const children = Node.children(editor, [], {\n      reverse: true,\n    })\n\n    for (const [_, path] of children) {\n      Transforms.removeNodes(editor, {at: path})\n    }\n\n    Transforms.insertNodes(editor, editor.pteCreateTextBlock({decorators: []}))\n    if (previousSelection) {\n      Transforms.select(editor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n    }\n    // call OnChange here to emit the new selection\n    editor.onChange()\n    debugState(editor, 'after')\n    return true\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n\n  // Single blocks\n  if (patch.path.length === 1) {\n    if (!block || !blockPath) {\n      debug('Block not found')\n      return false\n    }\n    const blockIndex = blockPath[0]\n    debug(`Removing block at path [${blockIndex}]`)\n    debugState(editor, 'before')\n\n    Transforms.removeNodes(editor, {at: [blockIndex]})\n    debugState(editor, 'after')\n    return true\n  }\n\n  // Unset on text block children\n  if (\n    editor.isTextBlock(block) &&\n    patch.path[1] === 'children' &&\n    patch.path.length === 3\n  ) {\n    if (!child || !childPath) {\n      debug('Child not found')\n      return false\n    }\n    debug(`Unsetting child at path ${JSON.stringify(childPath)}`)\n    debugState(editor, 'before')\n    if (debugVerbose) {\n      debug(`Removing child at path ${JSON.stringify(childPath)}`)\n    }\n    Transforms.removeNodes(editor, {at: childPath})\n    debugState(editor, 'after')\n    return true\n  }\n  return false\n}\n\nfunction isKeyedSegment(segment: PathSegment): segment is KeyedSegment {\n  return typeof segment === 'object' && '_key' in segment\n}\n\nfunction debugState(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection'\n  >,\n  stateName: string,\n) {\n  if (!debugVerbose) {\n    return\n  }\n\n  debug(`Children ${stateName}:`, JSON.stringify(editor.children, null, 2))\n  debug(`Selection ${stateName}: `, JSON.stringify(editor.selection, null, 2))\n}\n\nfunction findBlockFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {block?: Descendant; path?: SlatePath} {\n  let blockIndex = -1\n  const block = editor.children.find((node: Descendant, index: number) => {\n    const isMatch = isKeyedSegment(path[0])\n      ? node._key === path[0]._key\n      : index === path[0]\n    if (isMatch) {\n      blockIndex = index\n    }\n    return isMatch\n  })\n  if (!block) {\n    return {}\n  }\n  return {block, path: [blockIndex] as SlatePath}\n}\n\nfunction findBlockAndChildFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {\n  child?: Descendant\n  childPath?: SlatePath\n  block?: Descendant\n  blockPath?: SlatePath\n} {\n  const {block, path: blockPath} = findBlockFromPath(editor, path)\n  if (!(Element.isElement(block) && path[1] === 'children')) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  let childIndex = -1\n  const child = block.children.find((node, index: number) => {\n    const isMatch = isKeyedSegment(path[2])\n      ? node._key === path[2]._key\n      : index === path[2]\n    if (isMatch) {\n      childIndex = index\n    }\n    return isMatch\n  })\n  if (!child) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  return {\n    block,\n    child,\n    blockPath,\n    childPath: blockPath?.concat(childIndex) as SlatePath,\n  }\n}\n","import type {Editor} from 'slate'\n\nexport const PATCHING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withoutPatching(editor: Editor, fn: () => void): void {\n  const prev = isPatching(editor)\n  PATCHING.set(editor, false)\n  fn()\n  PATCHING.set(editor, prev)\n}\n\nexport function isPatching(editor: Editor): boolean | undefined {\n  return PATCHING.get(editor)\n}\n","import {insert, setIfMissing, unset, type Patch} from '@portabletext/patches'\nimport {\n  Editor,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type Operation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport {createApplyPatch} from '../../internal-utils/applyPatch'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../../internal-utils/values'\nimport {\n  IS_PROCESSING_REMOTE_CHANGES,\n  KEY_TO_VALUE_ELEMENT,\n} from '../../internal-utils/weakMaps'\nimport {withRemoteChanges} from '../../internal-utils/withChanges'\nimport {\n  isPatching,\n  PATCHING,\n  withoutPatching,\n} from '../../internal-utils/withoutPatching'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport type {RelayActor} from '../relay-machine'\nimport {getCurrentOperationId} from '../with-applying-behavior-operations'\nimport {withoutSaving} from './createWithUndoRedo'\n\nconst debug = debugWithName('plugin:withPatches')\nconst debugVerbose = false\n\nexport interface PatchFunctions {\n  insertNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  insertTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  mergeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  moveNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  setNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  splitNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n}\n\ninterface Options {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  patchFunctions: PatchFunctions\n  subscriptions: Array<() => () => void>\n}\n\nexport function createWithPatches({\n  editorActor,\n  relayActor,\n  patchFunctions,\n  subscriptions,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  // The previous editor children are needed to figure out the _key of deleted nodes\n  // The editor.children would no longer contain that information if the node is already deleted.\n  let previousChildren: Descendant[]\n\n  const applyPatch = createApplyPatch(editorActor.getSnapshot().context.schema)\n\n  return function withPatches(editor: PortableTextSlateEditor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, false)\n    PATCHING.set(editor, true)\n    previousChildren = [...editor.children]\n\n    const {apply} = editor\n    let bufferedPatches: Patch[] = []\n\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0) {\n        return\n      }\n      const patches = bufferedPatches\n      bufferedPatches = []\n      let changed = false\n\n      withRemoteChanges(editor, () => {\n        Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              for (const patch of patches) {\n                if (debug.enabled)\n                  debug(`Handling remote patch ${JSON.stringify(patch)}`)\n\n                try {\n                  changed = applyPatch(editor, patch)\n                } catch (error) {\n                  console.error(\n                    `Applying patch ${JSON.stringify(patch)} failed due to: ${error.message}`,\n                  )\n                }\n              }\n            })\n          })\n        })\n        if (changed) {\n          editor.normalize()\n          editor.onChange()\n        }\n      })\n    }\n\n    const handlePatches = ({patches}: {patches: Patch[]}) => {\n      const remotePatches = patches.filter((p) => p.origin !== 'local')\n      if (remotePatches.length === 0) {\n        return\n      }\n      bufferedPatches = bufferedPatches.concat(remotePatches)\n      handleBufferedRemotePatches()\n    }\n\n    subscriptions.push(() => {\n      debug('Subscribing to remote patches')\n      const sub = editorActor.on('patches', handlePatches)\n      return () => {\n        debug('Unsubscribing to remote patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.apply = (operation: Operation): void | Editor => {\n      let patches: Patch[] = []\n\n      // Update previous children here before we apply\n      previousChildren = editor.children\n\n      const editorWasEmpty = isEqualToEmptyEditor(\n        previousChildren,\n        editorActor.getSnapshot().context.schema,\n      )\n\n      // Apply the operation\n      apply(operation)\n\n      const editorIsEmpty = isEqualToEmptyEditor(\n        editor.children,\n        editorActor.getSnapshot().context.schema,\n      )\n\n      if (!isPatching(editor)) {\n        if (debugVerbose && debug.enabled)\n          debug(\n            `Editor is not producing patch for operation ${operation.type}`,\n            operation,\n          )\n        return editor\n      }\n\n      // If the editor was empty and now isn't, insert the placeholder into it.\n      if (\n        editorWasEmpty &&\n        !editorIsEmpty &&\n        operation.type !== 'set_selection'\n      ) {\n        patches.push(insert(previousChildren, 'before', [0]))\n      }\n\n      switch (operation.type) {\n        case 'insert_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertTextPatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeTextPatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'split_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.splitNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'insert_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'set_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.setNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'merge_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.mergeNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'move_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.moveNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        default:\n        // Do nothing\n      }\n\n      // Unset the value if a operation made the editor empty\n      if (\n        !editorWasEmpty &&\n        editorIsEmpty &&\n        ['merge_node', 'set_node', 'remove_text', 'remove_node'].includes(\n          operation.type,\n        )\n      ) {\n        patches = [...patches, unset([])]\n        relayActor.send({\n          type: 'unset',\n          previousValue: fromSlateValue(\n            previousChildren,\n            editorActor.getSnapshot().context.schema.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n        })\n      }\n\n      // Prepend patches with setIfMissing if going from empty editor to something involving a patch.\n      if (editorWasEmpty && patches.length > 0) {\n        patches = [setIfMissing([], []), ...patches]\n      }\n\n      // Emit all patches\n      if (patches.length > 0) {\n        for (const patch of patches) {\n          editorActor.send({\n            type: 'internal.patch',\n            patch: {...patch, origin: 'local'},\n            operationId: getCurrentOperationId(editor),\n            value: fromSlateValue(\n              editor.children,\n              editorActor.getSnapshot().context.schema.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            ),\n          })\n        }\n      }\n      return editor\n    }\n    return editor\n  }\n}\n","import {Editor, Path} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {SlateTextBlock, VoidElement} from '../../types/slate'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPlaceholderBlock')\n\n/**\n * Keep a \"placeholder\" block present when the editor is empty\n *\n */\nexport function createWithPlaceholderBlock(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPlaceholderBlock(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n\n    editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'remove_node') {\n        const node = op.node as SlateTextBlock | VoidElement\n        if (op.path[0] === 0 && Editor.isVoid(editor, node)) {\n          // Check next path, if it exists, do nothing\n          const nextPath = Path.next(op.path)\n          // Is removing the first block which is a void (not a text block), add a new empty text block in it, if there is no other element in the next path\n          if (!editor.children[nextPath[0]]) {\n            debug('Adding placeholder block')\n            Editor.insertNode(\n              editor,\n              editor.pteCreateTextBlock({decorators: []}),\n            )\n          }\n        }\n      }\n      apply(op)\n    }\n    return editor\n  }\n}\n","import {Editor, Path, Text as SlateText, Transforms} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextBlockStyle')\n\nexport function createWithPortableTextBlockStyle(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const defaultStyle = editorActor.getSnapshot().context.schema.styles[0].name\n  return function withPortableTextBlockStyle(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    // Extend Slate's default normalization to reset split node to normal style\n    // if there is no text at the right end of the split.\n    const {normalizeNode} = editor\n\n    editor.normalizeNode = (nodeEntry) => {\n      const [, path] = nodeEntry\n\n      for (const op of editor.operations) {\n        if (\n          op.type === 'split_node' &&\n          op.path.length === 1 &&\n          editor.isTextBlock(op.properties) &&\n          op.properties.style !== defaultStyle &&\n          op.path[0] === path[0] &&\n          !Path.equals(path, op.path)\n        ) {\n          const [child] = Editor.node(editor, [op.path[0] + 1, 0])\n          if (SlateText.isText(child) && child.text === '') {\n            debug(`Normalizing split node to ${defaultStyle} style`, op)\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {style: defaultStyle},\n              {at: [op.path[0] + 1], voids: false},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    return editor\n  }\n}\n","import type {BaseRange} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {slateRangeToSelection} from '../../internal-utils/slate-utils'\nimport {SLATE_TO_PORTABLE_TEXT_RANGE} from '../../internal-utils/weakMaps'\nimport type {EditorSelection, PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextSelections')\nconst debugVerbose = debug.enabled && false\n\n// This plugin will make sure that we emit a PT selection whenever the editor has changed.\nexport function createWithPortableTextSelections(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  let prevSelection: BaseRange | null = null\n  return function withPortableTextSelections(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const emitPortableTextSelection = () => {\n      if (prevSelection !== editor.selection) {\n        let ptRange: EditorSelection | null = null\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n          if (existing) {\n            ptRange = existing\n          } else {\n            ptRange = slateRangeToSelection({\n              schema: editorActor.getSnapshot().context.schema,\n              editor,\n              range: editor.selection,\n            })\n            SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n          }\n        }\n        if (debugVerbose) {\n          debug(\n            `Emitting selection ${JSON.stringify(ptRange || null)} (${JSON.stringify(\n              editor.selection,\n            )})`,\n          )\n        }\n        if (ptRange) {\n          editorActor.send({type: 'update selection', selection: ptRange})\n        } else {\n          editorActor.send({type: 'update selection', selection: null})\n        }\n      }\n      prevSelection = editor.selection\n    }\n\n    const {onChange} = editor\n    editor.onChange = () => {\n      onChange()\n      if (!editorActor.getSnapshot().matches({setup: 'setting up'})) {\n        emitPortableTextSelection()\n      }\n    }\n    return editor\n  }\n}\n","import type {\n  PortableTextListBlock,\n  PortableTextSpan,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {Transforms, type Element} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {\n  isListBlock,\n  isSpan,\n  isTextBlock,\n} from '../../internal-utils/parse-blocks'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withSchemaTypes')\n/**\n * This plugin makes sure that schema types are recognized properly by Slate as blocks, voids, inlines\n *\n */\nexport function createWithSchemaTypes({\n  editorActor,\n}: {\n  editorActor: EditorActor\n}) {\n  return function withSchemaTypes(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.isTextBlock = (value: unknown): value is PortableTextTextBlock => {\n      return isTextBlock(editorActor.getSnapshot().context, value)\n    }\n    editor.isTextSpan = (value: unknown): value is PortableTextSpan => {\n      return isSpan(editorActor.getSnapshot().context, value)\n    }\n    editor.isListBlock = (value: unknown): value is PortableTextListBlock => {\n      return isListBlock(editorActor.getSnapshot().context, value)\n    }\n    editor.isVoid = (element: Element): boolean => {\n      return (\n        editorActor.getSnapshot().context.schema.block.name !== element._type &&\n        (editorActor\n          .getSnapshot()\n          .context.schema.blockObjects.map((obj) => obj.name)\n          .includes(element._type) ||\n          editorActor\n            .getSnapshot()\n            .context.schema.inlineObjects.map((obj) => obj.name)\n            .includes(element._type))\n      )\n    }\n    editor.isInline = (element: Element): boolean => {\n      const inlineSchemaTypes = editorActor\n        .getSnapshot()\n        .context.schema.inlineObjects.map((obj) => obj.name)\n      return (\n        inlineSchemaTypes.includes(element._type) &&\n        '__inline' in element &&\n        element.__inline === true\n      )\n    }\n\n    // Extend Slate's default normalization\n    const {normalizeNode} = editor\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n\n      // If text block children node is missing _type, set it to the span type\n      if (node._type === undefined && path.length === 2) {\n        debug('Setting span type on text node without a type')\n        const span = node as PortableTextSpan\n        const key =\n          span._key || editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(\n          editor,\n          {\n            ...span,\n            _type: editorActor.getSnapshot().context.schema.span.name,\n            _key: key,\n          },\n          {at: path},\n        )\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      // catches cases when the children are missing keys but excludes it when the normalize is running the node as the editor object\n      if (node._key === undefined && (path.length === 1 || path.length === 2)) {\n        debug('Setting missing key on child node without a key')\n        const key = editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {_key: key}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      normalizeNode(entry)\n    }\n    return editor\n  }\n}\n","import {toSlateValue} from '../../internal-utils/values'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\ninterface Options {\n  editorActor: EditorActor\n}\n\n/**\n * This plugin makes various util commands available in the editor\n *\n */\nexport function createWithUtils({editorActor}: Options) {\n  return function withUtils(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.pteCreateTextBlock = (options: {\n      decorators: Array<string>\n      listItem?: string\n      level?: number\n    }) => {\n      const block = toSlateValue(\n        [\n          {\n            _type: editorActor.getSnapshot().context.schema.block.name,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            style:\n              editorActor.getSnapshot().context.schema.styles[0].name ||\n              'normal',\n            ...(options.listItem ? {listItem: options.listItem} : {}),\n            ...(options.level ? {level: options.level} : {}),\n            markDefs: [],\n            children: [\n              {\n                _type: 'span',\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                text: '',\n                marks: options.decorators.filter((decorator) =>\n                  editorActor\n                    .getSnapshot()\n                    .context.schema.decorators.find(\n                      ({name}) => name === decorator,\n                    ),\n                ),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0]\n      return block\n    }\n    return editor\n  }\n}\n","import type {BaseOperation, Editor, Node, NodeEntry} from 'slate'\nimport {createOperationToPatches} from '../../internal-utils/operationToPatches'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport type {RelayActor} from '../relay-machine'\nimport {createWithEventListeners} from './create-with-event-listeners'\nimport {createWithMaxBlocks} from './createWithMaxBlocks'\nimport {createWithObjectKeys} from './createWithObjectKeys'\nimport {createWithPatches} from './createWithPatches'\nimport {createWithPlaceholderBlock} from './createWithPlaceholderBlock'\nimport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nimport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nimport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nimport {createWithSchemaTypes} from './createWithSchemaTypes'\nimport {createWithUndoRedo} from './createWithUndoRedo'\nimport {createWithUtils} from './createWithUtils'\n\nexport interface OriginalEditorFunctions {\n  apply: (operation: BaseOperation) => void\n  onChange: () => void\n  normalizeNode: (entry: NodeEntry<Node>) => void\n}\n\ntype PluginsOptions = {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  subscriptions: Array<() => () => void>\n}\n\nexport const withPlugins = <T extends Editor>(\n  editor: T,\n  options: PluginsOptions,\n): PortableTextSlateEditor => {\n  const e = editor as T & PortableTextSlateEditor\n  const {editorActor, relayActor} = options\n  const operationToPatches = createOperationToPatches(editorActor)\n  const withObjectKeys = createWithObjectKeys(editorActor)\n  const withSchemaTypes = createWithSchemaTypes({\n    editorActor,\n  })\n  const withPatches = createWithPatches({\n    editorActor,\n    relayActor,\n    patchFunctions: operationToPatches,\n    subscriptions: options.subscriptions,\n  })\n  const withMaxBlocks = createWithMaxBlocks(editorActor)\n  const withUndoRedo = createWithUndoRedo({\n    editorActor,\n    subscriptions: options.subscriptions,\n  })\n  const withPortableTextMarkModel = createWithPortableTextMarkModel(editorActor)\n  const withPortableTextBlockStyle =\n    createWithPortableTextBlockStyle(editorActor)\n\n  const withPlaceholderBlock = createWithPlaceholderBlock(editorActor)\n\n  const withUtils = createWithUtils({\n    editorActor,\n  })\n  const withPortableTextSelections =\n    createWithPortableTextSelections(editorActor)\n  const withEventListeners = createWithEventListeners(editorActor)\n\n  // Ordering is important here, selection dealing last, data manipulation in the middle and core model stuff first.\n  return withEventListeners(\n    withSchemaTypes(\n      withObjectKeys(\n        withPortableTextMarkModel(\n          withPortableTextBlockStyle(\n            withPlaceholderBlock(\n              withUtils(\n                withMaxBlocks(\n                  withUndoRedo(withPatches(withPortableTextSelections(e))),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n  )\n}\n","import {createEditor, type Descendant} from 'slate'\nimport {withReact} from 'slate-react'\nimport {debugWithName} from '../internal-utils/debug'\nimport {\n  KEY_TO_SLATE_ELEMENT,\n  KEY_TO_VALUE_ELEMENT,\n} from '../internal-utils/weakMaps'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorActor} from './editor-machine'\nimport {withPlugins} from './plugins/with-plugins'\nimport type {RelayActor} from './relay-machine'\n\nconst debug = debugWithName('setup')\n\ntype SlateEditorConfig = {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  subscriptions: Array<() => () => void>\n}\n\nexport type SlateEditor = {\n  instance: PortableTextSlateEditor\n  initialValue: Array<Descendant>\n}\n\nexport function createSlateEditor(config: SlateEditorConfig): SlateEditor {\n  debug('Creating new Slate editor instance')\n\n  const instance = withPlugins(withReact(createEditor()), {\n    editorActor: config.editorActor,\n    relayActor: config.relayActor,\n    subscriptions: config.subscriptions,\n  })\n\n  KEY_TO_VALUE_ELEMENT.set(instance, {})\n  KEY_TO_SLATE_ELEMENT.set(instance, {})\n\n  const initialValue = [instance.pteCreateTextBlock({decorators: []})]\n\n  const slateEditor: SlateEditor = {\n    instance,\n    initialValue,\n  }\n\n  return slateEditor\n}\n","import * as selectors from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst addAnnotationOnCollapsedSelection = defineBehavior({\n  on: 'annotation.add',\n  guard: ({snapshot}) => {\n    if (!selectors.isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const caretWordSelection = selectors.getCaretWordSelection(snapshot)\n\n    if (\n      !caretWordSelection ||\n      !selectors.isSelectionExpanded({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: caretWordSelection,\n        },\n      })\n    ) {\n      return false\n    }\n\n    return {caretWordSelection}\n  },\n  actions: [\n    ({event}, {caretWordSelection}) => [\n      raise({type: 'select', at: caretWordSelection}),\n      raise({type: 'annotation.add', annotation: event.annotation}),\n    ],\n  ],\n})\n\nexport const coreAnnotationBehaviors = {\n  addAnnotationOnCollapsedSelection,\n}\n","export interface KeyboardEventLike {\n  key: string\n  keyCode?: number\n  altKey: boolean\n  ctrlKey: boolean\n  metaKey: boolean\n  shiftKey: boolean\n}\n\ninterface HotKey {\n  keyCode?: number | undefined\n  key?: string | undefined\n  altKey: boolean | null\n  ctrlKey: boolean | null\n  metaKey: boolean | null\n  shiftKey: boolean | null\n}\n\nconst IS_MAC =\n  typeof window !== 'undefined' &&\n  /Mac|iPod|iPhone|iPad/.test(window.navigator.userAgent)\n\ntype Modifier = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n\nconst modifiers: Record<string, Modifier | undefined> = {\n  alt: 'altKey',\n  control: 'ctrlKey',\n  meta: 'metaKey',\n  shift: 'shiftKey',\n}\n\nconst aliases: Record<string, string | undefined> = {\n  add: '+',\n  break: 'pause',\n  cmd: 'meta',\n  command: 'meta',\n  ctl: 'control',\n  ctrl: 'control',\n  del: 'delete',\n  down: 'arrowdown',\n  esc: 'escape',\n  ins: 'insert',\n  left: 'arrowleft',\n  mod: IS_MAC ? 'meta' : 'control',\n  opt: 'alt',\n  option: 'alt',\n  return: 'enter',\n  right: 'arrowright',\n  space: ' ',\n  spacebar: ' ',\n  up: 'arrowup',\n  win: 'meta',\n  windows: 'meta',\n}\n\nconst keyCodes: Record<string, number | undefined> = {\n  'backspace': 8,\n  'tab': 9,\n  'enter': 13,\n  'shift': 16,\n  'control': 17,\n  'alt': 18,\n  'pause': 19,\n  'capslock': 20,\n  'escape': 27,\n  ' ': 32,\n  'pageup': 33,\n  'pagedown': 34,\n  'end': 35,\n  'home': 36,\n  'arrowleft': 37,\n  'arrowup': 38,\n  'arrowright': 39,\n  'arrowdown': 40,\n  'insert': 45,\n  'delete': 46,\n  'meta': 91,\n  'numlock': 144,\n  'scrolllock': 145,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  \"'\": 222,\n  'f1': 112,\n  'f2': 113,\n  'f3': 114,\n  'f4': 115,\n  'f5': 116,\n  'f6': 117,\n  'f7': 118,\n  'f8': 119,\n  'f9': 120,\n  'f10': 121,\n  'f11': 122,\n  'f12': 123,\n  'f13': 124,\n  'f14': 125,\n  'f15': 126,\n  'f16': 127,\n  'f17': 128,\n  'f18': 129,\n  'f19': 130,\n  'f20': 131,\n}\n\nexport function isHotkey(hotkey: string, event: KeyboardEventLike): boolean {\n  return compareHotkey(parseHotkey(hotkey), event)\n}\n\nfunction parseHotkey(hotkey: string): HotKey {\n  // Ensure that all the modifiers are set to false unless the hotkey has them.\n  const parsedHotkey: HotKey = {\n    altKey: false,\n    ctrlKey: false,\n    metaKey: false,\n    shiftKey: false,\n  }\n\n  // Special case to handle the `+` key since we use it as a separator.\n  const hotkeySegments = hotkey.replace('++', '+add').split('+')\n\n  for (const rawHotkeySegment of hotkeySegments) {\n    const optional =\n      rawHotkeySegment.endsWith('?') && rawHotkeySegment.length > 1\n    const hotkeySegment = optional\n      ? rawHotkeySegment.slice(0, -1)\n      : rawHotkeySegment\n    const keyName = toKeyName(hotkeySegment)\n    const modifier = modifiers[keyName]\n    const alias = aliases[hotkeySegment]\n    const code = keyCodes[keyName]\n\n    if (\n      hotkeySegment.length > 1 &&\n      modifier === undefined &&\n      alias === undefined &&\n      code === undefined\n    ) {\n      throw new TypeError(`Unknown modifier: \"${hotkeySegment}\"`)\n    }\n\n    if (hotkeySegments.length === 1 || modifier === undefined) {\n      parsedHotkey.key = keyName\n      parsedHotkey.keyCode = toKeyCode(hotkeySegment)\n    }\n\n    if (modifier !== undefined) {\n      parsedHotkey[modifier] = optional ? null : true\n    }\n  }\n\n  return parsedHotkey\n}\n\nfunction compareHotkey(\n  parsedHotkey: HotKey,\n  event: KeyboardEventLike,\n): boolean {\n  const matchingModifiers =\n    (parsedHotkey.altKey != null\n      ? parsedHotkey.altKey === event.altKey\n      : true) &&\n    (parsedHotkey.ctrlKey != null\n      ? parsedHotkey.ctrlKey === event.ctrlKey\n      : true) &&\n    (parsedHotkey.metaKey != null\n      ? parsedHotkey.metaKey === event.metaKey\n      : true) &&\n    (parsedHotkey.shiftKey != null\n      ? parsedHotkey.shiftKey === event.shiftKey\n      : true)\n\n  if (!matchingModifiers) {\n    return false\n  }\n\n  if (parsedHotkey.keyCode !== undefined && event.keyCode !== undefined) {\n    if (parsedHotkey.keyCode === 91 && event.keyCode === 93) {\n      return true\n    }\n\n    return parsedHotkey.keyCode === event.keyCode\n  }\n\n  return (\n    parsedHotkey.keyCode === event.keyCode ||\n    parsedHotkey.key === event.key.toLowerCase()\n  )\n}\n\nfunction toKeyCode(name: string): number {\n  const keyName = toKeyName(name)\n  const keyCode = keyCodes[keyName] ?? keyName.toUpperCase().charCodeAt(0)\n\n  return keyCode\n}\n\nfunction toKeyName(name: string): string {\n  const keyName = name.toLowerCase()\n\n  return aliases[keyName] ?? keyName\n}\n","import {isHotkey} from '../internal-utils/is-hotkey'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport {isEmptyTextBlock} from '../utils/util.is-empty-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst arrowDownOnLonelyBlockObject = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isArrowDown = isHotkey('ArrowDown', event.originEvent)\n\n    if (!isArrowDown) {\n      return false\n    }\n\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    if (!collapsedSelection) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const nextBlock = selectors.getNextBlock(snapshot)\n\n    return focusBlockObject && !nextBlock\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst arrowUpOnLonelyBlockObject = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isArrowUp = isHotkey('ArrowUp', event.originEvent)\n\n    if (!isArrowUp) {\n      return false\n    }\n\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    if (!collapsedSelection) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const previousBlock = selectors.getPreviousBlock(snapshot)\n\n    return focusBlockObject && !previousBlock\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'before',\n      }),\n    ],\n  ],\n})\n\nconst breakingBlockObject = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    return collapsedSelection && focusBlockObject !== undefined\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst clickingAboveLonelyBlockObject = defineBehavior({\n  on: 'mouse.click',\n  guard: ({snapshot, event}) => {\n    if (snapshot.context.readOnly) {\n      return false\n    }\n\n    if (\n      snapshot.context.selection &&\n      !selectors.isSelectionCollapsed(snapshot)\n    ) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n    const previousBlock = selectors.getPreviousBlock({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n\n    return (\n      event.position.isEditor &&\n      event.position.block === 'start' &&\n      focusBlockObject &&\n      !previousBlock\n    )\n  },\n  actions: [\n    ({snapshot, event}) => [\n      raise({\n        type: 'select',\n        at: event.position.selection,\n      }),\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'before',\n        select: 'start',\n      }),\n    ],\n  ],\n})\n\nconst clickingBelowLonelyBlockObject = defineBehavior({\n  on: 'mouse.click',\n  guard: ({snapshot, event}) => {\n    if (snapshot.context.readOnly) {\n      return false\n    }\n\n    if (\n      snapshot.context.selection &&\n      !selectors.isSelectionCollapsed(snapshot)\n    ) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n    const nextBlock = selectors.getNextBlock({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n\n    return (\n      event.position.isEditor &&\n      event.position.block === 'end' &&\n      focusBlockObject &&\n      !nextBlock\n    )\n  },\n  actions: [\n    ({snapshot, event}) => [\n      raise({\n        type: 'select',\n        at: event.position.selection,\n      }),\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n        select: 'start',\n      }),\n    ],\n  ],\n})\n\nconst deletingEmptyTextBlockAfterBlockObject = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const previousBlock = selectors.getPreviousBlock(snapshot)\n\n    if (!focusTextBlock || !selectionCollapsed || !previousBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(snapshot.context, focusTextBlock.node) &&\n      !isTextBlock(snapshot.context, previousBlock.node)\n    ) {\n      return {focusTextBlock, previousBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, previousBlock}) => [\n      raise({\n        type: 'delete.block',\n        at: focusTextBlock.path,\n      }),\n      raise({\n        type: 'select',\n        at: {\n          anchor: {path: previousBlock.path, offset: 0},\n          focus: {path: previousBlock.path, offset: 0},\n        },\n      }),\n    ],\n  ],\n})\n\nconst deletingEmptyTextBlockBeforeBlockObject = defineBehavior({\n  on: 'delete.forward',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const nextBlock = selectors.getNextBlock(snapshot)\n\n    if (!focusTextBlock || !selectionCollapsed || !nextBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(snapshot.context, focusTextBlock.node) &&\n      !isTextBlock(snapshot.context, nextBlock.node)\n    ) {\n      return {focusTextBlock, nextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, nextBlock}) => [\n      raise({\n        type: 'delete.block',\n        at: focusTextBlock.path,\n      }),\n      raise({\n        type: 'select',\n        at: {\n          anchor: {path: nextBlock.path, offset: 0},\n          focus: {path: nextBlock.path, offset: 0},\n        },\n      }),\n    ],\n  ],\n})\n\nexport const coreBlockObjectBehaviors = {\n  arrowDownOnLonelyBlockObject,\n  arrowUpOnLonelyBlockObject,\n  breakingBlockObject,\n  clickingAboveLonelyBlockObject,\n  clickingBelowLonelyBlockObject,\n  deletingEmptyTextBlockAfterBlockObject,\n  deletingEmptyTextBlockBeforeBlockObject,\n}\n","import {isHotkey} from '../internal-utils/is-hotkey'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const coreDecoratorBehaviors = {\n  strongShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      isHotkey('mod+b', event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'strong',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'strong'})]],\n  }),\n  emShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      isHotkey('mod+i', event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'em',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'em'})]],\n  }),\n  underlineShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      isHotkey('mod+u', event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'underline',\n      ),\n    actions: [\n      () => [raise({type: 'decorator.toggle', decorator: 'underline'})],\n    ],\n  }),\n  codeShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      isHotkey(\"mod+'\", event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'code',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'code'})]],\n  }),\n}\n","import * as selectors from '../selectors'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const coreDndBehaviors = [\n  /**\n   * When dragging over the drag origin, we don't want to show the caret in the\n   * text.\n   */\n  defineBehavior({\n    on: 'drag.dragover',\n    guard: ({snapshot, event}) => {\n      const dragOrigin = snapshot.beta.internalDrag?.origin\n      const draggingOverDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(event.position.selection)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n        : false\n\n      return draggingOverDragOrigin\n    },\n    actions: [],\n  }),\n]\n","import * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst breakingAtTheEndOfTextBlock = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n    if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed) {\n      return false\n    }\n\n    const atTheEndOfBlock =\n      selectors.isAtTheEndOfBlock(focusTextBlock)(snapshot)\n\n    const focusListItem = focusTextBlock.node.listItem\n    const focusLevel = focusTextBlock.node.level\n\n    if (atTheEndOfBlock) {\n      return {focusListItem, focusLevel}\n    }\n\n    return false\n  },\n  actions: [\n    ({snapshot}, {focusListItem, focusLevel}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n          markDefs: [],\n          listItem: focusListItem,\n          level: focusLevel,\n          style: snapshot.context.schema.styles[0]?.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst breakingAtTheStartOfTextBlock = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n    if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed) {\n      return false\n    }\n\n    const focusSpan = selectors.getFocusSpan(snapshot)\n\n    const focusDecorators = focusSpan?.node.marks?.filter(\n      (mark) =>\n        snapshot.context.schema.decorators.some(\n          (decorator) => decorator.name === mark,\n        ) ?? [],\n    )\n    const focusAnnotations =\n      focusSpan?.node.marks?.filter(\n        (mark) =>\n          !snapshot.context.schema.decorators.some(\n            (decorator) => decorator.name === mark,\n          ),\n      ) ?? []\n    const focusListItem = focusTextBlock.node.listItem\n    const focusLevel = focusTextBlock.node.level\n\n    const atTheStartOfBlock =\n      selectors.isAtTheStartOfBlock(focusTextBlock)(snapshot)\n\n    if (atTheStartOfBlock) {\n      return {focusAnnotations, focusDecorators, focusListItem, focusLevel}\n    }\n\n    return false\n  },\n  actions: [\n    (\n      {snapshot},\n      {focusAnnotations, focusDecorators, focusListItem, focusLevel},\n    ) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              marks: focusAnnotations.length === 0 ? focusDecorators : [],\n              text: '',\n            },\n          ],\n          listItem: focusListItem,\n          level: focusLevel,\n          style: snapshot.context.schema.styles[0]?.name,\n        },\n        placement: 'before',\n        select: 'none',\n      }),\n    ],\n  ],\n})\n\nconst breakingEntireDocument = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    if (!selectors.isSelectionExpanded(snapshot)) {\n      return false\n    }\n\n    const firstBlock = selectors.getFirstBlock(snapshot)\n    const lastBlock = selectors.getLastBlock(snapshot)\n\n    if (!firstBlock || !lastBlock) {\n      return false\n    }\n\n    const firstBlockStartPoint = utils.getBlockStartPoint({\n      context: snapshot.context,\n      block: firstBlock,\n    })\n    const selectionStartPoint = utils.getSelectionStartPoint(\n      snapshot.context.selection,\n    )\n    const lastBlockEndPoint = utils.getBlockEndPoint({\n      context: snapshot.context,\n      block: lastBlock,\n    })\n    const selectionEndPoint = utils.getSelectionEndPoint(\n      snapshot.context.selection,\n    )\n\n    if (\n      utils.isEqualSelectionPoints(firstBlockStartPoint, selectionStartPoint) &&\n      utils.isEqualSelectionPoints(lastBlockEndPoint, selectionEndPoint)\n    ) {\n      return {selection: snapshot.context.selection}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selection}) => [\n      raise({\n        type: 'delete',\n        at: selection,\n      }),\n    ],\n  ],\n})\n\nconst breakingEntireBlocks = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    if (!selectors.isSelectionExpanded(snapshot)) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n    const selectionStartBlock = selectors.getSelectionStartBlock(snapshot)\n    const selectionEndBlock = selectors.getSelectionEndBlock(snapshot)\n\n    if (!selectionStartBlock || !selectionEndBlock) {\n      return false\n    }\n\n    const startBlockStartPoint = utils.getBlockStartPoint({\n      context: snapshot.context,\n      block: selectionStartBlock,\n    })\n    const selectionStartPoint = utils.getSelectionStartPoint(\n      snapshot.context.selection,\n    )\n    const endBlockEndPoint = utils.getBlockEndPoint({\n      context: snapshot.context,\n      block: selectionEndBlock,\n    })\n    const selectionEndPoint = utils.getSelectionEndPoint(\n      snapshot.context.selection,\n    )\n\n    if (\n      utils.isEqualSelectionPoints(selectionStartPoint, startBlockStartPoint) &&\n      utils.isEqualSelectionPoints(selectionEndPoint, endBlockEndPoint)\n    ) {\n      return {selectedBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    ({snapshot}, {selectedBlocks}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n        },\n        placement: 'before',\n        select: 'start',\n      }),\n      ...selectedBlocks.map((block) =>\n        raise({\n          type: 'delete.block',\n          at: block.path,\n        }),\n      ),\n    ],\n  ],\n})\n\nexport const coreInsertBreakBehaviors = {\n  breakingAtTheEndOfTextBlock,\n  breakingAtTheStartOfTextBlock,\n  breakingEntireDocument,\n  breakingEntireBlocks,\n}\n","import {isHotkey} from '../internal-utils/is-hotkey'\nimport {isListBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport {isEmptyTextBlock} from '../utils/util.is-empty-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst MAX_LIST_LEVEL = 10\n\nconst clearListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const focusSpan = selectors.getFocusSpan(snapshot)\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      snapshot.context.selection?.focus.offset === 0\n\n    if (atTheBeginningOfBLock && focusTextBlock.node.level === 1) {\n      return {focusTextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock}) => [\n      raise({\n        type: 'block.unset',\n        props: ['listItem', 'level'],\n        at: focusTextBlock.path,\n      }),\n    ],\n  ],\n})\n\nconst unindentListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const focusSpan = selectors.getFocusSpan(snapshot)\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      snapshot.context.selection?.focus.offset === 0\n\n    if (\n      atTheBeginningOfBLock &&\n      focusTextBlock.node.level !== undefined &&\n      focusTextBlock.node.level > 1\n    ) {\n      return {focusTextBlock, level: focusTextBlock.node.level - 1}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, level}) => [\n      raise({\n        type: 'block.set',\n        props: {level},\n        at: focusTextBlock.path,\n      }),\n    ],\n  ],\n})\n\nconst clearListOnEnter = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusListBlock = selectors.getFocusListBlock(snapshot)\n\n    if (\n      !selectionCollapsed ||\n      !focusListBlock ||\n      !isEmptyTextBlock(snapshot.context, focusListBlock.node)\n    ) {\n      return false\n    }\n\n    return {focusListBlock}\n  },\n  actions: [\n    (_, {focusListBlock}) => [\n      raise({\n        type: 'block.unset',\n        props: ['listItem', 'level'],\n        at: focusListBlock.path,\n      }),\n    ],\n  ],\n})\n\nconst indentListOnTab = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isTab = isHotkey('Tab', event.originEvent)\n\n    if (!isTab) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n    const selectedListBlocks = selectedBlocks.flatMap((block) =>\n      isListBlock(snapshot.context, block.node)\n        ? [\n            {\n              node: block.node,\n              path: block.path,\n            },\n          ]\n        : [],\n    )\n\n    if (selectedListBlocks.length === selectedBlocks.length) {\n      return {selectedListBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selectedListBlocks}) =>\n      selectedListBlocks.map((selectedListBlock) =>\n        raise({\n          type: 'block.set',\n          props: {\n            level: Math.min(\n              MAX_LIST_LEVEL,\n              Math.max(1, selectedListBlock.node.level + 1),\n            ),\n          },\n          at: selectedListBlock.path,\n        }),\n      ),\n  ],\n})\n\nconst unindentListOnShiftTab = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isShiftTab = isHotkey('Shift+Tab', event.originEvent)\n\n    if (!isShiftTab) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n    const selectedListBlocks = selectedBlocks.flatMap((block) =>\n      isListBlock(snapshot.context, block.node)\n        ? [\n            {\n              node: block.node,\n              path: block.path,\n            },\n          ]\n        : [],\n    )\n\n    if (selectedListBlocks.length === selectedBlocks.length) {\n      return {selectedListBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selectedListBlocks}) =>\n      selectedListBlocks.map((selectedListBlock) =>\n        raise({\n          type: 'block.set',\n          props: {\n            level: Math.min(\n              MAX_LIST_LEVEL,\n              Math.max(1, selectedListBlock.node.level - 1),\n            ),\n          },\n          at: selectedListBlock.path,\n        }),\n      ),\n  ],\n})\n\nexport const coreListBehaviors = {\n  clearListOnBackspace,\n  unindentListOnBackspace,\n  clearListOnEnter,\n  indentListOnTab,\n  unindentListOnShiftTab,\n}\n","import {corePriority} from '../priority/priority.core'\nimport {coreAnnotationBehaviors} from './behavior.core.annotations'\nimport {coreBlockObjectBehaviors} from './behavior.core.block-objects'\nimport {coreDecoratorBehaviors} from './behavior.core.decorators'\nimport {coreDndBehaviors} from './behavior.core.dnd'\nimport {coreInsertBreakBehaviors} from './behavior.core.insert-break'\nimport {coreListBehaviors} from './behavior.core.lists'\n\nexport const coreBehaviorsConfig = [\n  coreAnnotationBehaviors.addAnnotationOnCollapsedSelection,\n  coreDecoratorBehaviors.strongShortcut,\n  coreDecoratorBehaviors.emShortcut,\n  coreDecoratorBehaviors.underlineShortcut,\n  coreDecoratorBehaviors.codeShortcut,\n  ...coreDndBehaviors,\n  coreBlockObjectBehaviors.clickingAboveLonelyBlockObject,\n  coreBlockObjectBehaviors.clickingBelowLonelyBlockObject,\n  coreBlockObjectBehaviors.arrowDownOnLonelyBlockObject,\n  coreBlockObjectBehaviors.arrowUpOnLonelyBlockObject,\n  coreBlockObjectBehaviors.breakingBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockAfterBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockBeforeBlockObject,\n  coreListBehaviors.clearListOnBackspace,\n  coreListBehaviors.unindentListOnBackspace,\n  coreListBehaviors.clearListOnEnter,\n  coreListBehaviors.indentListOnTab,\n  coreListBehaviors.unindentListOnShiftTab,\n  coreInsertBreakBehaviors.breakingAtTheEndOfTextBlock,\n  coreInsertBreakBehaviors.breakingAtTheStartOfTextBlock,\n  coreInsertBreakBehaviors.breakingEntireDocument,\n  coreInsertBreakBehaviors.breakingEntireBlocks,\n].map((behavior) => ({\n  behavior,\n  priority: corePriority,\n}))\n","import {isActiveAnnotation} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractAnnotationBehaviors = [\n  defineBehavior({\n    on: 'annotation.toggle',\n    guard: ({snapshot, event}) =>\n      isActiveAnnotation(event.annotation.name)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'annotation.remove', annotation: event.annotation}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'annotation.toggle',\n    guard: ({snapshot, event}) =>\n      !isActiveAnnotation(event.annotation.name)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'annotation.add', annotation: event.annotation}),\n      ],\n    ],\n  }),\n]\n","import {isActiveDecorator} from '../selectors'\nimport {blockOffsetsToSelection} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractDecoratorBehaviors = [\n  defineBehavior({\n    on: 'decorator.toggle',\n    guard: ({snapshot, event}) => isActiveDecorator(event.decorator)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'decorator.remove', decorator: event.decorator}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'decorator.toggle',\n    guard: ({snapshot, event}) => {\n      const manualSelection = event.at\n        ? blockOffsetsToSelection({\n            context: snapshot.context,\n            offsets: event.at,\n          })\n        : null\n\n      if (manualSelection) {\n        return !isActiveDecorator(event.decorator)({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: manualSelection,\n          },\n        })\n      }\n\n      return !isActiveDecorator(event.decorator)(snapshot)\n    },\n    actions: [\n      ({event}) => [\n        raise({\n          ...event,\n          type: 'decorator.add',\n        }),\n      ],\n    ],\n  }),\n]\n","import * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractDeleteBehaviors = [\n  defineBehavior({\n    on: 'delete.text',\n    guard: ({snapshot, event}) => {\n      const selection = utils.blockOffsetsToSelection({\n        context: snapshot.context,\n        offsets: event.at,\n      })\n\n      if (!selection) {\n        return false\n      }\n\n      const trimmedSelection = selectors.getTrimmedSelection({\n        beta: {hasTag: () => false, internalDrag: undefined},\n        context: {\n          converters: [],\n          schema: snapshot.context.schema,\n          keyGenerator: snapshot.context.keyGenerator,\n          activeDecorators: [],\n          readOnly: false,\n          value: snapshot.context.value,\n          selection,\n        },\n      })\n\n      if (!trimmedSelection) {\n        return false\n      }\n\n      return {\n        selection: trimmedSelection,\n      }\n    },\n    actions: [(_, {selection}) => [raise({type: 'delete', at: selection})]],\n  }),\n]\n","import {getFocusTextBlock} from '../selectors'\nimport {isEmptyTextBlock} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractInsertBehaviors = [\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'before',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block, index) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: index === 0 ? 'before' : 'after',\n            select: 'end',\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'after',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: 'after',\n            select: 'end',\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({snapshot, event}) => {\n      if (event.placement !== 'auto') {\n        return false\n      }\n\n      const focusTextBlock = getFocusTextBlock(snapshot)\n\n      if (!focusTextBlock) {\n        return false\n      }\n\n      return {focusTextBlock}\n    },\n    actions: [\n      ({snapshot, event}, {focusTextBlock}) =>\n        event.blocks.length === 1\n          ? [\n              raise({\n                type: 'insert.block',\n                block: event.blocks[0],\n                placement: 'auto',\n                select: 'end',\n              }),\n            ]\n          : isEmptyTextBlock(snapshot.context, focusTextBlock.node)\n            ? event.blocks.map((block, index) =>\n                raise({\n                  type: 'insert.block',\n                  block,\n                  placement: index === 0 ? 'auto' : 'after',\n                  select: 'end',\n                }),\n              )\n            : event.blocks.flatMap((block, index) =>\n                index === 0\n                  ? [\n                      raise({\n                        type: 'split',\n                      }),\n                      raise({\n                        type: 'select.previous block',\n                        select: 'end',\n                      }),\n                      raise({\n                        type: 'insert.block',\n                        block,\n                        placement: 'auto',\n                        select: 'end',\n                      }),\n                    ]\n                  : index === event.blocks.length - 1\n                    ? [\n                        raise({\n                          type: 'select.next block',\n                          select: 'start',\n                        }),\n                        raise({\n                          type: 'insert.block',\n                          block,\n                          placement: 'auto',\n                          select: 'end',\n                        }),\n                      ]\n                    : [\n                        raise({\n                          type: 'insert.block',\n                          block,\n                          placement: 'after',\n                          select: 'end',\n                        }),\n                      ],\n              ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'auto',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block, index) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: index === 0 ? 'auto' : 'after',\n            select: 'end',\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.break',\n    actions: [() => [raise({type: 'split'})]],\n  }),\n  defineBehavior({\n    on: 'insert.soft break',\n    actions: [() => [raise({type: 'insert.text', text: '\\n'})]],\n  }),\n]\n","export const keyIs = {\n  lineBreak: (event) => event.key === 'Enter' && event.shiftKey,\n} satisfies Record<string, KeyboardEventPredicate>\n\ntype KeyboardEventPredicate = (\n  event: Pick<\n    KeyboardEvent,\n    'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n  >,\n) => boolean\n","import {keyIs} from '../internal-utils/key-is'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractKeyboardBehaviors = [\n  /**\n   * On WebKit, Shift+Enter results in an `insertParagraph` input event rather\n   * than an `insertLineBreak` input event. This Behavior makes sure we catch\n   * that `keyboard.keydown` event beforehand and raise an `insert.soft break` manually.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({event}) => keyIs.lineBreak(event.originEvent),\n    actions: [() => [raise({type: 'insert.soft break'})]],\n  }),\n]\n","import {getSelectedTextBlocks, isActiveListItem} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractListItemBehaviors = [\n  defineBehavior({\n    on: 'list item.add',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      ({event}, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.set',\n            at: block.path,\n            props: {\n              level: 1,\n              listItem: event.listItem,\n            },\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.remove',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      (_, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.unset',\n            at: block.path,\n            props: ['level', 'listItem'],\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.toggle',\n    guard: ({snapshot, event}) => isActiveListItem(event.listItem)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'list item.remove', listItem: event.listItem}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.toggle',\n    guard: ({snapshot, event}) => !isActiveListItem(event.listItem)(snapshot),\n    actions: [\n      ({event}) => [raise({type: 'list item.add', listItem: event.listItem})],\n    ],\n  }),\n]\n","import {getNextBlock, getPreviousBlock} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractMoveBehaviors = [\n  defineBehavior({\n    on: 'move.block up',\n    guard: ({snapshot, event}) => {\n      const previousBlock = getPreviousBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (previousBlock) {\n        return {previousBlock}\n      }\n\n      return false\n    },\n    actions: [\n      ({event}, {previousBlock}) => [\n        raise({\n          type: 'move.block',\n          at: event.at,\n          to: previousBlock.path,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'move.block down',\n    guard: ({snapshot, event}) => {\n      const nextBlock = getNextBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (nextBlock) {\n        return {nextBlock}\n      }\n\n      return false\n    },\n    actions: [\n      ({event}, {nextBlock}) => [\n        raise({\n          type: 'move.block',\n          at: event.at,\n          to: nextBlock.path,\n        }),\n      ],\n    ],\n  }),\n]\n","import {getNextBlock, getPreviousBlock} from '../selectors'\nimport {getBlockEndPoint, getBlockStartPoint} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractSelectBehaviors = [\n  defineBehavior({\n    on: 'select.previous block',\n    guard: ({snapshot, event}) => {\n      const previousBlock = getPreviousBlock(snapshot)\n\n      if (!previousBlock) {\n        return false\n      }\n\n      const point =\n        event.select === 'end'\n          ? getBlockEndPoint({\n              context: snapshot.context,\n              block: previousBlock,\n            })\n          : getBlockStartPoint({\n              context: snapshot.context,\n              block: previousBlock,\n            })\n\n      return {\n        selection: {\n          anchor: point,\n          focus: point,\n        },\n      }\n    },\n    actions: [\n      (_, {selection}) => [\n        raise({\n          type: 'select',\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'select.next block',\n    guard: ({snapshot, event}) => {\n      const nextBlock = getNextBlock(snapshot)\n\n      if (!nextBlock) {\n        return false\n      }\n\n      const point =\n        event.select === 'end'\n          ? getBlockEndPoint({\n              context: snapshot.context,\n              block: nextBlock,\n            })\n          : getBlockStartPoint({\n              context: snapshot.context,\n              block: nextBlock,\n            })\n\n      return {selection: {anchor: point, focus: point}}\n    },\n    actions: [\n      (_, {selection}) => [\n        raise({\n          type: 'select',\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n]\n","import {isTextBlock, parseBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport {getSelectionStartPoint} from '../utils'\nimport {getBlockEndPoint} from '../utils/util.get-block-end-point'\nimport {getSelectionEndPoint} from '../utils/util.get-selection-end-point'\nimport {sliceBlocks} from '../utils/util.slice-blocks'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractSplitBehaviors = [\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) => {\n      if (!snapshot.context.selection) {\n        return false\n      }\n\n      const selectionStartPoint = getSelectionStartPoint(\n        snapshot.context.selection,\n      )\n      const selectionEndPoint = getSelectionEndPoint(snapshot.context.selection)\n\n      const focusTextBlock = selectors.getFocusTextBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: selectionStartPoint,\n            focus: selectionEndPoint,\n          },\n        },\n      })\n\n      if (focusTextBlock) {\n        const blockEndPoint = getBlockEndPoint({\n          context: snapshot.context,\n          block: focusTextBlock,\n        })\n        const newTextBlockSelection = {\n          anchor: selectionEndPoint,\n          focus: blockEndPoint,\n        }\n        const newTextBlock = parseBlock({\n          block: sliceBlocks({\n            context: {\n              ...snapshot.context,\n              selection: newTextBlockSelection,\n            },\n            blocks: [focusTextBlock.node],\n          }).at(0),\n          context: snapshot.context,\n          options: {refreshKeys: true, validateFields: true},\n        })\n\n        if (!newTextBlock || !isTextBlock(snapshot.context, newTextBlock)) {\n          return false\n        }\n\n        return {\n          newTextBlock,\n          newTextBlockSelection,\n          selection: {\n            anchor: selectionStartPoint,\n            focus: blockEndPoint,\n          },\n        }\n      }\n\n      const focusBlockObject = selectors.getFocusBlockObject({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: selectionStartPoint,\n            focus: selectionEndPoint,\n          },\n        },\n      })\n\n      if (focusBlockObject) {\n        const newTextBlock = parseBlock({\n          block: {\n            _type: snapshot.context.schema.block.name,\n            children: [],\n          },\n          context: snapshot.context,\n          options: {refreshKeys: true, validateFields: true},\n        })\n\n        if (!newTextBlock) {\n          return false\n        }\n\n        return {\n          newTextBlock,\n          newTextBlockSelection: {\n            anchor: selectionEndPoint,\n            focus: selectionEndPoint,\n          },\n          selection: snapshot.context.selection,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      (_, {newTextBlock, selection}) => [\n        raise({\n          type: 'delete',\n          at: selection,\n        }),\n        raise({\n          type: 'insert.block',\n          block: newTextBlock,\n          placement: 'after',\n          select: 'start',\n        }),\n      ],\n    ],\n  }),\n]\n","import {getSelectedTextBlocks, isActiveStyle} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractStyleBehaviors = [\n  defineBehavior({\n    on: 'style.add',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      ({event}, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.set',\n            at: block.path,\n            props: {\n              style: event.style,\n            },\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'style.remove',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      (_, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.unset',\n            at: block.path,\n            props: ['style'],\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'style.toggle',\n    guard: ({snapshot, event}) => isActiveStyle(event.style)(snapshot),\n    actions: [({event}) => [raise({type: 'style.remove', style: event.style})]],\n  }),\n  defineBehavior({\n    on: 'style.toggle',\n    guard: ({snapshot, event}) => !isActiveStyle(event.style)(snapshot),\n    actions: [({event}) => [raise({type: 'style.add', style: event.style})]],\n  }),\n]\n","import type {ConverterEvent} from '../converters/converter.types'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport type {PickFromUnion} from '../type-utils'\nimport {getTextBlockText} from '../utils'\nimport {abstractAnnotationBehaviors} from './behavior.abstract.annotation'\nimport {abstractDecoratorBehaviors} from './behavior.abstract.decorator'\nimport {abstractDeleteBehaviors} from './behavior.abstract.delete'\nimport {abstractInsertBehaviors} from './behavior.abstract.insert'\nimport {abstractKeyboardBehaviors} from './behavior.abstract.keyboard'\nimport {abstractListItemBehaviors} from './behavior.abstract.list-item'\nimport {abstractMoveBehaviors} from './behavior.abstract.move'\nimport {abstractSelectBehaviors} from './behavior.abstract.select'\nimport {abstractSplitBehaviors} from './behavior.abstract.split'\nimport {abstractStyleBehaviors} from './behavior.abstract.style'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst raiseDeserializationSuccessOrFailure = defineBehavior({\n  on: 'deserialize',\n  guard: ({snapshot, event}) => {\n    let success:\n      | PickFromUnion<ConverterEvent, 'type', 'deserialization.success'>\n      | undefined\n    const failures: Array<\n      PickFromUnion<ConverterEvent, 'type', 'deserialization.failure'>\n    > = []\n\n    for (const converter of snapshot.context.converters) {\n      const data = event.originEvent.originEvent.dataTransfer.getData(\n        converter.mimeType,\n      )\n\n      if (!data) {\n        continue\n      }\n\n      const deserializeEvent = converter.deserialize({\n        snapshot,\n        event: {type: 'deserialize', data},\n      })\n\n      if (deserializeEvent.type === 'deserialization.success') {\n        success = deserializeEvent\n        break\n      } else {\n        failures.push(deserializeEvent)\n      }\n    }\n\n    if (!success) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: '*/*',\n        reason: failures.map((failure) => failure.reason).join(', '),\n      } as const\n    }\n\n    return success\n  },\n  actions: [\n    ({event}, deserializeEvent) => [\n      raise({\n        ...deserializeEvent,\n        originEvent: event.originEvent,\n      }),\n    ],\n  ],\n})\n\nconst raiseSerializationSuccessOrFailure = defineBehavior({\n  on: 'serialize',\n  guard: ({snapshot, event}) => {\n    if (snapshot.context.converters.length === 0) {\n      return false\n    }\n\n    const serializeEvents = snapshot.context.converters.map((converter) =>\n      converter.serialize({\n        snapshot,\n        event: {\n          ...event,\n          originEvent: event.originEvent.type,\n        },\n      }),\n    )\n\n    if (serializeEvents.length === 0) {\n      return false\n    }\n\n    return serializeEvents\n  },\n  actions: [\n    ({event}, serializeEvents) =>\n      serializeEvents.map((serializeEvent) => {\n        return raise({\n          ...serializeEvent,\n          originEvent: event.originEvent,\n        })\n      }),\n  ],\n})\n\nexport const abstractBehaviors = [\n  defineBehavior({\n    on: 'clipboard.copy',\n    guard: ({snapshot}) => {\n      const focusSpan = selectors.getFocusSpan(snapshot)\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n      return focusSpan && selectionCollapsed\n    },\n    actions: [],\n  }),\n  defineBehavior({\n    on: 'clipboard.copy',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.cut',\n    guard: ({snapshot}) => {\n      const focusSpan = selectors.getFocusSpan(snapshot)\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n      return focusSpan && selectionCollapsed\n    },\n    actions: [],\n  }),\n  defineBehavior({\n    on: 'clipboard.cut',\n    guard: ({snapshot}) => {\n      return snapshot.context.selection\n        ? {\n            selection: snapshot.context.selection,\n          }\n        : false\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n        raise({\n          type: 'delete',\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'drag.dragstart',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'serialization.success',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            event.originEvent.originEvent.dataTransfer.setData(\n              event.mimeType,\n              event.data,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'serialization.failure',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            console.warn(\n              `Serialization of ${event.mimeType} failed with reason \"${event.reason}\"`,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'drag.drop',\n    guard: ({snapshot, event}) => {\n      const dragOrigin = snapshot.beta.internalDrag?.origin\n      const dropPosition = event.position.selection\n      const droppingOnDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(dropPosition)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n        : false\n      return droppingOnDragOrigin\n    },\n    actions: [],\n  }),\n  defineBehavior({\n    on: 'drag.drop',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'select',\n          at: event.position.selection,\n        }),\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.success',\n    guard: ({snapshot, event}) => {\n      if (\n        event.originEvent.type !== 'drag.drop' ||\n        snapshot.beta.internalDrag === undefined\n      ) {\n        return false\n      }\n\n      const dragOrigin = snapshot.beta.internalDrag.origin\n      const dropPosition = event.originEvent.position.selection\n      const droppingOnDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(dropPosition)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n        : false\n\n      const draggingEntireBlocks = selectors.isSelectingEntireBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragOrigin.selection,\n        },\n      })\n\n      const draggedBlocks = selectors.getSelectedBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragOrigin.selection,\n        },\n      })\n\n      if (!droppingOnDragOrigin) {\n        return {\n          draggingEntireBlocks,\n          draggedBlocks,\n          dragOrigin,\n          originEvent: event.originEvent,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      (\n        {event},\n        {draggingEntireBlocks, draggedBlocks, dragOrigin, originEvent},\n      ) => [\n        ...(draggingEntireBlocks\n          ? draggedBlocks.map((block) =>\n              raise({\n                type: 'delete.block',\n                at: block.path,\n              }),\n            )\n          : [\n              raise({\n                type: 'delete',\n                at: dragOrigin.selection,\n              }),\n            ]),\n        raise({\n          type: 'insert.blocks',\n          blocks: event.data,\n          placement: draggingEntireBlocks\n            ? originEvent.position.block === 'start'\n              ? 'before'\n              : originEvent.position.block === 'end'\n                ? 'after'\n                : 'auto'\n            : 'auto',\n        }),\n      ],\n    ],\n  }),\n  /**\n   * If we are pasting text/plain into a text block then we can probably\n   * assume that the intended behavior is that the pasted text inherits\n   * formatting from the text it's pasted into.\n   */\n  defineBehavior({\n    on: 'deserialization.success',\n    guard: ({snapshot, event}) => {\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n\n      if (\n        focusTextBlock &&\n        event.mimeType === 'text/plain' &&\n        event.originEvent.type === 'clipboard.paste'\n      ) {\n        const activeDecorators = snapshot.context.activeDecorators\n        const activeAnnotations = selectors.getActiveAnnotations(snapshot)\n\n        return {\n          activeAnnotations,\n          activeDecorators,\n          textRuns: event.data.flatMap((block) =>\n            isTextBlock(snapshot.context, block)\n              ? [getTextBlockText(block)]\n              : [],\n          ),\n        }\n      }\n\n      return false\n    },\n    actions: [\n      (_, {activeAnnotations, activeDecorators, textRuns}) =>\n        textRuns.flatMap((textRun, index) =>\n          index !== textRuns.length - 1\n            ? [\n                raise({\n                  type: 'insert.span',\n                  text: textRun,\n                  decorators: activeDecorators,\n                  annotations: activeAnnotations.map(\n                    ({_key, _type, ...value}) => ({\n                      name: _type,\n                      value,\n                    }),\n                  ),\n                }),\n                raise({type: 'insert.break'}),\n              ]\n            : [\n                raise({\n                  type: 'insert.span',\n                  text: textRun,\n                  decorators: activeDecorators,\n                  annotations: activeAnnotations.map(\n                    ({_key, _type, ...value}) => ({\n                      name: _type,\n                      value,\n                    }),\n                  ),\n                }),\n              ],\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.success',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'insert.blocks',\n          blocks: event.data,\n          placement: 'auto',\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.failure',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            console.warn(\n              `Deserialization of ${event.mimeType} failed with reason \"${event.reason}\"`,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.paste',\n    guard: ({snapshot}) => {\n      return snapshot.context.selection &&\n        selectors.isSelectionExpanded(snapshot)\n        ? {selection: snapshot.context.selection}\n        : false\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'delete',\n          at: selection,\n        }),\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.paste',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'input.*',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  ...abstractAnnotationBehaviors,\n  ...abstractDecoratorBehaviors,\n  ...abstractDeleteBehaviors,\n  ...abstractInsertBehaviors,\n  ...abstractKeyboardBehaviors,\n  ...abstractListItemBehaviors,\n  ...abstractMoveBehaviors,\n  ...abstractStyleBehaviors,\n  ...abstractSelectBehaviors,\n  ...abstractSplitBehaviors,\n  raiseDeserializationSuccessOrFailure,\n  raiseSerializationSuccessOrFailure,\n]\n","import type {KeyedSegment, PortableTextBlock} from '@sanity/types'\nimport type {TextUnit} from 'slate'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport type {MIMEType} from '../internal-utils/mime-type'\nimport type {OmitFromUnion, PickFromUnion, StrictExtract} from '../type-utils'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {BlockWithOptionalKey} from '../types/block-with-optional-key'\nimport type {EditorSelection} from '../types/editor'\n\n/**\n * @beta\n */\nexport type BehaviorEvent =\n  | SyntheticBehaviorEvent\n  | NativeBehaviorEvent\n  | CustomBehaviorEvent\n\nexport type BehaviorEventTypeNamespace =\n  | SyntheticBehaviorEventNamespace\n  | NativeBehaviorEventNamespace\n  | CustomBehaviorEventNamespace\n\ntype NamespacedBehaviorEventType<\n  TNamespace extends BehaviorEventTypeNamespace | '',\n> = TNamespace extends ''\n  ? BehaviorEvent['type']\n  : Extract<BehaviorEvent['type'], TNamespace | `${TNamespace}.${string}`>\n\n/**************************************\n * External events\n **************************************/\n\ntype ExternalBehaviorEventNamespace = 'blur' | 'focus' | 'insert'\n\ntype ExternalBehaviorEventType<\n  TNamespace extends ExternalBehaviorEventNamespace,\n  TType extends string = '',\n> = TType extends '' ? `${TNamespace}` : `${TNamespace}.${TType}`\n\nexport type ExternalBehaviorEvent =\n  | {\n      type: ExternalBehaviorEventType<'blur'>\n    }\n  | {\n      type: ExternalBehaviorEventType<'focus'>\n    }\n  | {\n      type: ExternalBehaviorEventType<'insert', 'block object'>\n      placement: InsertPlacement\n      blockObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | SyntheticBehaviorEvent\n  | CustomBehaviorEvent\n\n/**************************************\n * Synthetic events\n **************************************/\n\nconst syntheticBehaviorEventTypes = [\n  'annotation.add',\n  'annotation.remove',\n  'block.set',\n  'block.unset',\n  'decorator.add',\n  'decorator.remove',\n  'delete',\n  'delete.backward',\n  'delete.block',\n  'delete.forward',\n  'history.redo',\n  'history.undo',\n  'insert.inline object',\n  'insert.block',\n  'insert.span',\n  'insert.text',\n  'move.backward',\n  'move.block',\n  'move.forward',\n  'select',\n] as const\n\ntype SyntheticBehaviorEventType =\n  | (typeof syntheticBehaviorEventTypes)[number]\n  | (typeof abstractBehaviorEventTypes)[number]\n\ntype SyntheticBehaviorEventNamespace =\n  ExtractNamespace<SyntheticBehaviorEventType>\n\n/**\n * @beta\n */\nexport type SyntheticBehaviorEvent =\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.add'>\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.remove'>\n      annotation: {\n        name: string\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'block.set'>\n      at: [KeyedSegment]\n      props: Record<string, unknown>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'block.unset'>\n      at: [KeyedSegment]\n      props: Array<string>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.add'>\n      decorator: string\n      at?: {\n        anchor: BlockOffset\n        focus: BlockOffset\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.remove'>\n      decorator: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete'>\n      at: NonNullable<EditorSelection>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.backward'>\n      unit: TextUnit\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.block'>\n      at: [KeyedSegment]\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.forward'>\n      unit: TextUnit\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'history.redo'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'history.undo'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.inline object'>\n      inlineObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.block'>\n      block: BlockWithOptionalKey\n      placement: InsertPlacement\n      select?: 'start' | 'end' | 'none'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.span'>\n      text: string\n      annotations?: Array<{\n        name: string\n        value: {[prop: string]: unknown}\n      }>\n      decorators?: Array<string>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.text'>\n      text: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.backward'>\n      distance: number\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.block'>\n      at: [KeyedSegment]\n      to: [KeyedSegment]\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.forward'>\n      distance: number\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select'>\n      at: EditorSelection\n    }\n  | AbstractBehaviorEvent\n\nexport type InsertPlacement = 'auto' | 'after' | 'before'\n\nexport function isSyntheticBehaviorEvent(\n  event: BehaviorEvent,\n): event is OmitFromUnion<\n  SyntheticBehaviorEvent,\n  'type',\n  AbstractBehaviorEventType\n> {\n  return (\n    !isCustomBehaviorEvent(event) &&\n    !isNativeBehaviorEvent(event) &&\n    !isAbstractBehaviorEvent(event)\n  )\n}\n\n/**************************************\n * Abstract events\n **************************************/\n\nconst abstractBehaviorEventTypes = [\n  'annotation.toggle',\n  'decorator.toggle',\n  'delete.text',\n  'deserialize',\n  'deserialization.success',\n  'deserialization.failure',\n  'insert.blocks',\n  'insert.break',\n  'insert.soft break',\n  'list item.add',\n  'list item.remove',\n  'list item.toggle',\n  'move.block down',\n  'move.block up',\n  'select.previous block',\n  'select.next block',\n  'serialize',\n  'serialization.success',\n  'serialization.failure',\n  'split',\n  'style.add',\n  'style.remove',\n  'style.toggle',\n] as const\n\nexport type AbstractBehaviorEventType =\n  (typeof abstractBehaviorEventTypes)[number]\n\ntype AbstractBehaviorEvent =\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.toggle'>\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.toggle'>\n      decorator: string\n      at?: {anchor: BlockOffset; focus: BlockOffset}\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.text'>\n      at: {\n        anchor: BlockOffset\n        focus: BlockOffset\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialize'>\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialize'>\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialization.success'>\n      mimeType: MIMEType\n      data: Array<PortableTextBlock>\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialization.failure'>\n      mimeType: MIMEType\n      reason: string\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialization.success'>\n      mimeType: MIMEType\n      data: string\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialization.failure'>\n      mimeType: MIMEType\n      reason: string\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.blocks'>\n      blocks: Array<BlockWithOptionalKey>\n      placement: InsertPlacement\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.break'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.soft break'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'list item.add'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'list item.remove'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'list item.toggle'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.block down'>\n      at: [KeyedSegment]\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.block up'>\n      at: [KeyedSegment]\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select.previous block'>\n      select?: 'start' | 'end'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select.next block'>\n      select?: 'start' | 'end'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'split'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'style.add'>\n      style: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'style.remove'>\n      style: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'style.toggle'>\n      style: string\n    }\n\nexport function isAbstractBehaviorEvent(\n  event: BehaviorEvent,\n): event is AbstractBehaviorEvent {\n  return (abstractBehaviorEventTypes as readonly string[]).includes(event.type)\n}\n\n/**************************************\n * Native events\n **************************************/\n\nconst nativeBehaviorEventTypes = [\n  'clipboard.copy',\n  'clipboard.cut',\n  'clipboard.paste',\n  'drag.dragstart',\n  'drag.drag',\n  'drag.dragend',\n  'drag.dragenter',\n  'drag.dragover',\n  'drag.dragleave',\n  'drag.drop',\n  'input.*',\n  'keyboard.keydown',\n  'keyboard.keyup',\n  'mouse.click',\n] as const\n\ntype NativeBehaviorEventType = (typeof nativeBehaviorEventTypes)[number]\n\ntype NativeBehaviorEventNamespace = ExtractNamespace<NativeBehaviorEventType>\n\nexport function isNativeBehaviorEvent(\n  event: BehaviorEvent,\n): event is NativeBehaviorEvent {\n  return (nativeBehaviorEventTypes as readonly string[]).includes(event.type)\n}\n\n/**\n * @beta\n */\nexport type NativeBehaviorEvent =\n  | ClipboardBehaviorEvent\n  | DragBehaviorEvent\n  | InputBehaviorEvent\n  | KeyboardBehaviorEvent\n  | MouseBehaviorEvent\n\ntype ClipboardBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.copy'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.cut'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.paste'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n\ntype DragBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragstart'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.drag'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragend'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragenter'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragover'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.drop'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragleave'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n\n/**\n * Used to represent native InputEvents that hold a DataTransfer object.\n *\n * These can either be one of:\n *\n * - insertFromPaste\n * - insertFromPasteAsQuotation\n * - insertFromDrop\n * - insertReplacementText\n * - insertFromYank\n */\nexport type InputBehaviorEvent = {\n  type: StrictExtract<NativeBehaviorEventType, 'input.*'>\n  originEvent: {\n    dataTransfer: DataTransfer\n  }\n}\n\nexport type KeyboardBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'keyboard.keydown'>\n      originEvent: Pick<\n        KeyboardEvent,\n        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n      >\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'keyboard.keyup'>\n      originEvent: Pick<\n        KeyboardEvent,\n        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n      >\n    }\n\nexport type MouseBehaviorEvent = {\n  type: StrictExtract<NativeBehaviorEventType, 'mouse.click'>\n  position: EventPosition\n}\n\n/**************************************\n * Custom events\n **************************************/\n\ntype CustomBehaviorEventNamespace = 'custom'\n\ntype CustomBehaviorEventType<\n  TNamespace extends CustomBehaviorEventNamespace,\n  TType extends string = '',\n> = TType extends '' ? `${TNamespace}` : `${TNamespace}.${TType}`\n\n/**\n * @beta\n */\nexport type CustomBehaviorEvent<\n  TPayload extends Record<string, unknown> = Record<string, unknown>,\n  TType extends string = string,\n  TInternalType extends CustomBehaviorEventType<\n    'custom',\n    TType\n  > = CustomBehaviorEventType<'custom', TType>,\n> = {\n  type: TInternalType\n} & TPayload\n\nexport function isCustomBehaviorEvent(\n  event: BehaviorEvent,\n): event is CustomBehaviorEvent {\n  return event.type.startsWith('custom.')\n}\n\n/**************************************\n * Resolve behavior event\n **************************************/\n\nexport type ResolveBehaviorEvent<\n  TBehaviorEventType extends\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'],\n  TPayload extends Record<string, unknown> = Record<string, unknown>,\n> = TBehaviorEventType extends '*'\n  ? BehaviorEvent\n  : TBehaviorEventType extends `${infer TNamespace}.*`\n    ? TNamespace extends BehaviorEventTypeNamespace\n      ? PickFromUnion<\n          BehaviorEvent,\n          'type',\n          NamespacedBehaviorEventType<TNamespace>\n        >\n      : never\n    : TBehaviorEventType extends `custom.${infer TType}`\n      ? CustomBehaviorEvent<TPayload, TType>\n      : TBehaviorEventType extends BehaviorEvent['type']\n        ? PickFromUnion<BehaviorEvent, 'type', TBehaviorEventType>\n        : never\n\ntype ExtractNamespace<TType extends string> =\n  TType extends `${infer Namespace}.${string}` ? Namespace : TType\n","import type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorSnapshot} from '../editor/editor-snapshot'\nimport {withApplyingBehaviorOperations} from '../editor/with-applying-behavior-operations'\nimport {withUndoStep} from '../editor/with-undo-step'\nimport {debugWithName} from '../internal-utils/debug'\nimport {performOperation} from '../operations/behavior.operations'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {abstractBehaviors} from './behavior.abstract'\nimport type {BehaviorAction} from './behavior.types.action'\nimport type {Behavior} from './behavior.types.behavior'\nimport {\n  isAbstractBehaviorEvent,\n  isCustomBehaviorEvent,\n  isNativeBehaviorEvent,\n  isSyntheticBehaviorEvent,\n  type BehaviorEvent,\n} from './behavior.types.event'\n\nconst debug = debugWithName('behaviors:event')\n\nfunction eventCategory(event: BehaviorEvent) {\n  return isNativeBehaviorEvent(event)\n    ? 'native'\n    : isAbstractBehaviorEvent(event)\n      ? 'synthetic'\n      : isCustomBehaviorEvent(event)\n        ? 'custom'\n        : 'synthetic'\n}\n\nexport function performEvent({\n  mode,\n  behaviors,\n  remainingEventBehaviors,\n  event,\n  editor,\n  keyGenerator,\n  schema,\n  getSnapshot,\n  nativeEvent,\n}: {\n  mode: 'raise' | 'execute' | 'forward'\n  behaviors: Array<Behavior>\n  remainingEventBehaviors: Array<Behavior>\n  event: BehaviorEvent\n  editor: PortableTextSlateEditor\n  keyGenerator: () => string\n  schema: EditorSchema\n  getSnapshot: () => EditorSnapshot\n  nativeEvent:\n    | {\n        preventDefault: () => void\n      }\n    | undefined\n}) {\n  debug(`(${mode}:${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n  const eventBehaviors = [\n    ...remainingEventBehaviors,\n    ...abstractBehaviors,\n  ].filter((behavior) => {\n    // Catches all events\n    if (behavior.on === '*') {\n      return true\n    }\n\n    const [listenedNamespace] =\n      behavior.on.includes('*') && behavior.on.includes('.')\n        ? behavior.on.split('.')\n        : [undefined]\n    const [eventNamespace] = event.type.includes('.')\n      ? event.type.split('.')\n      : [undefined]\n\n    // Handles scenarios like a Behavior listening for `select.*` and the event\n    // `select.block` is fired.\n    if (\n      listenedNamespace !== undefined &&\n      eventNamespace !== undefined &&\n      listenedNamespace === eventNamespace\n    ) {\n      return true\n    }\n\n    // Handles scenarios like a Behavior listening for `select.*` and the event\n    // `select` is fired.\n    if (\n      listenedNamespace !== undefined &&\n      eventNamespace === undefined &&\n      listenedNamespace === event.type\n    ) {\n      return true\n    }\n\n    return behavior.on === event.type\n  })\n\n  if (eventBehaviors.length === 0 && isSyntheticBehaviorEvent(event)) {\n    nativeEvent?.preventDefault()\n\n    withApplyingBehaviorOperations(editor, () => {\n      debug(`(execute:${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n      performOperation({\n        context: {\n          keyGenerator,\n          schema,\n        },\n        operation: {\n          ...event,\n          editor,\n        },\n      })\n    })\n\n    editor.onChange()\n\n    return\n  }\n\n  const guardSnapshot = getSnapshot()\n\n  let nativeEventPrevented = false\n  let defaultBehaviorOverwritten = false\n  let eventBehaviorIndex = -1\n\n  for (const eventBehavior of eventBehaviors) {\n    eventBehaviorIndex++\n\n    let shouldRun = false\n\n    try {\n      shouldRun =\n        eventBehavior.guard === undefined ||\n        eventBehavior.guard({\n          snapshot: guardSnapshot,\n          event,\n        })\n    } catch (error) {\n      console.error(\n        new Error(\n          `Evaluating guard for \"${event.type}\" failed due to: ${error.message}`,\n        ),\n      )\n    }\n\n    if (!shouldRun) {\n      continue\n    }\n\n    // This Behavior now \"owns\" the event and we can consider the default\n    // action prevented\n    defaultBehaviorOverwritten = true\n\n    for (const actionSet of eventBehavior.actions) {\n      const actionsSnapshot = getSnapshot()\n\n      let actions: Array<BehaviorAction> = []\n\n      try {\n        actions = actionSet(\n          {\n            snapshot: actionsSnapshot,\n            event,\n          },\n          shouldRun,\n        )\n      } catch (error) {\n        console.error(\n          new Error(\n            `Evaluating actions for \"${event.type}\" failed due to: ${error.message}`,\n          ),\n        )\n      }\n\n      if (actions.length === 0) {\n        continue\n      }\n\n      if (actions.some((action) => action.type === 'execute')) {\n        // Since at least one action is about to `execute` changes in the editor,\n        // we set up a new undo step.\n        // All actions performed recursively from now will be squashed into this\n        // undo step\n        withUndoStep(editor, () => {\n          for (const action of actions) {\n            if (action.type === 'effect') {\n              nativeEventPrevented = true\n\n              try {\n                action.effect()\n              } catch (error) {\n                console.error(\n                  new Error(\n                    `Executing effect as a result of \"${event.type}\" failed due to: ${error.message}`,\n                  ),\n                )\n              }\n\n              continue\n            }\n\n            if (action.type === 'forward') {\n              const remainingEventBehaviors = eventBehaviors.slice(\n                eventBehaviorIndex + 1,\n              )\n\n              performEvent({\n                mode: 'forward',\n                behaviors,\n                remainingEventBehaviors: remainingEventBehaviors,\n                event: action.event,\n                editor,\n                keyGenerator,\n                schema,\n                getSnapshot,\n                nativeEvent,\n              })\n\n              continue\n            }\n\n            if (action.type === 'raise') {\n              nativeEventPrevented = true\n\n              performEvent({\n                mode: 'raise',\n                behaviors,\n                remainingEventBehaviors: behaviors,\n                event: action.event,\n                editor,\n                keyGenerator,\n                schema,\n                getSnapshot,\n                nativeEvent,\n              })\n\n              continue\n            }\n\n            nativeEventPrevented = true\n\n            performEvent({\n              mode: 'execute',\n              behaviors,\n              remainingEventBehaviors: isAbstractBehaviorEvent(action.event)\n                ? behaviors\n                : [],\n              event: action.event,\n              editor,\n              keyGenerator,\n              schema,\n              getSnapshot,\n              nativeEvent: undefined,\n            })\n          }\n        })\n\n        continue\n      }\n\n      for (const action of actions) {\n        if (action.type === 'effect') {\n          nativeEventPrevented = true\n\n          try {\n            action.effect()\n          } catch (error) {\n            console.error(\n              new Error(\n                `Executing effect as a result of \"${event.type}\" failed due to: ${error.message}`,\n              ),\n            )\n          }\n\n          continue\n        }\n\n        if (action.type === 'forward') {\n          const remainingEventBehaviors = eventBehaviors.slice(\n            eventBehaviorIndex + 1,\n          )\n\n          performEvent({\n            mode: 'forward',\n            behaviors,\n            remainingEventBehaviors: remainingEventBehaviors,\n            event: action.event,\n            editor,\n            keyGenerator,\n            schema,\n            getSnapshot,\n            nativeEvent,\n          })\n\n          continue\n        }\n\n        if (action.type === 'raise') {\n          nativeEventPrevented = true\n\n          performEvent({\n            mode: 'raise',\n            behaviors,\n            remainingEventBehaviors: behaviors,\n            event: action.event,\n            editor,\n            keyGenerator,\n            schema,\n            getSnapshot,\n            nativeEvent,\n          })\n\n          continue\n        }\n\n        if (action.type === 'execute') {\n          console.error('Unexpected action type: `execute`')\n        }\n      }\n    }\n\n    break\n  }\n\n  if (!defaultBehaviorOverwritten && isSyntheticBehaviorEvent(event)) {\n    nativeEvent?.preventDefault()\n\n    withApplyingBehaviorOperations(editor, () => {\n      debug(`(execute:${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n      performOperation({\n        context: {keyGenerator, schema},\n        operation: {\n          ...event,\n          editor,\n        },\n      })\n    })\n\n    editor.onChange()\n  } else if (nativeEventPrevented) {\n    nativeEvent?.preventDefault()\n  }\n}\n","import type {EditorPriority} from './priority.types'\n\nexport function sortByPriority<\n  T extends {\n    priority?: EditorPriority\n  },\n>(items: Array<T>): Array<T> {\n  if (items.length === 0) {\n    return []\n  }\n\n  // Separate items with and without priority\n  const itemsWithPriority = items.filter(\n    (item): item is T & {priority: EditorPriority} =>\n      item.priority !== undefined,\n  )\n  const itemsWithoutPriority = items.filter(\n    (item) => item.priority === undefined,\n  )\n\n  if (itemsWithPriority.length === 0) {\n    return items\n  }\n\n  // Create a map of items by their priority ID\n  const itemsByPriorityId = new Map(\n    itemsWithPriority.map((item) => [item.priority.id, item]),\n  )\n\n  // Build the dependency graph\n  const graph = new Map<string, Set<string>>()\n  const inDegree = new Map<string, number>()\n\n  // Helper function to ensure a node exists in the graph\n  function ensureNode(id: string) {\n    if (!graph.has(id)) {\n      graph.set(id, new Set())\n      inDegree.set(id, 0)\n    }\n  }\n\n  // Initialize graph and in-degree for all items\n  for (const item of itemsWithPriority) {\n    const id = item.priority.id\n    ensureNode(id)\n  }\n\n  // Helper function to add an edge to the graph\n  function addEdge(fromId: string, toId: string) {\n    if (!graph.has(fromId) || !graph.has(toId)) return\n    graph.get(fromId)?.add(toId)\n    inDegree.set(toId, (inDegree.get(toId) ?? 0) + 1)\n  }\n\n  // Add edges based on references\n  for (const item of itemsWithPriority) {\n    const id = item.priority.id\n    const visited = new Set<string>()\n    let ref = item.priority.reference\n\n    while (ref) {\n      const refId = ref.priority.id\n      ensureNode(refId)\n\n      // Check for cyclic reference\n      if (visited.has(refId)) {\n        throw new Error('Circular dependency detected in priorities')\n      }\n      visited.add(refId)\n\n      if (ref.importance === 'higher') {\n        // Reference must come before current item\n        addEdge(id, refId)\n      } else {\n        // Current item must come before reference\n        addEdge(refId, id)\n      }\n\n      ref = ref.priority.reference\n    }\n  }\n\n  const queue: string[] = []\n\n  // Find all nodes with no incoming edges\n  for (const [id, degree] of inDegree) {\n    if (degree === 0) {\n      queue.push(id)\n    }\n  }\n\n  const result: T[] = []\n\n  // Perform topological sort\n  while (queue.length > 0) {\n    const currentId = queue.shift()!\n    const currentItem = itemsByPriorityId.get(currentId)\n    if (currentItem) {\n      result.push(currentItem)\n    }\n\n    // Decrease in-degree of neighbors\n    for (const neighborId of graph.get(currentId) ?? []) {\n      const newDegree = (inDegree.get(neighborId) ?? 0) - 1\n      inDegree.set(neighborId, newDegree)\n      if (newDegree === 0) {\n        queue.push(neighborId)\n      }\n    }\n  }\n\n  // Add any remaining items that weren't processed\n  for (const item of itemsWithPriority) {\n    if (!result.includes(item)) {\n      result.push(item)\n    }\n  }\n\n  // Append items without priority at the end in their original order\n  return [...result, ...itemsWithoutPriority]\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {Descendant} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\n\nexport function slateChildrenToBlocks(\n  schema: EditorSchema,\n  value: Array<Descendant>,\n): Array<PortableTextBlock> {\n  const blocks: Array<PortableTextBlock> = new Array(value.length)\n\n  for (let blockIndex = 0; blockIndex < value.length; blockIndex++) {\n    const descendant = value[blockIndex]\n\n    if (descendant._type !== schema.block.name) {\n      blocks[blockIndex] = {\n        _key: descendant._key,\n        _type: descendant._type,\n        ...('value' in descendant && typeof descendant.value === 'object'\n          ? descendant.value\n          : {}),\n      }\n      continue\n    }\n\n    const children = 'children' in descendant ? descendant.children : []\n    const processedChildren = new Array(children.length)\n\n    for (let childIndex = 0; childIndex < children.length; childIndex++) {\n      const child = children[childIndex]\n      processedChildren[childIndex] =\n        child._type === schema.span.name\n          ? child\n          : {\n              _key: child._key,\n              _type: child._type,\n              ...('value' in child && typeof child.value === 'object'\n                ? child.value\n                : {}),\n            }\n    }\n\n    blocks[blockIndex] = {\n      ...descendant,\n      children: processedChildren,\n    }\n  }\n\n  return blocks\n}\n","import {Editor} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\n\nexport function getActiveDecorators({\n  schema,\n  slateEditorInstance,\n}: {\n  schema: EditorSchema\n  slateEditorInstance: PortableTextSlateEditor\n}) {\n  const decorators = schema.decorators.map((decorator) => decorator.name)\n\n  const marks =\n    {\n      ...(Editor.marks(slateEditorInstance) ?? {}),\n    }.marks ?? []\n\n  return marks.filter((mark) => decorators.includes(mark))\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {Converter} from '../converters/converter.types'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport {slateChildrenToBlocks} from '../internal-utils/slate-children-to-blocks'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport type {EditorSelection, PortableTextSlateEditor} from '../types/editor'\nimport type {HasTag} from './editor-machine'\nimport type {EditorSchema} from './editor-schema'\nimport {getActiveDecorators} from './get-active-decorators'\n\n/**\n * @public\n */\nexport type EditorContext = {\n  activeDecorators: Array<string>\n  converters: Array<Converter>\n  keyGenerator: () => string\n  readOnly: boolean\n  schema: EditorSchema\n  selection: EditorSelection\n  value: Array<PortableTextBlock>\n}\n\n/**\n * @public\n */\nexport type EditorSnapshot = {\n  context: EditorContext\n  /**\n   * @beta\n   * Do not rely on this externally\n   */\n  beta: {\n    hasTag: HasTag\n    internalDrag:\n      | {\n          origin: Pick<EventPosition, 'selection'>\n        }\n      | undefined\n  }\n}\n\nexport function createEditorSnapshot({\n  converters,\n  editor,\n  keyGenerator,\n  readOnly,\n  schema,\n  hasTag,\n  internalDrag,\n}: {\n  converters: Array<Converter>\n  editor: PortableTextSlateEditor\n  keyGenerator: () => string\n  readOnly: boolean\n  schema: EditorSchema\n  hasTag: HasTag\n  internalDrag:\n    | {\n        origin: Pick<EventPosition, 'selection'>\n      }\n    | undefined\n}) {\n  const value = slateChildrenToBlocks(schema, editor.children)\n  const selection = editor.selection\n    ? slateRangeToSelection({\n        schema,\n        editor,\n        range: editor.selection,\n      })\n    : null\n\n  const context = {\n    activeDecorators: getActiveDecorators({\n      schema,\n      slateEditorInstance: editor,\n    }),\n    converters,\n    keyGenerator,\n    readOnly,\n    schema,\n    selection,\n    value,\n  } satisfies EditorContext\n\n  return {\n    context,\n    beta: {\n      hasTag,\n      internalDrag,\n    },\n  } satisfies EditorSnapshot\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {Transforms} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  setup,\n  type ActorRefFrom,\n} from 'xstate'\nimport type {BehaviorConfig} from '../behaviors/behavior.config'\nimport {coreBehaviorsConfig} from '../behaviors/behavior.core'\nimport {performEvent} from '../behaviors/behavior.perform-event'\nimport type {BehaviorEvent} from '../behaviors/behavior.types.event'\nimport type {Converter} from '../converters/converter.types'\nimport {debugWithName} from '../internal-utils/debug'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport {sortByPriority} from '../priority/priority.sort'\nimport type {NamespaceEvent, OmitFromUnion} from '../type-utils'\nimport type {\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport {createEditorSnapshot} from './editor-snapshot'\nimport type {\n  EditorEmittedEvent,\n  MutationEvent,\n  PatchEvent,\n} from './relay-machine'\n\nexport * from 'xstate/guards'\n\nconst debug = debugWithName('editor machine')\n\n/**\n * @public\n */\nexport type PatchesEvent = {\n  type: 'patches'\n  patches: Array<Patch>\n  snapshot: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @public\n */\nexport type ExternalEditorEvent =\n  | {\n      type: 'update readOnly'\n      readOnly: boolean\n    }\n  | {\n      type: 'update maxBlocks'\n      maxBlocks: number | undefined\n    }\n  | PatchesEvent\n\ntype InternalPatchEvent = NamespaceEvent<PatchEvent, 'internal'> & {\n  operationId?: string\n  value: Array<PortableTextBlock>\n}\n\n/**\n * @internal\n */\nexport type EditorActor = ActorRefFrom<typeof editorMachine>\nexport type HasTag = ReturnType<EditorActor['getSnapshot']>['hasTag']\n\n/**\n * @internal\n */\nexport type InternalEditorEvent =\n  | ExternalEditorEvent\n  | {\n      type: 'add behavior'\n      behaviorConfig: BehaviorConfig\n    }\n  | {\n      type: 'remove behavior'\n      behaviorConfig: BehaviorConfig\n    }\n  | {\n      type: 'blur'\n      editor: PortableTextSlateEditor\n    }\n  | {\n      type: 'focus'\n      editor: PortableTextSlateEditor\n    }\n  | {\n      type: 'normalizing'\n    }\n  | {\n      type: 'update selection'\n      selection: EditorSelection\n    }\n  | {\n      type: 'done normalizing'\n    }\n  | {\n      type: 'done syncing value'\n    }\n  | {\n      type: 'syncing value'\n    }\n  | {\n      type: 'behavior event'\n      behaviorEvent: BehaviorEvent\n      editor: PortableTextSlateEditor\n      nativeEvent?: {preventDefault: () => void}\n    }\n  | MutationEvent\n  | InternalPatchEvent\n  | {\n      type: 'dragstart'\n      origin: Pick<EventPosition, 'selection'>\n      ghost?: HTMLElement\n    }\n  | {type: 'dragend'}\n  | {type: 'drop'}\n\n/**\n * @internal\n */\nexport type InternalEditorEmittedEvent =\n  | OmitFromUnion<EditorEmittedEvent, 'type', 'patch'>\n  | InternalPatchEvent\n  | PatchesEvent\n\n/**\n * @internal\n */\nexport const editorMachine = setup({\n  types: {\n    context: {} as {\n      behaviors: Set<BehaviorConfig>\n      converters: Set<Converter>\n      getLegacySchema: () => PortableTextMemberSchemaTypes\n      keyGenerator: () => string\n      pendingEvents: Array<InternalPatchEvent | MutationEvent>\n      pendingIncomingPatchesEvents: Array<PatchesEvent>\n      schema: EditorSchema\n      initialReadOnly: boolean\n      maxBlocks: number | undefined\n      selection: EditorSelection\n      initialValue: Array<PortableTextBlock> | undefined\n      internalDrag?: {\n        ghost?: HTMLElement\n        origin: Pick<EventPosition, 'selection'>\n      }\n      slateEditor?: PortableTextSlateEditor\n    },\n    events: {} as InternalEditorEvent,\n    emitted: {} as InternalEditorEmittedEvent,\n    input: {} as {\n      converters?: Array<Converter>\n      getLegacySchema: () => PortableTextMemberSchemaTypes\n      keyGenerator: () => string\n      maxBlocks?: number\n      readOnly?: boolean\n      schema: EditorSchema\n      initialValue?: Array<PortableTextBlock>\n    },\n    tags: {} as 'dragging internally',\n  },\n  actions: {\n    'add behavior to context': assign({\n      behaviors: ({context, event}) => {\n        assertEvent(event, 'add behavior')\n\n        return new Set([...context.behaviors, event.behaviorConfig])\n      },\n    }),\n    'remove behavior from context': assign({\n      behaviors: ({context, event}) => {\n        assertEvent(event, 'remove behavior')\n\n        context.behaviors.delete(event.behaviorConfig)\n\n        return new Set([...context.behaviors])\n      },\n    }),\n    'emit patch event': enqueueActions(({event, enqueue}) => {\n      assertEvent(event, 'internal.patch')\n\n      enqueue.emit(event)\n    }),\n    'emit mutation event': emit(({event}) => {\n      assertEvent(event, 'mutation')\n      return event\n    }),\n    'emit read only': emit({type: 'read only'}),\n    'emit editable': emit({type: 'editable'}),\n    'defer event': assign({\n      pendingEvents: ({context, event}) => {\n        assertEvent(event, ['internal.patch', 'mutation'])\n        return [...context.pendingEvents, event]\n      },\n    }),\n    'emit pending events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingEvents) {\n        enqueue.emit(event)\n      }\n    }),\n    'emit ready': emit({type: 'ready'}),\n    'clear pending events': assign({\n      pendingEvents: [],\n    }),\n    'defer incoming patches': assign({\n      pendingIncomingPatchesEvents: ({context, event}) => {\n        return event.type === 'patches'\n          ? [...context.pendingIncomingPatchesEvents, event]\n          : context.pendingIncomingPatchesEvents\n      },\n    }),\n    'emit pending incoming patches': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingIncomingPatchesEvents) {\n        enqueue.emit(event)\n      }\n    }),\n    'clear pending incoming patches': assign({\n      pendingIncomingPatchesEvents: [],\n    }),\n    'handle blur': ({event}) => {\n      assertEvent(event, 'blur')\n\n      try {\n        ReactEditor.blur(event.editor)\n      } catch (error) {\n        console.error(new Error(`Failed to blur editor: ${error.message}`))\n      }\n    },\n    'handle focus': ({context}) => {\n      if (!context.slateEditor) {\n        console.error('No Slate editor found to focus')\n        return\n      }\n\n      try {\n        const currentSelection = context.slateEditor.selection\n        ReactEditor.focus(context.slateEditor)\n        if (currentSelection) {\n          Transforms.select(context.slateEditor, currentSelection)\n        }\n      } catch (error) {\n        console.error(new Error(`Failed to focus editor: ${error.message}`))\n      }\n    },\n    'handle behavior event': ({context, event, self}) => {\n      assertEvent(event, ['behavior event'])\n\n      try {\n        const behaviors = sortByPriority([\n          ...context.behaviors.values(),\n          ...coreBehaviorsConfig,\n        ]).map((config) => config.behavior)\n\n        performEvent({\n          mode: 'raise',\n          behaviors,\n          remainingEventBehaviors: behaviors,\n          event: event.behaviorEvent,\n          editor: event.editor,\n          keyGenerator: context.keyGenerator,\n          schema: context.schema,\n          getSnapshot: () =>\n            createEditorSnapshot({\n              converters: [...context.converters],\n              editor: event.editor,\n              keyGenerator: context.keyGenerator,\n              readOnly: self.getSnapshot().matches({'edit mode': 'read only'}),\n              schema: context.schema,\n              hasTag: (tag) => self.getSnapshot().hasTag(tag),\n              internalDrag: context.internalDrag,\n            }),\n          nativeEvent: event.nativeEvent,\n        })\n      } catch (error) {\n        console.error(\n          new Error(\n            `Raising \"${event.behaviorEvent.type}\" failed due to: ${error.message}`,\n          ),\n        )\n      }\n    },\n  },\n  guards: {\n    'slate is busy': ({context}) => {\n      if (!context.slateEditor) {\n        return false\n      }\n\n      return context.slateEditor.operations.length > 0\n    },\n  },\n}).createMachine({\n  id: 'editor',\n  context: ({input}) => ({\n    behaviors: new Set([]),\n    converters: new Set(input.converters ?? []),\n    getLegacySchema: input.getLegacySchema,\n    keyGenerator: input.keyGenerator,\n    pendingEvents: [],\n    pendingIncomingPatchesEvents: [],\n    schema: input.schema,\n    selection: null,\n    initialReadOnly: input.readOnly ?? false,\n    maxBlocks: input.maxBlocks,\n    initialValue: input.initialValue,\n  }),\n  on: {\n    'add behavior': {actions: 'add behavior to context'},\n    'remove behavior': {actions: 'remove behavior from context'},\n    'update maxBlocks': {\n      actions: assign({maxBlocks: ({event}) => event.maxBlocks}),\n    },\n    'update selection': {\n      actions: [\n        assign({selection: ({event}) => event.selection}),\n        emit(({event}) => ({...event, type: 'selection'})),\n      ],\n    },\n  },\n  type: 'parallel',\n  states: {\n    'edit mode': {\n      initial: 'read only',\n      states: {\n        'read only': {\n          initial: 'determine initial edit mode',\n          on: {\n            'behavior event': {\n              actions: 'handle behavior event',\n              guard: ({event}) =>\n                event.behaviorEvent.type === 'clipboard.copy' ||\n                event.behaviorEvent.type === 'mouse.click' ||\n                event.behaviorEvent.type === 'serialize' ||\n                event.behaviorEvent.type === 'serialization.failure' ||\n                event.behaviorEvent.type === 'serialization.success' ||\n                event.behaviorEvent.type === 'select',\n            },\n          },\n          states: {\n            'determine initial edit mode': {\n              entry: [\n                () => {\n                  debug(\n                    'entry: edit mode->read only->determine initial edit mode',\n                  )\n                },\n              ],\n              exit: [\n                () => {\n                  debug(\n                    'exit: edit mode->read only->determine initial edit mode',\n                  )\n                },\n              ],\n              on: {\n                'done syncing value': [\n                  {\n                    target: '#editor.edit mode.read only.read only',\n                    guard: ({context}) => context.initialReadOnly,\n                  },\n                  {\n                    target: '#editor.edit mode.editable',\n                  },\n                ],\n              },\n            },\n            'read only': {\n              entry: [\n                () => {\n                  debug('entry: edit mode->read only->read only')\n                },\n              ],\n              exit: [\n                () => {\n                  debug('exit: edit mode->read only->read only')\n                },\n              ],\n              on: {\n                'update readOnly': {\n                  guard: ({event}) => !event.readOnly,\n                  target: '#editor.edit mode.editable',\n                  actions: ['emit editable'],\n                },\n              },\n            },\n          },\n        },\n        'editable': {\n          on: {\n            'update readOnly': {\n              guard: ({event}) => event.readOnly,\n              target: '#editor.edit mode.read only.read only',\n              actions: ['emit read only'],\n            },\n            'behavior event': {\n              actions: 'handle behavior event',\n            },\n            'blur': {\n              actions: 'handle blur',\n            },\n            'focus': {\n              target: '.focusing',\n              actions: [assign({slateEditor: ({event}) => event.editor})],\n            },\n          },\n          initial: 'idle',\n          states: {\n            'idle': {\n              entry: [\n                () => {\n                  debug('entry: edit mode->editable->idle')\n                },\n              ],\n              exit: [\n                () => {\n                  debug('exit: edit mode->editable-idle')\n                },\n              ],\n              on: {\n                dragstart: {\n                  actions: [\n                    assign({\n                      internalDrag: ({event}) => ({\n                        ghost: event.ghost,\n                        origin: event.origin,\n                      }),\n                    }),\n                  ],\n                  target: 'dragging internally',\n                },\n              },\n            },\n            'focusing': {\n              initial: 'checking if busy',\n              states: {\n                'checking if busy': {\n                  entry: [\n                    () => {\n                      debug(\n                        'entry: edit mode->editable->focusing->checking if busy',\n                      )\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug(\n                        'exit: edit mode->editable->focusing->checking if busy',\n                      )\n                    },\n                  ],\n                  always: [\n                    {\n                      guard: 'slate is busy',\n                      target: 'busy',\n                    },\n                    {\n                      target: '#editor.edit mode.editable.idle',\n                      actions: ['handle focus'],\n                    },\n                  ],\n                },\n                'busy': {\n                  entry: [\n                    () => {\n                      debug('entry: edit mode->editable->focusing-busy')\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: edit mode->editable->focusing->busy')\n                    },\n                  ],\n                  after: {\n                    10: {\n                      target: 'checking if busy',\n                    },\n                  },\n                },\n              },\n            },\n            'dragging internally': {\n              entry: [\n                () => {\n                  debug('entry: edit mode->editable->dragging internally')\n                },\n              ],\n              exit: [\n                () => {\n                  debug('exit: edit mode->editable->dragging internally')\n                },\n                ({context}) => {\n                  if (context.internalDrag?.ghost) {\n                    try {\n                      context.internalDrag.ghost.parentNode?.removeChild(\n                        context.internalDrag.ghost,\n                      )\n                    } catch (error) {\n                      console.error(\n                        new Error(\n                          `Removing the internal drag ghost failed due to: ${error.message}`,\n                        ),\n                      )\n                    }\n                  }\n                },\n                assign({internalDrag: undefined}),\n              ],\n              tags: ['dragging internally'],\n              on: {\n                dragend: {target: 'idle'},\n                drop: {target: 'idle'},\n              },\n            },\n          },\n        },\n      },\n    },\n    'setup': {\n      initial: 'setting up',\n      states: {\n        'setting up': {\n          entry: [\n            () => {\n              debug('entry: setup->setting up')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: setup->setting up')\n            },\n            'emit ready',\n            'emit pending incoming patches',\n            'clear pending incoming patches',\n          ],\n          on: {\n            'internal.patch': {\n              actions: 'defer event',\n            },\n            'mutation': {\n              actions: 'defer event',\n            },\n            'done syncing value': {\n              target: 'set up',\n            },\n            'patches': {\n              actions: ['defer incoming patches'],\n            },\n          },\n        },\n        'set up': {\n          type: 'parallel',\n          states: {\n            'value sync': {\n              initial: 'idle',\n              states: {\n                'idle': {\n                  entry: [\n                    () => {\n                      debug('entry: setup->set up->value sync->idle')\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: setup->set up->value sync->idle')\n                    },\n                  ],\n                  on: {\n                    'patches': {\n                      actions: [emit(({event}) => event)],\n                    },\n                    'syncing value': {\n                      target: 'syncing value',\n                    },\n                  },\n                },\n                'syncing value': {\n                  entry: [\n                    () => {\n                      debug('entry: setup->set up->value sync->syncing value')\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: setup->set up->value sync->syncing value')\n                    },\n                    'emit pending incoming patches',\n                    'clear pending incoming patches',\n                  ],\n                  on: {\n                    'patches': {\n                      actions: ['defer incoming patches'],\n                    },\n                    'done syncing value': {\n                      target: 'idle',\n                    },\n                  },\n                },\n              },\n            },\n            'writing': {\n              initial: 'pristine',\n              states: {\n                pristine: {\n                  initial: 'idle',\n                  states: {\n                    idle: {\n                      entry: [\n                        () => {\n                          debug('entry: setup->set up->writing->pristine->idle')\n                        },\n                      ],\n                      exit: [\n                        () => {\n                          debug('exit: setup->set up->writing->pristine->idle')\n                        },\n                      ],\n                      on: {\n                        'normalizing': {\n                          target: 'normalizing',\n                        },\n                        'internal.patch': {\n                          actions: 'defer event',\n                          target: '#editor.setup.set up.writing.dirty',\n                        },\n                        'mutation': {\n                          actions: 'defer event',\n                          target: '#editor.setup.set up.writing.dirty',\n                        },\n                      },\n                    },\n                    normalizing: {\n                      entry: [\n                        () => {\n                          debug(\n                            'entry: setup->set up->writing->pristine->normalizing',\n                          )\n                        },\n                      ],\n                      exit: [\n                        () => {\n                          debug(\n                            'exit: setup->set up->writing->pristine->normalizing',\n                          )\n                        },\n                      ],\n                      on: {\n                        'done normalizing': {\n                          target: 'idle',\n                        },\n                        'internal.patch': {\n                          actions: 'defer event',\n                        },\n                        'mutation': {\n                          actions: 'defer event',\n                        },\n                      },\n                    },\n                  },\n                },\n                dirty: {\n                  entry: [\n                    () => {\n                      debug('entry: setup->set up->writing->dirty')\n                    },\n                    'emit pending events',\n                    'clear pending events',\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: setup->set up->writing->dirty')\n                    },\n                  ],\n                  on: {\n                    'internal.patch': {\n                      actions: 'emit patch event',\n                    },\n                    'mutation': {\n                      actions: 'emit mutation event',\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n})\n","import type {\n  ArraySchemaType,\n  BlockSchemaType,\n  ObjectSchemaType,\n  PortableTextBlock,\n  SchemaType,\n  SpanSchemaType,\n} from '@sanity/types'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport function createLegacySchema(\n  portableTextType: ArraySchemaType<PortableTextBlock>,\n): PortableTextMemberSchemaTypes {\n  if (!portableTextType) {\n    throw new Error(\"Parameter 'portabletextType' missing (required)\")\n  }\n  const blockType = portableTextType.of?.find(findBlockType) as\n    | BlockSchemaType\n    | undefined\n  if (!blockType) {\n    throw new Error('Block type is not defined in this schema (required)')\n  }\n  const childrenField = blockType.fields?.find(\n    (field) => field.name === 'children',\n  ) as {type: ArraySchemaType} | undefined\n  if (!childrenField) {\n    throw new Error('Children field for block type found in schema (required)')\n  }\n  const ofType = childrenField.type.of\n  if (!ofType) {\n    throw new Error(\n      'Valid types for block children not found in schema (required)',\n    )\n  }\n  const spanType = ofType.find((memberType) => memberType.name === 'span') as\n    | ObjectSchemaType\n    | undefined\n  if (!spanType) {\n    throw new Error('Span type not found in schema (required)')\n  }\n  const inlineObjectTypes = (ofType.filter(\n    (memberType) => memberType.name !== 'span',\n  ) || []) as ObjectSchemaType[]\n  const blockObjectTypes = (portableTextType.of?.filter(\n    (field) => field.name !== blockType.name,\n  ) || []) as ObjectSchemaType[]\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: (spanType as SpanSchemaType).annotations,\n  }\n}\n\nfunction resolveEnabledStyles(blockType: ObjectSchemaType) {\n  const styleField = blockType.fields?.find(\n    (btField) => btField.name === 'style',\n  )\n  if (!styleField) {\n    throw new Error(\n      \"A field with name 'style' is not defined in the block type (required).\",\n    )\n  }\n  const textStyles =\n    styleField.type.options?.list &&\n    styleField.type.options.list?.filter(\n      (style: {value: string}) => style.value,\n    )\n  if (!textStyles || textStyles.length === 0) {\n    throw new Error(\n      'The style fields need at least one style ' +\n        \"defined. I.e: {title: 'Normal', value: 'normal'}.\",\n    )\n  }\n  return textStyles\n}\n\nfunction resolveEnabledDecorators(spanType: ObjectSchemaType) {\n  return (spanType as any).decorators\n}\n\nfunction resolveEnabledListItems(blockType: ObjectSchemaType) {\n  const listField = blockType.fields?.find(\n    (btField) => btField.name === 'listItem',\n  )\n  if (!listField) {\n    throw new Error(\n      \"A field with name 'listItem' is not defined in the block type (required).\",\n    )\n  }\n  const listItems =\n    listField.type.options?.list &&\n    listField.type.options.list.filter((list: {value: string}) => list.value)\n  if (!listItems) {\n    throw new Error('The list field need at least to be an empty array')\n  }\n  return listItems\n}\n\nfunction findBlockType(type: SchemaType): BlockSchemaType | null {\n  if (type.type) {\n    return findBlockType(type.type)\n  }\n\n  if (type.name === 'block') {\n    return type as BlockSchemaType\n  }\n\n  return null\n}\n","import {Schema as SanitySchema} from '@sanity/schema'\nimport {defineField, defineType, type ObjectSchemaType} from '@sanity/types'\nimport startCase from 'lodash.startcase'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {defaultKeyGenerator} from './key-generator'\nimport {createLegacySchema} from './legacy-schema'\n\n/**\n * @public\n */\nexport type BaseDefinition = {\n  name: string\n  title?: string\n}\n\nexport type FieldDefinition = {\n  name: string\n  type: 'string' | 'number' | 'boolean' | 'array' | 'object'\n}\n\n/**\n * @public\n */\nexport type SchemaDefinition<\n  TBaseDefinition extends BaseDefinition = BaseDefinition,\n> = {\n  decorators?: ReadonlyArray<TBaseDefinition>\n  blockObjects?: ReadonlyArray<\n    TBaseDefinition & {fields?: ReadonlyArray<FieldDefinition>}\n  >\n  inlineObjects?: ReadonlyArray<\n    TBaseDefinition & {fields?: ReadonlyArray<FieldDefinition>}\n  >\n  annotations?: ReadonlyArray<\n    TBaseDefinition & {fields?: ReadonlyArray<FieldDefinition>}\n  >\n  lists?: ReadonlyArray<TBaseDefinition>\n  styles?: ReadonlyArray<TBaseDefinition>\n}\n\n/**\n * @public\n * A helper wrapper that adds editor support, such as autocomplete and type checking, for a schema definition.\n * @example\n * ```ts\n * import { defineSchema } from '@portabletext/editor'\n *\n * const schemaDefinition = defineSchema({\n *  decorators: [{name: 'strong'}, {name: 'em'}, {name: 'underline'}],\n *  annotations: [{name: 'link'}],\n *  styles: [\n *    {name: 'normal'},\n *    {name: 'h1'},\n *    {name: 'h2'},\n *    {name: 'h3'},\n *    {name: 'blockquote'},\n *  ],\n *  lists: [],\n *  inlineObjects: [],\n *  blockObjects: [],\n * }\n * ```\n */\nexport function defineSchema<const TSchemaDefinition extends SchemaDefinition>(\n  definition: TSchemaDefinition,\n): TSchemaDefinition {\n  return definition\n}\n\nconst temporaryImageName = `tmp-${defaultKeyGenerator()}-image`\nconst temporaryUrlName = `tmp-${defaultKeyGenerator()}-url`\n\nconst temporaryObjectNames: Record<string, string> = {\n  image: temporaryImageName,\n  url: temporaryUrlName,\n}\n\nconst objectNames: Record<string, string> = {\n  [temporaryImageName]: 'image',\n  [temporaryUrlName]: 'url',\n}\n\nconst defaultObjectTitles: Record<string, string> = {\n  image: 'Image',\n  url: 'URL',\n}\n\n/**\n * @public\n */\nexport type EditorSchema = {\n  annotations: ReadonlyArray<\n    BaseDefinition & {\n      fields: ReadonlyArray<{name: string; type: string}>\n    }\n  >\n  block: {\n    name: string\n  }\n  blockObjects: ReadonlyArray<\n    BaseDefinition & {\n      fields: ReadonlyArray<{name: string; type: string}>\n    }\n  >\n  decorators: ReadonlyArray<\n    BaseDefinition & {\n      /**\n       * @deprecated\n       * Use `name` instead\n       */\n      value: string\n    }\n  >\n  inlineObjects: ReadonlyArray<\n    BaseDefinition & {\n      fields: ReadonlyArray<{name: string; type: string}>\n    }\n  >\n  span: {\n    name: string\n  }\n  styles: ReadonlyArray<\n    BaseDefinition & {\n      /**\n       * @deprecated\n       * Use `name` instead\n       */\n      value: string\n    }\n  >\n  lists: ReadonlyArray<\n    BaseDefinition & {\n      /**\n       * @deprecated\n       * Use `name` instead\n       */\n      value: string\n    }\n  >\n}\n\nexport function legacySchemaToEditorSchema(\n  schema: PortableTextMemberSchemaTypes,\n): EditorSchema {\n  return {\n    annotations: schema.annotations.map((annotation) => ({\n      name: annotation.name,\n      fields: annotation.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n      })),\n      title: annotation.title,\n    })),\n    block: {\n      name: schema.block.name,\n    },\n    blockObjects: schema.blockObjects.map((blockObject) => ({\n      name: blockObject.name,\n      fields: blockObject.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n      })),\n      title: blockObject.title,\n    })),\n    decorators: schema.decorators.map((decorator) => ({\n      name: decorator.value,\n      title: decorator.title,\n      value: decorator.value,\n    })),\n    inlineObjects: schema.inlineObjects.map((inlineObject) => ({\n      name: inlineObject.name,\n      fields: inlineObject.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n      })),\n      title: inlineObject.title,\n    })),\n    span: {\n      name: schema.span.name,\n    },\n    styles: schema.styles.map((style) => ({\n      name: style.value,\n      title: style.title,\n      value: style.value,\n    })),\n    lists: schema.lists.map((list) => ({\n      name: list.value,\n      title: list.title,\n      value: list.value,\n    })),\n  }\n}\n\nexport function compileSchemaDefinition<\n  TSchemaDefinition extends SchemaDefinition,\n>(definition: TSchemaDefinition): EditorSchema {\n  return legacySchemaToEditorSchema(\n    compileSchemaDefinitionToLegacySchema(definition),\n  )\n}\n\nexport function compileSchemaDefinitionToLegacySchema<\n  TSchemaDefinition extends SchemaDefinition,\n>(definition?: TSchemaDefinition): PortableTextMemberSchemaTypes {\n  const blockObjects =\n    definition?.blockObjects?.map((blockObject) =>\n      defineType({\n        type: 'object',\n        // Very naive way to work around `SanitySchema.compile` adding default\n        // fields to objects with certain names.\n        name: temporaryObjectNames[blockObject.name] ?? blockObject.name,\n        title:\n          blockObject.title === undefined\n            ? // This avoids the default title which is a title case of the object name\n              defaultObjectTitles[blockObject.name]\n            : blockObject.title,\n        fields:\n          blockObject.fields?.map((field) => ({\n            name: field.name,\n            type: field.type,\n          })) ?? [],\n      }),\n    ) ?? []\n\n  const inlineObjects =\n    definition?.inlineObjects?.map((inlineObject) =>\n      defineType({\n        type: 'object',\n        // Very naive way to work around `SanitySchema.compile` adding default\n        // fields to objects with certain names.\n        name: temporaryObjectNames[inlineObject.name] ?? inlineObject.name,\n\n        title:\n          inlineObject.title === undefined\n            ? // This avoids the default title which is a title case of the object name\n              defaultObjectTitles[inlineObject.name]\n            : inlineObject.title,\n        fields:\n          inlineObject.fields?.map((field) => ({\n            name: field.name,\n            type: field.type,\n          })) ?? [],\n      }),\n    ) ?? []\n\n  const portableTextSchema = defineField({\n    type: 'array',\n    name: 'portable-text',\n    of: [\n      ...blockObjects.map((blockObject) => ({type: blockObject.name})),\n      {\n        type: 'block',\n        name: 'block',\n        of: inlineObjects.map((inlineObject) => ({type: inlineObject.name})),\n        marks: {\n          decorators:\n            definition?.decorators?.map((decorator) => ({\n              title: decorator.title ?? startCase(decorator.name),\n              value: decorator.name,\n            })) ?? [],\n          annotations:\n            definition?.annotations?.map((annotation) => ({\n              name: annotation.name,\n              type: 'object',\n              title: annotation.title,\n              fields:\n                annotation.fields?.map((field) => ({\n                  name: field.name,\n                  type: field.type,\n                })) ?? [],\n            })) ?? [],\n        },\n        lists:\n          definition?.lists?.map((list) => ({\n            value: list.name,\n            title: list.title ?? startCase(list.name),\n          })) ?? [],\n        styles:\n          definition?.styles?.map((style) => ({\n            value: style.name,\n            title: style.title ?? startCase(style.name),\n          })) ?? [],\n      },\n    ],\n  })\n\n  const schema = SanitySchema.compile({\n    types: [portableTextSchema, ...blockObjects, ...inlineObjects],\n  }).get('portable-text')\n\n  const pteSchema = createLegacySchema(schema)\n\n  return {\n    ...pteSchema,\n    blockObjects: pteSchema.blockObjects.map((blockObject) =>\n      objectNames[blockObject.name] !== undefined\n        ? ({\n            ...blockObject,\n            name: objectNames[blockObject.name],\n            type: {\n              ...blockObject.type,\n              name: objectNames[blockObject.name],\n            },\n          } as ObjectSchemaType)\n        : blockObject,\n    ),\n    inlineObjects: pteSchema.inlineObjects.map((inlineObject) =>\n      objectNames[inlineObject.name] !== undefined\n        ? ({\n            ...inlineObject,\n            name: objectNames[inlineObject.name],\n          } as ObjectSchemaType)\n        : inlineObject,\n    ),\n  } satisfies PortableTextMemberSchemaTypes\n}\n","import {useSelector} from '@xstate/react'\nimport type {Editor} from '../editor'\nimport {slateChildrenToBlocks} from '../internal-utils/slate-children-to-blocks'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {InternalEditor} from './create-editor'\nimport type {EditorActor} from './editor-machine'\nimport type {EditorSnapshot} from './editor-snapshot'\nimport {getActiveDecorators} from './get-active-decorators'\n\nfunction defaultCompare<T>(a: T, b: T) {\n  return a === b\n}\n\n/**\n * @public\n */\nexport type EditorSelector<TSelected> = (snapshot: EditorSnapshot) => TSelected\n\n/**\n * @public\n * Hook to select a value from the editor state.\n * @example\n * Pass a selector as the second argument\n * ```tsx\n * import { useEditorSelector } from '@portabletext/editor'\n *\n * function MyComponent(editor) {\n *  const value = useEditorSelector(editor, selector)\n * }\n * ```\n * @example\n * Pass an inline selector as the second argument.\n * In this case, use the editor context to obtain the schema.\n * ```tsx\n * import { useEditorSelector } from '@portabletext/editor'\n *\n * function MyComponent(editor) {\n *  const schema = useEditorSelector(editor, (snapshot) => snapshot.context.schema)\n * }\n * ```\n * @group Hooks\n */\nexport function useEditorSelector<TSelected>(\n  editor: Editor,\n  selector: EditorSelector<TSelected>,\n  compare: (a: TSelected, b: TSelected) => boolean = defaultCompare,\n) {\n  return useSelector(\n    (editor as InternalEditor)._internal.editorActor,\n    (editorActorSnapshot) => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot,\n        slateEditorInstance: (editor as InternalEditor)._internal.slateEditor\n          .instance,\n      })\n\n      return selector(snapshot)\n    },\n    compare,\n  )\n}\n\nexport function getEditorSnapshot({\n  editorActorSnapshot,\n  slateEditorInstance,\n}: {\n  editorActorSnapshot: ReturnType<EditorActor['getSnapshot']>\n  slateEditorInstance: PortableTextSlateEditor\n}): EditorSnapshot {\n  return {\n    context: {\n      converters: [...editorActorSnapshot.context.converters],\n      activeDecorators: getActiveDecorators({\n        schema: editorActorSnapshot.context.schema,\n        slateEditorInstance,\n      }),\n      keyGenerator: editorActorSnapshot.context.keyGenerator,\n      readOnly: editorActorSnapshot.matches({'edit mode': 'read only'}),\n      schema: editorActorSnapshot.context.schema,\n      selection: editorActorSnapshot.context.selection,\n      value: slateChildrenToBlocks(\n        editorActorSnapshot.context.schema,\n        slateEditorInstance.children,\n      ),\n    },\n    beta: {\n      hasTag: (tag) => editorActorSnapshot.hasTag(tag),\n      internalDrag: editorActorSnapshot.context.internalDrag,\n    },\n  }\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {Editor} from 'slate'\nimport type {ActorRefFrom} from 'xstate'\nimport {\n  and,\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  fromCallback,\n  not,\n  setup,\n  stateIn,\n  type AnyEventObject,\n} from 'xstate'\nimport {debugWithName} from '../internal-utils/debug'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport type {PatchEvent} from './relay-machine'\n\nconst debug = debugWithName('mutation-machine')\n\nexport type MutationActor = ActorRefFrom<typeof mutationMachine>\n\n/**\n * Makes sure editor mutation events are debounced\n */\nexport const mutationMachine = setup({\n  types: {\n    context: {} as {\n      pendingMutations: Array<{\n        operationId?: string\n        value: Array<PortableTextBlock> | undefined\n        patches: Array<Patch>\n      }>\n      pendingPatchEvents: Array<PatchEvent>\n      readOnly: boolean\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'patch'\n          patch: Patch\n          operationId?: string\n          value: Array<PortableTextBlock>\n        }\n      | {\n          type: 'typing'\n        }\n      | {\n          type: 'not typing'\n        }\n      | {\n          type: 'update readOnly'\n          readOnly: boolean\n        },\n    input: {} as {\n      readOnly: boolean\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    emitted: {} as\n      | {\n          type: 'has pending mutations'\n        }\n      | {\n          type: 'mutation'\n          patches: Array<Patch>\n          snapshot: Array<PortableTextBlock> | undefined\n        }\n      | PatchEvent,\n  },\n  actions: {\n    'assign readOnly': assign({\n      readOnly: ({context, event}) =>\n        event.type === 'update readOnly' ? event.readOnly : context.readOnly,\n    }),\n    'emit patch': enqueueActions(({event, enqueue}) => {\n      if (event.type === 'patch') {\n        enqueue.emit({type: 'patch', patch: event.patch})\n      }\n    }),\n    'emit has pending mutations': emit({type: 'has pending mutations'}),\n    'emit mutations': enqueueActions(({context, enqueue}) => {\n      for (const bulk of context.pendingMutations) {\n        enqueue.emit({\n          type: 'mutation',\n          patches: bulk.patches,\n          snapshot: bulk.value,\n        })\n      }\n    }),\n    'clear pending mutations': assign({\n      pendingMutations: [],\n    }),\n    'defer mutation': assign({\n      pendingMutations: ({context, event}) => {\n        assertEvent(event, 'patch')\n\n        if (context.pendingMutations.length === 0) {\n          return [\n            {\n              operationId: event.operationId,\n              value: event.value,\n              patches: [event.patch],\n            },\n          ]\n        }\n\n        const lastBulk = context.pendingMutations.at(-1)\n\n        if (lastBulk && lastBulk.operationId === event.operationId) {\n          return context.pendingMutations.slice(0, -1).concat({\n            value: event.value,\n            operationId: lastBulk.operationId,\n            patches: [...lastBulk.patches, event.patch],\n          })\n        }\n\n        return context.pendingMutations.concat({\n          value: event.value,\n          operationId: event.operationId,\n          patches: [event.patch],\n        })\n      },\n    }),\n    'clear pending patch events': assign({\n      pendingPatchEvents: [],\n    }),\n    'defer patch': assign({\n      pendingPatchEvents: ({context, event}) =>\n        event.type === 'patch'\n          ? [...context.pendingPatchEvents, event]\n          : context.pendingPatchEvents,\n    }),\n    'emit pending patch events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingPatchEvents) {\n        enqueue.emit(event)\n      }\n    }),\n  },\n  actors: {\n    'type listener': fromCallback<\n      AnyEventObject,\n      {slateEditor: PortableTextSlateEditor},\n      {type: 'typing'} | {type: 'not typing'}\n    >(({input, sendBack}) => {\n      const originalApply = input.slateEditor.apply\n\n      input.slateEditor.apply = (op) => {\n        if (op.type === 'insert_text' || op.type === 'remove_text') {\n          sendBack({type: 'typing'})\n        } else {\n          sendBack({type: 'not typing'})\n        }\n        originalApply(op)\n      }\n\n      return () => {\n        input.slateEditor.apply = originalApply\n      }\n    }),\n  },\n  guards: {\n    'is read-only': ({context}) => context.readOnly,\n    'is typing': stateIn({typing: 'typing'}),\n    'no pending mutations': ({context}) =>\n      context.pendingMutations.length === 0,\n    'slate is normalizing': ({context}) =>\n      Editor.isNormalizing(context.slateEditor),\n  },\n  delays: {\n    'mutation debounce': process.env.NODE_ENV === 'test' ? 250 : 0,\n    'type debounce': process.env.NODE_ENV === 'test' ? 0 : 250,\n  },\n}).createMachine({\n  id: 'mutation',\n  context: ({input}) => ({\n    pendingMutations: [],\n    pendingPatchEvents: [],\n    readOnly: input.readOnly,\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n  }),\n  on: {\n    'update readOnly': {\n      actions: ['assign readOnly'],\n    },\n  },\n  type: 'parallel',\n  states: {\n    typing: {\n      initial: 'idle',\n      invoke: {\n        src: 'type listener',\n        input: ({context}) => ({slateEditor: context.slateEditor}),\n      },\n      states: {\n        idle: {\n          entry: [\n            () => {\n              debug('entry: typing->idle')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: typing->idle')\n            },\n          ],\n          on: {\n            typing: {\n              target: 'typing',\n            },\n          },\n        },\n        typing: {\n          entry: [\n            () => {\n              debug('entry: typing->typing')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: typing->typing')\n            },\n          ],\n          after: {\n            'type debounce': {\n              target: 'idle',\n            },\n          },\n          on: {\n            'not typing': {\n              target: 'idle',\n            },\n            'typing': {\n              target: 'typing',\n              reenter: true,\n            },\n          },\n        },\n      },\n    },\n    mutations: {\n      initial: 'idle',\n      states: {\n        'idle': {\n          entry: [\n            () => {\n              debug('entry: mutations->idle')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: mutations->idle')\n            },\n          ],\n          on: {\n            patch: {\n              actions: [\n                'emit patch',\n                'defer mutation',\n                'emit has pending mutations',\n              ],\n              target: 'emitting mutations',\n            },\n          },\n        },\n        'emitting mutations': {\n          entry: [\n            () => {\n              debug('entry: mutations->emitting mutations')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: mutations->emitting mutations')\n            },\n          ],\n          after: {\n            'mutation debounce': [\n              {\n                guard: 'is read-only',\n                target: 'read-only',\n              },\n              {\n                guard: and([not('is typing'), 'slate is normalizing']),\n                target: 'idle',\n                actions: ['emit mutations', 'clear pending mutations'],\n              },\n              {\n                target: 'emitting mutations',\n                reenter: true,\n              },\n            ],\n          },\n          on: {\n            patch: {\n              target: 'emitting mutations',\n              actions: ['emit patch', 'defer mutation'],\n              reenter: true,\n            },\n          },\n        },\n        'read-only': {\n          entry: [\n            () => {\n              debug('entry: mutations->read-only')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: mutations->read-only')\n            },\n          ],\n          always: [\n            {\n              guard: not('is read-only'),\n              target: 'emitting mutations',\n              actions: [\n                'emit pending patch events',\n                'clear pending patch events',\n              ],\n            },\n          ],\n          on: {\n            patch: {\n              actions: ['defer patch', 'defer mutation'],\n            },\n          },\n        },\n      },\n    },\n  },\n})\n","import {\n  isPortableTextSpan,\n  type Path,\n  type PortableTextBlock,\n  type PortableTextChild,\n  type PortableTextObject,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  Editor,\n  Node,\n  Range,\n  Element as SlateElement,\n  Text,\n  Transforms,\n} from 'slate'\nimport type {DOMNode} from 'slate-dom'\nimport {ReactEditor} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {toSlateRange} from '../../internal-utils/ranges'\nimport {\n  isListItemActive,\n  isStyleActive,\n  slateRangeToSelection,\n} from '../../internal-utils/slate-utils'\nimport {fromSlateValue, toSlateValue} from '../../internal-utils/values'\nimport {\n  KEY_TO_VALUE_ELEMENT,\n  SLATE_TO_PORTABLE_TEXT_RANGE,\n} from '../../internal-utils/weakMaps'\nimport {addAnnotationOperationImplementation} from '../../operations/behavior.operation.annotation.add'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorSelection,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {isDecoratorActive} from './createWithPortableTextMarkModel'\n\nconst debug = debugWithName('API:editable')\n\nexport function createEditableAPI(\n  editor: PortableTextSlateEditor,\n  editorActor: EditorActor,\n) {\n  const types = editorActor.getSnapshot().context.schema\n\n  const editableApi: EditableAPI = {\n    focus: (): void => {\n      editorActor.send({\n        type: 'focus',\n        editor,\n      })\n    },\n    blur: (): void => {\n      editorActor.send({\n        type: 'blur',\n        editor,\n      })\n    },\n    toggleMark: (mark: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.toggle',\n          decorator: mark,\n        },\n        editor,\n      })\n    },\n    toggleList: (listItem: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'list item.toggle',\n          listItem,\n        },\n        editor,\n      })\n    },\n    toggleBlockStyle: (style: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'style.toggle',\n          style,\n        },\n        editor,\n      })\n    },\n    isMarkActive: (mark: string): boolean => {\n      // Try/catch this, as Slate may error because the selection is currently wrong\n      // TODO: catch only relevant error from Slate\n      try {\n        return isDecoratorActive({editor, decorator: mark})\n      } catch (err) {\n        console.warn(err)\n        return false\n      }\n    },\n    marks: (): string[] => {\n      return (\n        {\n          ...(Editor.marks(editor) || {}),\n        }.marks || []\n      )\n    },\n    undo: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.undo',\n        },\n        editor,\n      })\n    },\n    redo: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.redo',\n        },\n        editor,\n      })\n    },\n    select: (selection: EditorSelection): void => {\n      const slateSelection = toSlateRange(selection, editor)\n      if (slateSelection) {\n        Transforms.select(editor, slateSelection)\n      } else {\n        Transforms.deselect(editor)\n      }\n      editor.onChange()\n    },\n    focusBlock: (): PortableTextBlock | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block) {\n          return fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n        }\n      }\n      return undefined\n    },\n    focusChild: (): PortableTextChild | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block && editor.isTextBlock(block)) {\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0] as PortableTextTextBlock\n          return ptBlock.children[editor.selection.focus.path[1]]\n        }\n      }\n      return undefined\n    },\n    insertChild: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      if (type.name !== types.span.name) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'insert.inline object',\n            inlineObject: {\n              name: type.name,\n              value,\n            },\n          },\n          editor,\n        })\n\n        return editor.selection\n          ? (slateRangeToSelection({\n              schema: editorActor.getSnapshot().context.schema,\n              editor,\n              range: editor.selection,\n            })?.focus.path ?? [])\n          : []\n      }\n\n      if (!editor.selection) {\n        throw new Error('The editor has no selection')\n      }\n      const [focusBlock] = Array.from(\n        Editor.nodes(editor, {\n          at: editor.selection.focus.path.slice(0, 1),\n          match: (n) => n._type === types.block.name,\n        }),\n      )[0] || [undefined]\n      if (!focusBlock) {\n        throw new Error('No focused text block')\n      }\n      if (\n        type.name !== types.span.name &&\n        !types.inlineObjects.some((t) => t.name === type.name)\n      ) {\n        throw new Error(\n          'This type cannot be inserted as a child to a text block',\n        )\n      }\n      const block = toSlateValue(\n        [\n          {\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            _type: types.block.name,\n            children: [\n              {\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                _type: type.name,\n                ...(value ? value : {}),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0] as unknown as SlateElement\n      const child = block.children[0]\n      const focusChildPath = editor.selection.focus.path.slice(0, 2)\n      const isSpanNode = child._type === types.span.name\n      const focusNode = Node.get(editor, focusChildPath)\n\n      // If we are inserting a span, and currently have focus on an inline object,\n      // move the selection to the next span (guaranteed by normalizing rules) before inserting it.\n      if (isSpanNode && focusNode._type !== types.span.name) {\n        debug(\n          'Inserting span child next to inline object child, moving selection + 1',\n        )\n        editor.move({distance: 1, unit: 'character'})\n      }\n\n      Transforms.insertNodes(editor, child, {\n        select: true,\n        at: editor.selection,\n      })\n      editor.onChange()\n\n      return editor.selection\n        ? (slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range: editor.selection,\n          })?.focus.path ?? [])\n        : []\n    },\n    insertBlock: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.block',\n          block: {\n            _type: type.name,\n            ...(value ? value : {}),\n          },\n          placement: 'auto',\n        },\n        editor,\n      })\n\n      return editor.selection\n        ? (slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range: editor.selection,\n          })?.focus.path ?? [])\n        : []\n    },\n    hasBlockStyle: (style: string): boolean => {\n      try {\n        return isStyleActive({editor, style})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    hasListStyle: (listItem: string): boolean => {\n      try {\n        return isListItemActive({editor, listItem})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    isVoid: (element: PortableTextBlock | PortableTextChild) => {\n      return ![types.block.name, types.span.name].includes(element._type)\n    },\n    findByPath: (\n      path: Path,\n    ): [\n      PortableTextBlock | PortableTextChild | undefined,\n      Path | undefined,\n    ] => {\n      const slatePath = toSlateRange(\n        {focus: {path, offset: 0}, anchor: {path, offset: 0}},\n        editor,\n      )\n      if (slatePath) {\n        const [block, blockPath] = Editor.node(\n          editor,\n          slatePath.focus.path.slice(0, 1),\n        )\n        if (block && blockPath && typeof block._key === 'string') {\n          if (path.length === 1 && slatePath.focus.path.length === 1) {\n            return [\n              fromSlateValue([block], types.block.name)[0],\n              [{_key: block._key}],\n            ]\n          }\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n          if (editor.isTextBlock(ptBlock)) {\n            const ptChild = ptBlock.children[slatePath.focus.path[1]]\n            if (ptChild) {\n              return [\n                ptChild,\n                [{_key: block._key}, 'children', {_key: ptChild._key}],\n              ]\n            }\n          }\n        }\n      }\n      return [undefined, undefined]\n    },\n    findDOMNode: (\n      element: PortableTextBlock | PortableTextChild,\n    ): DOMNode | undefined => {\n      let node: DOMNode | undefined\n      try {\n        const [item] = Array.from(\n          Editor.nodes(editor, {\n            at: [],\n            match: (n) => n._key === element._key,\n          }) || [],\n        )[0] || [undefined]\n        node = ReactEditor.toDOMNode(editor, item)\n      } catch {\n        // Nothing\n      }\n      return node\n    },\n    activeAnnotations: (): PortableTextObject[] => {\n      if (!editor.selection || editor.selection.focus.path.length < 2) {\n        return []\n      }\n      try {\n        const activeAnnotations: PortableTextObject[] = []\n        const spans = Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Text.isText(node) &&\n            node.marks !== undefined &&\n            Array.isArray(node.marks) &&\n            node.marks.length > 0,\n        })\n        for (const [span, path] of spans) {\n          const [block] = Editor.node(editor, path, {depth: 1})\n          if (editor.isTextBlock(block)) {\n            block.markDefs?.forEach((def) => {\n              if (\n                Text.isText(span) &&\n                span.marks &&\n                Array.isArray(span.marks) &&\n                span.marks.includes(def._key)\n              ) {\n                activeAnnotations.push(def)\n              }\n            })\n          }\n        }\n        return activeAnnotations\n      } catch {\n        return []\n      }\n    },\n    isAnnotationActive: (\n      annotationType: PortableTextObject['_type'],\n    ): boolean => {\n      return isAnnotationActive({editor, annotation: {name: annotationType}})\n    },\n    addAnnotation: (type, value) => {\n      let paths: ReturnType<EditableAPI['addAnnotation']> = undefined\n\n      Editor.withoutNormalizing(editor, () => {\n        paths = addAnnotationOperationImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: types,\n          },\n          operation: {\n            type: 'annotation.add',\n            annotation: {name: type.name, value: value ?? {}},\n            editor,\n          },\n        })\n      })\n      editor.onChange()\n\n      return paths\n    },\n    delete: (\n      selection: EditorSelection,\n      options?: EditableAPIDeleteOptions,\n    ): void => {\n      if (selection) {\n        const range = toSlateRange(selection, editor)\n        const hasRange =\n          range && range.anchor.path.length > 0 && range.focus.path.length > 0\n        if (!hasRange) {\n          throw new Error('Invalid range')\n        }\n        if (range) {\n          if (!options?.mode || options?.mode === 'selected') {\n            debug(`Deleting content in selection`)\n            Transforms.delete(editor, {\n              at: range,\n              hanging: true,\n              voids: true,\n            })\n            editor.onChange()\n            return\n          }\n          if (options?.mode === 'blocks') {\n            debug(`Deleting blocks touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  editor.isTextBlock(node) ||\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node))\n                )\n              },\n            })\n          }\n          if (options?.mode === 'children') {\n            debug(`Deleting children touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  node._type === types.span.name || // Text children\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node)) // inline blocks\n                )\n              },\n            })\n          }\n          // If the editor was emptied, insert a placeholder block\n          // directly into the editor's children. We don't want to do this\n          // through a Transform (because that would trigger a change event\n          // that would insert the placeholder into the actual value\n          // which should remain empty)\n          if (editor.children.length === 0) {\n            editor.children = [editor.pteCreateTextBlock({decorators: []})]\n          }\n          editor.onChange()\n        }\n      }\n    },\n    removeAnnotation: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n    ): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'annotation.remove',\n          annotation: {name: type.name},\n        },\n        editor,\n      })\n    },\n    getSelection: (): EditorSelection | null => {\n      let ptRange: EditorSelection = null\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n        if (existing) {\n          return existing\n        }\n        ptRange = slateRangeToSelection({\n          schema: editorActor.getSnapshot().context.schema,\n          editor,\n          range: editor.selection,\n        })\n        SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n      }\n      return ptRange\n    },\n    getValue: () => {\n      return fromSlateValue(\n        editor.children,\n        types.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )\n    },\n    isCollapsedSelection: () => {\n      return !!editor.selection && Range.isCollapsed(editor.selection)\n    },\n    isExpandedSelection: () => {\n      return !!editor.selection && Range.isExpanded(editor.selection)\n    },\n    insertBreak: () => {\n      editor.insertBreak()\n      editor.onChange()\n    },\n    getFragment: () => {\n      return fromSlateValue(editor.getFragment(), types.block.name)\n    },\n    isSelectionsOverlapping: (\n      selectionA: EditorSelection,\n      selectionB: EditorSelection,\n    ) => {\n      // Convert the selections to Slate ranges\n      const rangeA = toSlateRange(selectionA, editor)\n      const rangeB = toSlateRange(selectionB, editor)\n\n      // Make sure the ranges are valid\n      const isValidRanges = Range.isRange(rangeA) && Range.isRange(rangeB)\n\n      // Check if the ranges are overlapping\n      const isOverlapping = isValidRanges && Range.includes(rangeA, rangeB)\n\n      return isOverlapping\n    },\n  }\n\n  return editableApi\n}\n\nfunction isAnnotationActive({\n  editor,\n  annotation,\n}: {\n  editor: PortableTextSlateEditor\n  annotation: {\n    name: string\n  }\n}) {\n  if (!editor.selection || editor.selection.focus.path.length < 2) {\n    return false\n  }\n\n  try {\n    const spans = [\n      ...Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => Text.isText(node),\n      }),\n    ]\n\n    if (spans.length === 0) {\n      return false\n    }\n\n    if (\n      spans.some(\n        ([span]) =>\n          !isPortableTextSpan(span) || !span.marks || span.marks?.length === 0,\n      )\n    )\n      return false\n\n    const selectionMarkDefs = spans.reduce((accMarkDefs, [, path]) => {\n      const [block] = Editor.node(editor, path, {depth: 1})\n      if (editor.isTextBlock(block) && block.markDefs) {\n        return [...accMarkDefs, ...block.markDefs]\n      }\n      return accMarkDefs\n    }, [] as PortableTextObject[])\n\n    return spans.every(([span]) => {\n      if (!isPortableTextSpan(span)) return false\n\n      const spanMarkDefs = span.marks?.map(\n        (markKey) =>\n          selectionMarkDefs.find((def) => def?._key === markKey)?._type,\n      )\n\n      return spanMarkDefs?.includes(annotation.name)\n    })\n  } catch {\n    return false\n  }\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {FocusEvent} from 'react'\nimport {emit, setup, type ActorRefFrom} from 'xstate'\nimport type {EditorSelection, InvalidValueResolution} from '../types/editor'\n\n/**\n * @public\n */\nexport type EditorEmittedEvent =\n  | {\n      type: 'blurred'\n      event: FocusEvent<HTMLDivElement, Element>\n    }\n  | {\n      type: 'done loading'\n    }\n  | {\n      type: 'editable'\n    }\n  | ErrorEvent\n  | {\n      type: 'focused'\n      event: FocusEvent<HTMLDivElement, Element>\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'loading'\n    }\n  | MutationEvent\n  | PatchEvent\n  | {\n      type: 'read only'\n    }\n  | {\n      type: 'ready'\n    }\n  | {\n      type: 'selection'\n      selection: EditorSelection\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n\n/**\n * @deprecated The event is no longer emitted\n */\ntype ErrorEvent = {\n  type: 'error'\n  name: string\n  description: string\n  data: unknown\n}\n\nexport type InternalEditorEmittedEvent = EditorEmittedEvent | UnsetEvent\n\n/**\n * @public\n */\nexport type MutationEvent = {\n  type: 'mutation'\n  patches: Array<Patch>\n  /**\n   * @deprecated Use `value` instead\n   */\n  snapshot: Array<PortableTextBlock> | undefined\n  value: Array<PortableTextBlock> | undefined\n}\n\nexport type PatchEvent = {\n  type: 'patch'\n  patch: Patch\n}\n\nexport type UnsetEvent = {\n  type: 'unset'\n  previousValue: Array<PortableTextBlock>\n}\n\nexport type RelayActor = ActorRefFrom<typeof relayMachine>\n\nexport const relayMachine = setup({\n  types: {\n    events: {} as InternalEditorEmittedEvent,\n    emitted: {} as InternalEditorEmittedEvent,\n  },\n}).createMachine({\n  id: 'relay',\n  on: {\n    '*': {\n      actions: emit(({event}) => event),\n    },\n  },\n})\n","import {insert, set, setIfMissing, unset} from '@portabletext/patches'\nimport type {\n  PortableTextBlock,\n  PortableTextSpan,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {flatten, isPlainObject, uniq} from 'lodash'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {InvalidValueResolution} from '../types/editor'\nimport {isTextBlock} from './parse-blocks'\n\nexport interface Validation {\n  valid: boolean\n  resolution: InvalidValueResolution | null\n  value: PortableTextBlock[] | undefined\n}\n\nexport function validateValue(\n  value: PortableTextBlock[] | undefined,\n  types: EditorSchema,\n  keyGenerator: () => string,\n): Validation {\n  let resolution: InvalidValueResolution | null = null\n  let valid = true\n  const validChildTypes = [\n    types.span.name,\n    ...types.inlineObjects.map((t) => t.name),\n  ]\n  const validBlockTypes = [\n    types.block.name,\n    ...types.blockObjects.map((t) => t.name),\n  ]\n\n  // Undefined is allowed\n  if (value === undefined) {\n    return {valid: true, resolution: null, value}\n  }\n  // Only lengthy arrays are allowed in the editor.\n  if (!Array.isArray(value) || value.length === 0) {\n    return {\n      valid: false,\n      resolution: {\n        patches: [unset([])],\n        description:\n          'Editor value must be an array of Portable Text blocks, or undefined.',\n        action: 'Unset the value',\n        item: value,\n\n        i18n: {\n          description:\n            'inputs.portable-text.invalid-value.not-an-array.description',\n          action: 'inputs.portable-text.invalid-value.not-an-array.action',\n        },\n      },\n      value,\n    }\n  }\n  if (\n    value.some((blk: PortableTextBlock, index: number): boolean => {\n      // Is the block an object?\n      if (!isPlainObject(blk)) {\n        resolution = {\n          patches: [unset([index])],\n          description: `Block must be an object, got ${String(blk)}`,\n          action: `Unset invalid item`,\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.not-an-object.description',\n            action: 'inputs.portable-text.invalid-value.not-an-object.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has a _key prop\n      if (!blk._key || typeof blk._key !== 'string') {\n        resolution = {\n          patches: [set({...blk, _key: keyGenerator()}, [index])],\n          description: `Block at index ${index} is missing required _key.`,\n          action: 'Set the block with a random _key value',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.missing-key.description',\n            action: 'inputs.portable-text.invalid-value.missing-key.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has valid _type\n      if (!blk._type || !validBlockTypes.includes(blk._type)) {\n        // Special case where block type is set to default 'block', but the block type is named something else according to the schema.\n        if (blk._type === 'block') {\n          const currentBlockTypeName = types.block.name\n          resolution = {\n            patches: [\n              set({...blk, _type: currentBlockTypeName}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n            action: `Use type '${currentBlockTypeName}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.incorrect-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.incorrect-block-type.action',\n              values: {key: blk._key, expectedTypeName: currentBlockTypeName},\n            },\n          }\n          return true\n        }\n\n        // If the block has no `_type`, but aside from that is a valid Portable Text block\n        if (\n          !blk._type &&\n          isTextBlock({schema: types}, {...blk, _type: types.block.name})\n        ) {\n          resolution = {\n            patches: [\n              set({...blk, _type: types.block.name}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n            action: `Use type '${types.block.name}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-block-type.action',\n              values: {key: blk._key, expectedTypeName: types.block.name},\n            },\n          }\n          return true\n        }\n\n        if (!blk._type) {\n          resolution = {\n            patches: [unset([{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' is missing an _type property`,\n            action: 'Remove the block',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-type.description',\n              action: 'inputs.portable-text.invalid-value.missing-type.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        resolution = {\n          patches: [unset([{_key: blk._key}])],\n          description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n          action: 'Remove the block',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.disallowed-type.description',\n            action: 'inputs.portable-text.invalid-value.disallowed-type.action',\n            values: {key: blk._key, typeName: blk._type},\n          },\n        }\n        return true\n      }\n\n      // Test regular text blocks\n      if (blk._type === types.block.name) {\n        const textBlock = blk as PortableTextTextBlock\n        // Test that it has a valid children property (array)\n        if (textBlock.children && !Array.isArray(textBlock.children)) {\n          resolution = {\n            patches: [set({children: []}, [{_key: textBlock._key}])],\n            description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n            action: 'Reset the children property',\n            item: textBlock,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.action',\n              values: {key: textBlock._key},\n            },\n          }\n          return true\n        }\n        // Test that children is set and lengthy\n        if (\n          textBlock.children === undefined ||\n          (Array.isArray(textBlock.children) && textBlock.children.length === 0)\n        ) {\n          const newSpan = {\n            _type: types.span.name,\n            _key: keyGenerator(),\n            text: '',\n            marks: [],\n          }\n          resolution = {\n            autoResolve: true,\n            patches: [\n              setIfMissing([], [{_key: blk._key}, 'children']),\n              insert([newSpan], 'after', [{_key: blk._key}, 'children', 0]),\n            ],\n            description: `Children for text block with _key '${blk._key}' is empty.`,\n            action: 'Insert an empty text',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.empty-children.description',\n              action:\n                'inputs.portable-text.invalid-value.empty-children.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        const allUsedMarks = uniq(\n          flatten(\n            textBlock.children\n              .filter((cld) => cld._type === types.span.name)\n              .map((cld) => cld.marks || []),\n          ) as string[],\n        )\n\n        // Test that all markDefs are in use (remove orphaned markDefs)\n        if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n          const unusedMarkDefs: string[] = uniq(\n            blk.markDefs\n              .map((def) => def._key)\n              .filter((key) => !allUsedMarks.includes(key)),\n          )\n          if (unusedMarkDefs.length > 0) {\n            resolution = {\n              autoResolve: true,\n              patches: unusedMarkDefs.map((markDefKey) =>\n                unset([{_key: blk._key}, 'markDefs', {_key: markDefKey}]),\n              ),\n              description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\n                ', ',\n              )}.`,\n              action: 'Remove unused mark definition item',\n              item: blk,\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.action',\n                values: {\n                  key: blk._key,\n                  unusedMarkDefs: unusedMarkDefs.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test that every annotation mark used has a definition\n        const annotationMarks = allUsedMarks.filter(\n          (mark) => !types.decorators.map((dec) => dec.name).includes(mark),\n        )\n        const orphanedMarks = annotationMarks.filter(\n          (mark) =>\n            textBlock.markDefs === undefined ||\n            !textBlock.markDefs.find((def) => def._key === mark),\n        )\n        if (orphanedMarks.length > 0) {\n          const spanChildren = textBlock.children.filter(\n            (cld) =>\n              cld._type === types.span.name &&\n              Array.isArray(cld.marks) &&\n              cld.marks.some((mark) => orphanedMarks.includes(mark)),\n          ) as PortableTextSpan[]\n          if (spanChildren) {\n            const orphaned = orphanedMarks.join(', ')\n            resolution = {\n              autoResolve: true,\n              patches: spanChildren.map((child) => {\n                return set(\n                  (child.marks || []).filter(\n                    (cMrk) => !orphanedMarks.includes(cMrk),\n                  ),\n                  [{_key: blk._key}, 'children', {_key: child._key}, 'marks'],\n                )\n              }),\n              description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n              action: 'Remove invalid marks',\n              item: blk,\n\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-marks.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-marks.action',\n                values: {\n                  key: blk._key,\n                  orphanedMarks: orphanedMarks.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test every child\n        if (\n          textBlock.children.some((child, cIndex: number) => {\n            if (!isPlainObject(child)) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n                action: 'Remove the item',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.non-object-child.description',\n                  action:\n                    'inputs.portable-text.invalid-value.non-object-child.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            if (!child._key || typeof child._key !== 'string') {\n              const newChild = {...child, _key: keyGenerator()}\n              resolution = {\n                autoResolve: true,\n                patches: [\n                  set(newChild, [{_key: blk._key}, 'children', cIndex]),\n                ],\n                description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n                action: 'Set a new random _key on the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-key.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-key.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            // Verify that children have valid types\n            if (!child._type) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-type.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n\n            if (!validChildTypes.includes(child._type)) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.action',\n                  values: {\n                    key: blk._key,\n                    childKey: child._key,\n                    childType: child._type,\n                  },\n                },\n              }\n              return true\n            }\n\n            // Verify that spans have .text property that is a string\n            if (\n              child._type === types.span.name &&\n              typeof child.text !== 'string'\n            ) {\n              resolution = {\n                patches: [\n                  set({...child, text: ''}, [\n                    {_key: blk._key},\n                    'children',\n                    {_key: child._key},\n                  ]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n                action: `Write an empty text property to the object`,\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.invalid-span-text.description',\n                  action:\n                    'inputs.portable-text.invalid-value.invalid-span-text.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n            return false\n          })\n        ) {\n          valid = false\n        }\n      }\n      return false\n    })\n  ) {\n    valid = false\n  }\n  return {valid, resolution, value}\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Editor, Text, Transforms, type Descendant, type Node} from 'slate'\nimport {\n  and,\n  assertEvent,\n  assign,\n  emit,\n  fromCallback,\n  not,\n  raise,\n  setup,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport type {ActorRefFrom} from 'xstate'\nimport {debugWithName} from '../internal-utils/debug'\nimport {validateValue} from '../internal-utils/validateValue'\nimport {toSlateValue, VOID_CHILD_KEY} from '../internal-utils/values'\nimport {\n  isChangingRemotely,\n  withRemoteChanges,\n} from '../internal-utils/withChanges'\nimport {withoutPatching} from '../internal-utils/withoutPatching'\nimport type {PickFromUnion} from '../type-utils'\nimport type {\n  InvalidValueResolution,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport {withoutSaving} from './plugins/createWithUndoRedo'\n\nconst debug = debugWithName('sync machine')\n\ntype SyncValueEvent =\n  | {\n      type: 'patch'\n      patch: Patch\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'done syncing'\n      value: Array<PortableTextBlock> | undefined\n    }\n\nconst syncValueCallback: CallbackLogicFunction<\n  AnyEventObject,\n  SyncValueEvent,\n  {\n    context: {\n      keyGenerator: () => string\n      previousValue: Array<PortableTextBlock> | undefined\n      readOnly: boolean\n      schema: EditorSchema\n    }\n    slateEditor: PortableTextSlateEditor\n    streamBlocks: boolean\n    value: Array<PortableTextBlock> | undefined\n  }\n> = ({sendBack, input}) => {\n  updateValue({\n    context: input.context,\n    sendBack,\n    slateEditor: input.slateEditor,\n    value: input.value,\n    streamBlocks: input.streamBlocks,\n  })\n}\n\nconst syncValueLogic = fromCallback(syncValueCallback)\n\nexport type SyncActor = ActorRefFrom<typeof syncMachine>\n\n/**\n * Sync value with the editor state\n *\n * Normally nothing here should apply, and the editor and the real world are perfectly aligned.\n *\n * Inconsistencies could happen though, so we need to check the editor state when the value changes.\n *\n * For performance reasons, it makes sense to also do the content validation here, as we already\n * iterate over the value and can validate only the new content that is actually changed.\n *\n * @internal\n */\nexport const syncMachine = setup({\n  types: {\n    context: {} as {\n      initialValue: Array<PortableTextBlock> | undefined\n      initialValueSynced: boolean\n      isProcessingLocalChanges: boolean\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n      pendingValue: Array<PortableTextBlock> | undefined\n      previousValue: Array<PortableTextBlock> | undefined\n    },\n    input: {} as {\n      initialValue: Array<PortableTextBlock> | undefined\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'has pending mutations'\n        }\n      | {\n          type: 'mutation'\n        }\n      | {\n          type: 'update value'\n          value: Array<PortableTextBlock> | undefined\n        }\n      | {\n          type: 'update readOnly'\n          readOnly: boolean\n        }\n      | SyncValueEvent,\n    emitted: {} as\n      | PickFromUnion<\n          SyncValueEvent,\n          'type',\n          'invalid value' | 'patch' | 'value changed'\n        >\n      | {type: 'done syncing value'}\n      | {type: 'syncing value'},\n  },\n  actions: {\n    'assign initial value synced': assign({\n      initialValueSynced: true,\n    }),\n    'assign readOnly': assign({\n      readOnly: ({event}) => {\n        assertEvent(event, 'update readOnly')\n        return event.readOnly\n      },\n    }),\n    'assign pending value': assign({\n      pendingValue: ({event}) => {\n        assertEvent(event, 'update value')\n        return event.value\n      },\n    }),\n    'clear pending value': assign({\n      pendingValue: undefined,\n    }),\n    'assign previous value': assign({\n      previousValue: ({event}) => {\n        assertEvent(event, 'done syncing')\n        return event.value\n      },\n    }),\n    'emit done syncing value': emit({\n      type: 'done syncing value',\n    }),\n    'emit syncing value': emit({\n      type: 'syncing value',\n    }),\n  },\n  guards: {\n    'initial value synced': ({context}) => context.initialValueSynced,\n    'is busy': ({context}) => {\n      const editable = !context.readOnly\n      const isProcessingLocalChanges = context.isProcessingLocalChanges\n      const isChanging = isChangingRemotely(context.slateEditor) ?? false\n      const isBusy = editable && (isProcessingLocalChanges || isChanging)\n\n      debug('isBusy', {isBusy, editable, isProcessingLocalChanges, isChanging})\n\n      return isBusy\n    },\n    'is empty value': ({event}) => {\n      return event.type === 'update value' && event.value === undefined\n    },\n    'is empty array': ({event}) => {\n      return (\n        event.type === 'update value' &&\n        Array.isArray(event.value) &&\n        event.value.length === 0\n      )\n    },\n    'is new value': ({context, event}) => {\n      return (\n        event.type === 'update value' && context.previousValue !== event.value\n      )\n    },\n    'value changed while syncing': ({context, event}) => {\n      assertEvent(event, 'done syncing')\n      return context.pendingValue !== event.value\n    },\n    'pending value equals previous value': ({context}) => {\n      return isEqual(context.pendingValue, context.previousValue)\n    },\n  },\n  actors: {\n    'sync value': syncValueLogic,\n  },\n}).createMachine({\n  id: 'sync',\n  context: ({input}) => ({\n    initialValue: input.initialValue,\n    initialValueSynced: false,\n    isProcessingLocalChanges: false,\n    keyGenerator: input.keyGenerator,\n    schema: input.schema,\n    readOnly: input.readOnly,\n    slateEditor: input.slateEditor,\n    pendingValue: undefined,\n    previousValue: undefined,\n  }),\n  entry: [\n    raise(({context}) => {\n      return {type: 'update value', value: context.initialValue}\n    }),\n  ],\n  on: {\n    'has pending mutations': {\n      actions: assign({\n        isProcessingLocalChanges: true,\n      }),\n    },\n    'mutation': {\n      actions: assign({\n        isProcessingLocalChanges: false,\n      }),\n    },\n    'update readOnly': {\n      actions: ['assign readOnly'],\n    },\n  },\n  initial: 'idle',\n  states: {\n    idle: {\n      entry: [\n        () => {\n          debug('entry: syncing->idle')\n        },\n      ],\n      exit: [\n        () => {\n          debug('exit: syncing->idle')\n        },\n      ],\n      on: {\n        'update value': [\n          {\n            guard: and(['is empty value', not('initial value synced')]),\n            actions: ['assign initial value synced', 'emit done syncing value'],\n          },\n          {\n            guard: and(['is empty array', not('initial value synced')]),\n            actions: [\n              'assign initial value synced',\n              emit({type: 'value changed', value: []}),\n              'emit done syncing value',\n            ],\n          },\n          {\n            guard: and(['is busy', 'is new value']),\n            target: 'busy',\n            actions: ['assign pending value'],\n          },\n          {\n            guard: 'is new value',\n            target: 'syncing',\n            actions: ['assign pending value'],\n          },\n          {\n            guard: not('initial value synced'),\n            actions: [\n              () => {\n                debug('no new value – setting initial value as synced')\n              },\n              'assign initial value synced',\n              'emit done syncing value',\n            ],\n          },\n          {\n            actions: [\n              () => {\n                debug('no new value and initial value already synced')\n              },\n            ],\n          },\n        ],\n      },\n    },\n    busy: {\n      entry: [\n        () => {\n          debug('entry: syncing->busy')\n        },\n      ],\n      exit: [\n        () => {\n          debug('exit: syncing->busy')\n        },\n      ],\n      after: {\n        1000: [\n          {\n            guard: 'is busy',\n            target: '.',\n            reenter: true,\n            actions: [\n              () => {\n                debug('reenter: syncing->busy')\n              },\n            ],\n          },\n          {\n            target: 'syncing',\n          },\n        ],\n      },\n      on: {\n        'update value': [\n          {\n            guard: 'is new value',\n            actions: ['assign pending value'],\n          },\n        ],\n      },\n    },\n    syncing: {\n      entry: [\n        () => {\n          debug('entry: syncing->syncing')\n        },\n        'emit syncing value',\n      ],\n      exit: [\n        () => {\n          debug('exit: syncing->syncing')\n        },\n        'emit done syncing value',\n      ],\n      invoke: {\n        src: 'sync value',\n        id: 'sync value',\n        input: ({context}) => {\n          return {\n            context: {\n              keyGenerator: context.keyGenerator,\n              previousValue: context.previousValue,\n              readOnly: context.readOnly,\n              schema: context.schema,\n            },\n            slateEditor: context.slateEditor,\n            streamBlocks: !context.initialValueSynced,\n            value: context.pendingValue,\n          }\n        },\n      },\n      on: {\n        'update value': {\n          guard: 'is new value',\n          actions: ['assign pending value'],\n        },\n        'patch': {\n          actions: [emit(({event}) => event)],\n        },\n        'invalid value': {\n          actions: [emit(({event}) => event)],\n        },\n        'value changed': {\n          actions: [emit(({event}) => event)],\n        },\n        'done syncing': [\n          {\n            guard: 'value changed while syncing',\n            actions: ['assign previous value', 'assign initial value synced'],\n            target: 'syncing',\n            reenter: true,\n          },\n          {\n            target: 'idle',\n            actions: [\n              'clear pending value',\n              'assign previous value',\n              'assign initial value synced',\n            ],\n          },\n        ],\n      },\n    },\n  },\n})\n\nasync function updateValue({\n  context,\n  sendBack,\n  slateEditor,\n  streamBlocks,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  slateEditor: PortableTextSlateEditor\n  streamBlocks: boolean\n  value: PortableTextBlock[] | undefined\n}) {\n  let doneSyncing = false\n  let isChanged = false\n  let isValid = true\n\n  const hadSelection = !!slateEditor.selection\n\n  // If empty value, remove everything in the editor and insert a placeholder block\n  if (!value || value.length === 0) {\n    debug('Value is empty')\n    Editor.withoutNormalizing(slateEditor, () => {\n      withoutSaving(slateEditor, () => {\n        withoutPatching(slateEditor, () => {\n          if (doneSyncing) {\n            return\n          }\n\n          if (hadSelection) {\n            Transforms.deselect(slateEditor)\n          }\n          const childrenLength = slateEditor.children.length\n          slateEditor.children.forEach((_, index) => {\n            Transforms.removeNodes(slateEditor, {\n              at: [childrenLength - 1 - index],\n            })\n          })\n          Transforms.insertNodes(\n            slateEditor,\n            slateEditor.pteCreateTextBlock({decorators: []}),\n            {at: [0]},\n          )\n          // Add a new selection in the top of the document\n          if (hadSelection) {\n            Transforms.select(slateEditor, [0, 0])\n          }\n        })\n      })\n    })\n    isChanged = true\n  }\n  // Remove, replace or add nodes according to what is changed.\n  if (value && value.length > 0) {\n    const slateValueFromProps = toSlateValue(value, {\n      schemaTypes: context.schema,\n    })\n\n    if (streamBlocks) {\n      await new Promise<void>((resolve) => {\n        Editor.withoutNormalizing(slateEditor, () => {\n          withRemoteChanges(slateEditor, () => {\n            withoutPatching(slateEditor, () => {\n              if (doneSyncing) {\n                resolve()\n                return\n              }\n\n              isChanged = removeExtraBlocks({\n                slateEditor,\n                slateValueFromProps,\n              })\n\n              const processBlocks = async () => {\n                for await (const [\n                  currentBlock,\n                  currentBlockIndex,\n                ] of getStreamedBlocks({\n                  slateValue: slateValueFromProps,\n                })) {\n                  const {blockChanged, blockValid} = syncBlock({\n                    context,\n                    sendBack,\n                    block: currentBlock,\n                    index: currentBlockIndex,\n                    slateEditor,\n                    value,\n                  })\n\n                  isChanged = blockChanged || isChanged\n                  isValid = isValid && blockValid\n                }\n\n                resolve()\n              }\n\n              processBlocks()\n            })\n          })\n        })\n      })\n    } else {\n      Editor.withoutNormalizing(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, () => {\n            if (doneSyncing) {\n              return\n            }\n\n            isChanged = removeExtraBlocks({\n              slateEditor,\n              slateValueFromProps,\n            })\n\n            let index = 0\n\n            for (const currentBlock of slateValueFromProps) {\n              const {blockChanged, blockValid} = syncBlock({\n                context,\n                sendBack,\n                block: currentBlock,\n                index,\n                slateEditor,\n                value,\n              })\n\n              isChanged = blockChanged || isChanged\n              isValid = isValid && blockValid\n              index++\n            }\n          })\n        })\n      })\n    }\n  }\n\n  if (!isValid) {\n    debug('Invalid value, returning')\n    doneSyncing = true\n    sendBack({type: 'done syncing', value})\n    return\n  }\n\n  if (isChanged) {\n    debug('Server value changed, syncing editor')\n    try {\n      slateEditor.onChange()\n    } catch (err) {\n      console.error(err)\n      sendBack({\n        type: 'invalid value',\n        resolution: null,\n        value,\n      })\n      doneSyncing = true\n      sendBack({type: 'done syncing', value})\n      return\n    }\n    if (hadSelection && !slateEditor.selection) {\n      Transforms.select(slateEditor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n      slateEditor.onChange()\n    }\n    sendBack({type: 'value changed', value})\n  } else {\n    debug('Server value and editor value is equal, no need to sync.')\n  }\n\n  doneSyncing = true\n  sendBack({type: 'done syncing', value})\n}\n\nfunction removeExtraBlocks({\n  slateEditor,\n  slateValueFromProps,\n}: {\n  slateEditor: PortableTextSlateEditor\n  slateValueFromProps: Array<Descendant>\n}) {\n  let isChanged = false\n  const childrenLength = slateEditor.children.length\n\n  // Remove blocks that have become superfluous\n  if (slateValueFromProps.length < childrenLength) {\n    for (let i = childrenLength - 1; i > slateValueFromProps.length - 1; i--) {\n      Transforms.removeNodes(slateEditor, {\n        at: [i],\n      })\n    }\n    isChanged = true\n  }\n  return isChanged\n}\n\nasync function* getStreamedBlocks({\n  slateValue,\n}: {\n  slateValue: Array<Descendant>\n}) {\n  let index = 0\n  for await (const block of slateValue) {\n    if (index % 10 === 0) {\n      await new Promise<void>((resolve) => setTimeout(resolve, 0))\n    }\n    yield [block, index] as const\n    index++\n  }\n}\n\nfunction syncBlock({\n  context,\n  sendBack,\n  block,\n  index,\n  slateEditor,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  block: Descendant\n  index: number\n  slateEditor: PortableTextSlateEditor\n  value: Array<PortableTextBlock>\n}) {\n  let blockChanged = false\n  let blockValid = true\n  const currentBlock = block\n  const currentBlockIndex = index\n  const oldBlock = slateEditor.children[currentBlockIndex]\n  const hasChanges = oldBlock && !isEqual(currentBlock, oldBlock)\n\n  Editor.withoutNormalizing(slateEditor, () => {\n    withRemoteChanges(slateEditor, () => {\n      withoutPatching(slateEditor, () => {\n        if (hasChanges && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          // Resolve validations that can be resolved automatically, without involving the user (but only if the value was changed)\n          if (\n            !validation.valid &&\n            validation.resolution?.autoResolve &&\n            validation.resolution?.patches.length > 0\n          ) {\n            // Only apply auto resolution if the value has been populated before and is different from the last one.\n            if (\n              !context.readOnly &&\n              context.previousValue &&\n              context.previousValue !== value\n            ) {\n              // Give a console warning about the fact that it did an auto resolution\n              console.warn(\n                `${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`,\n              )\n              validation.resolution.patches.forEach((patch) => {\n                sendBack({type: 'patch', patch})\n              })\n            }\n          }\n          if (validation.valid || validation.resolution?.autoResolve) {\n            if (oldBlock._key === currentBlock._key) {\n              if (debug.enabled) debug('Updating block', oldBlock, currentBlock)\n              _updateBlock(\n                slateEditor,\n                currentBlock,\n                oldBlock,\n                currentBlockIndex,\n              )\n            } else {\n              if (debug.enabled)\n                debug('Replacing block', oldBlock, currentBlock)\n              _replaceBlock(slateEditor, currentBlock, currentBlockIndex)\n            }\n            blockChanged = true\n          } else {\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n\n        if (!oldBlock && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          if (debug.enabled)\n            debug(\n              'Validating and inserting new block in the end of the value',\n              currentBlock,\n            )\n          if (validation.valid || validation.resolution?.autoResolve) {\n            Transforms.insertNodes(slateEditor, currentBlock, {\n              at: [currentBlockIndex],\n            })\n          } else {\n            debug('Invalid', validation)\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n      })\n    })\n  })\n\n  return {blockChanged, blockValid}\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _replaceBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // While replacing the block and the current selection focus is on the replaced block,\n  // temporarily deselect the editor then optimistically try to restore the selection afterwards.\n  const currentSelection = slateEditor.selection\n  const selectionFocusOnBlock =\n    currentSelection && currentSelection.focus.path[0] === currentBlockIndex\n  if (selectionFocusOnBlock) {\n    Transforms.deselect(slateEditor)\n  }\n  Transforms.removeNodes(slateEditor, {at: [currentBlockIndex]})\n  Transforms.insertNodes(slateEditor, currentBlock, {at: [currentBlockIndex]})\n  slateEditor.onChange()\n  if (selectionFocusOnBlock) {\n    Transforms.select(slateEditor, currentSelection)\n  }\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _updateBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  oldBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // Update the root props on the block\n  Transforms.setNodes(slateEditor, currentBlock as Partial<Node>, {\n    at: [currentBlockIndex],\n  })\n  // Text block's need to have their children updated as well (setNode does not target a node's children)\n  if (\n    slateEditor.isTextBlock(currentBlock) &&\n    slateEditor.isTextBlock(oldBlock)\n  ) {\n    const oldBlockChildrenLength = oldBlock.children.length\n    if (currentBlock.children.length < oldBlockChildrenLength) {\n      // Remove any children that have become superfluous\n      Array.from(\n        Array(oldBlockChildrenLength - currentBlock.children.length),\n      ).forEach((_, index) => {\n        const childIndex = oldBlockChildrenLength - 1 - index\n        if (childIndex > 0) {\n          debug('Removing child')\n          Transforms.removeNodes(slateEditor, {\n            at: [currentBlockIndex, childIndex],\n          })\n        }\n      })\n    }\n    currentBlock.children.forEach(\n      (currentBlockChild, currentBlockChildIndex) => {\n        const oldBlockChild = oldBlock.children[currentBlockChildIndex]\n        const isChildChanged = !isEqual(currentBlockChild, oldBlockChild)\n        const isTextChanged = !isEqual(\n          currentBlockChild.text,\n          oldBlockChild?.text,\n        )\n        const path = [currentBlockIndex, currentBlockChildIndex]\n        if (isChildChanged) {\n          // Update if this is the same child\n          if (currentBlockChild._key === oldBlockChild?._key) {\n            debug('Updating changed child', currentBlockChild, oldBlockChild)\n            Transforms.setNodes(\n              slateEditor,\n              currentBlockChild as Partial<Node>,\n              {\n                at: path,\n              },\n            )\n            const isSpanNode =\n              Text.isText(currentBlockChild) &&\n              currentBlockChild._type === 'span' &&\n              Text.isText(oldBlockChild) &&\n              oldBlockChild._type === 'span'\n            if (isSpanNode && isTextChanged) {\n              if (oldBlockChild.text.length > 0) {\n                Transforms.delete(slateEditor, {\n                  at: {\n                    focus: {path, offset: 0},\n                    anchor: {path, offset: oldBlockChild.text.length},\n                  },\n                })\n              }\n              Transforms.insertText(slateEditor, currentBlockChild.text, {\n                at: path,\n              })\n              slateEditor.onChange()\n            } else if (!isSpanNode) {\n              // If it's a inline block, also update the void text node key\n              debug('Updating changed inline object child', currentBlockChild)\n              Transforms.setNodes(\n                slateEditor,\n                {_key: VOID_CHILD_KEY},\n                {\n                  at: [...path, 0],\n                  voids: true,\n                },\n              )\n            }\n            // Replace the child if _key's are different\n          } else if (oldBlockChild) {\n            debug('Replacing child', currentBlockChild)\n            Transforms.removeNodes(slateEditor, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n            // Insert it if it didn't exist before\n          } else if (!oldBlockChild) {\n            debug('Inserting new child', currentBlockChild)\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n          }\n        }\n      },\n    )\n  }\n}\n","import {createActor} from 'xstate'\nimport {createCoreConverters} from '../converters/converters.core'\nimport type {Editor, EditorConfig} from '../editor'\nimport {debugWithName} from '../internal-utils/debug'\nimport {compileType} from '../internal-utils/schema'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport {corePriority} from '../priority/priority.core'\nimport {createEditorPriority} from '../priority/priority.types'\nimport type {EditableAPI, PortableTextSlateEditor} from '../types/editor'\nimport {createSlateEditor, type SlateEditor} from './create-slate-editor'\nimport type {EditorActor} from './editor-machine'\nimport {editorMachine} from './editor-machine'\nimport {\n  compileSchemaDefinitionToLegacySchema,\n  legacySchemaToEditorSchema,\n} from './editor-schema'\nimport {getEditorSnapshot} from './editor-selector'\nimport {defaultKeyGenerator} from './key-generator'\nimport {createLegacySchema} from './legacy-schema'\nimport {mutationMachine, type MutationActor} from './mutation-machine'\nimport {createEditableAPI} from './plugins/createWithEditableAPI'\nimport {relayMachine, type RelayActor} from './relay-machine'\nimport {syncMachine, type SyncActor} from './sync-machine'\n\nconst debug = debugWithName('setup')\n\nexport type InternalEditor = Editor & {\n  _internal: {\n    editable: EditableAPI\n    editorActor: EditorActor\n    slateEditor: SlateEditor\n  }\n}\n\nexport function createInternalEditor(config: EditorConfig): {\n  actors: {\n    editorActor: EditorActor\n    mutationActor: MutationActor\n    relayActor: RelayActor\n    syncActor: SyncActor\n  }\n  editor: InternalEditor\n  subscriptions: Array<() => () => void>\n} {\n  debug('Creating new Editor instance')\n\n  const subscriptions: Array<() => () => void> = []\n  const editorActor = createActor(editorMachine, {\n    input: editorConfigToMachineInput(config),\n  })\n  const relayActor = createActor(relayMachine)\n  const slateEditor = createSlateEditor({\n    editorActor,\n    relayActor,\n    subscriptions,\n  })\n  const editable = createEditableAPI(slateEditor.instance, editorActor)\n  const {mutationActor, syncActor} = createActors({\n    editorActor,\n    relayActor,\n    slateEditor: slateEditor.instance,\n    subscriptions,\n  })\n\n  const editor = {\n    getSnapshot: () =>\n      getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: slateEditor.instance,\n      }),\n    registerBehavior: (behaviorConfig) => {\n      const priority = createEditorPriority({\n        name: 'custom',\n        reference: {\n          priority: corePriority,\n          importance: 'higher',\n        },\n      })\n      const behaviorConfigWithPriority = {\n        ...behaviorConfig,\n        priority,\n      }\n\n      editorActor.send({\n        type: 'add behavior',\n        behaviorConfig: behaviorConfigWithPriority,\n      })\n\n      return () => {\n        editorActor.send({\n          type: 'remove behavior',\n          behaviorConfig: behaviorConfigWithPriority,\n        })\n      }\n    },\n    send: (event) => {\n      switch (event.type) {\n        case 'update value':\n          syncActor.send(event)\n          break\n\n        case 'update readOnly':\n        case 'patches':\n        case 'update maxBlocks':\n          editorActor.send(event)\n          break\n\n        case 'blur':\n          editorActor.send({\n            type: 'blur',\n            editor: slateEditor.instance,\n          })\n          break\n\n        case 'focus':\n          editorActor.send({\n            type: 'focus',\n            editor: slateEditor.instance,\n          })\n          break\n\n        case 'insert.block object':\n          editorActor.send({\n            type: 'behavior event',\n            behaviorEvent: {\n              type: 'insert.block',\n              block: {\n                _type: event.blockObject.name,\n                ...(event.blockObject.value ?? {}),\n              },\n              placement: event.placement,\n            },\n            editor: slateEditor.instance,\n          })\n          break\n\n        default:\n          editorActor.send({\n            type: 'behavior event',\n            behaviorEvent: event,\n            editor: slateEditor.instance,\n          })\n      }\n    },\n    on: (event, listener) => {\n      const subscription = relayActor.on(event, (event) => {\n        switch (event.type) {\n          case 'blurred':\n          case 'done loading':\n          case 'editable':\n          case 'focused':\n          case 'invalid value':\n          case 'loading':\n          case 'mutation':\n          case 'patch':\n          case 'read only':\n          case 'ready':\n          case 'selection':\n          case 'value changed':\n            listener(event)\n            break\n        }\n      })\n\n      return subscription\n    },\n    _internal: {\n      editable,\n      editorActor,\n      slateEditor,\n    },\n  } satisfies InternalEditor\n\n  return {\n    actors: {\n      editorActor,\n      mutationActor,\n      relayActor,\n      syncActor,\n    },\n    editor,\n    subscriptions,\n  }\n}\n\nfunction editorConfigToMachineInput(config: EditorConfig) {\n  const {legacySchema, schema} = compileSchemasFromEditorConfig(config)\n\n  return {\n    converters: createCoreConverters(legacySchema),\n    getLegacySchema: () => legacySchema,\n    keyGenerator: config.keyGenerator ?? defaultKeyGenerator,\n    maxBlocks: config.maxBlocks,\n    readOnly: config.readOnly,\n    schema,\n    initialValue: config.initialValue,\n  } as const\n}\n\nfunction compileSchemasFromEditorConfig(config: EditorConfig) {\n  const legacySchema = config.schemaDefinition\n    ? compileSchemaDefinitionToLegacySchema(config.schemaDefinition)\n    : createLegacySchema(\n        config.schema.hasOwnProperty('jsonType')\n          ? config.schema\n          : compileType(config.schema),\n      )\n  const schema = legacySchemaToEditorSchema(legacySchema)\n\n  return {\n    legacySchema,\n    schema,\n  }\n}\n\nfunction createActors(config: {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  slateEditor: PortableTextSlateEditor\n  subscriptions: Array<() => () => void>\n}): {\n  mutationActor: MutationActor\n  syncActor: SyncActor\n} {\n  debug('Creating new Actors')\n\n  const mutationActor = createActor(mutationMachine, {\n    input: {\n      readOnly: config.editorActor\n        .getSnapshot()\n        .matches({'edit mode': 'read only'}),\n      schema: config.editorActor.getSnapshot().context.schema,\n      slateEditor: config.slateEditor,\n    },\n  })\n\n  const syncActor = createActor(syncMachine, {\n    input: {\n      initialValue: config.editorActor.getSnapshot().context.initialValue,\n      keyGenerator: config.editorActor.getSnapshot().context.keyGenerator,\n      readOnly: config.editorActor\n        .getSnapshot()\n        .matches({'edit mode': 'read only'}),\n      schema: config.editorActor.getSnapshot().context.schema,\n      slateEditor: config.slateEditor,\n    },\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = mutationActor.on('*', (event) => {\n      if (event.type === 'has pending mutations') {\n        syncActor.send({type: 'has pending mutations'})\n      }\n      if (event.type === 'mutation') {\n        syncActor.send({type: 'mutation'})\n        config.editorActor.send({\n          type: 'mutation',\n          patches: event.patches,\n          snapshot: event.snapshot,\n          value: event.snapshot,\n        })\n      }\n      if (event.type === 'patch') {\n        config.relayActor.send(event)\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = syncActor.on('*', (event) => {\n      switch (event.type) {\n        case 'invalid value':\n          config.relayActor.send(event)\n          break\n        case 'value changed':\n          config.relayActor.send(event)\n          break\n        case 'patch':\n          config.editorActor.send({\n            ...event,\n            type: 'internal.patch',\n            value: fromSlateValue(\n              config.slateEditor.children,\n              config.editorActor.getSnapshot().context.schema.block.name,\n              KEY_TO_VALUE_ELEMENT.get(config.slateEditor),\n            ),\n          })\n          break\n\n        default:\n          config.editorActor.send(event)\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = config.editorActor.subscribe((snapshot) => {\n      if (snapshot.matches({'edit mode': 'read only'})) {\n        mutationActor.send({type: 'update readOnly', readOnly: true})\n        syncActor.send({type: 'update readOnly', readOnly: true})\n      } else {\n        mutationActor.send({type: 'update readOnly', readOnly: false})\n        syncActor.send({type: 'update readOnly', readOnly: false})\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = config.editorActor.on('*', (event) => {\n      switch (event.type) {\n        case 'editable':\n        case 'mutation':\n        case 'ready':\n        case 'read only':\n        case 'selection':\n          config.relayActor.send(event)\n          break\n        case 'internal.patch':\n          mutationActor.send({...event, type: 'patch'})\n          break\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  return {\n    mutationActor,\n    syncActor,\n  }\n}\n","import {\n  createContext,\n  startTransition,\n  useContext,\n  useEffect,\n  useState,\n} from 'react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {EditorSelection} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * A React context for sharing the editor selection.\n */\nconst PortableTextEditorSelectionContext =\n  createContext<EditorSelection | null>(null)\n\n/**\n * @deprecated Use `useEditorSelector` to get the current editor selection.\n * @public\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorSelection = (): EditorSelection => {\n  const selection = useContext(PortableTextEditorSelectionContext)\n\n  if (selection === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorSelection\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n  return selection\n}\nconst debug = debugWithName('component:PortableTextEditor:SelectionProvider')\nconst debugVerbose = debug.enabled && false\n\n/**\n * @internal\n */\nexport function PortableTextEditorSelectionProvider(\n  props: React.PropsWithChildren<{\n    editorActor: EditorActor\n  }>,\n) {\n  const [selection, setSelection] = useState<EditorSelection>(null)\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to selection changes')\n    const subscription = props.editorActor.on('selection', (event) => {\n      // Set the selection state in a transition, we don't need the state immediately.\n      startTransition(() => {\n        if (debugVerbose) debug('Setting selection')\n        setSelection(event.selection)\n      })\n    })\n\n    return () => {\n      debug('Unsubscribing to selection changes')\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor])\n\n  return (\n    <PortableTextEditorSelectionContext.Provider value={selection}>\n      {props.children}\n    </PortableTextEditorSelectionContext.Provider>\n  )\n}\n","import {createContext} from 'react'\nimport type {RelayActor} from './relay-machine'\n\nexport const RelayActorContext = createContext<RelayActor>({} as RelayActor)\n","import {useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorChange} from '../types/editor'\nimport type {InternalEditorEmittedEvent, RelayActor} from './relay-machine'\n\nexport function RouteEventsToChanges(props: {\n  relayActor: RelayActor\n  onChange: (change: EditorChange) => void\n}) {\n  // We want to ensure that _when_ `props.onChange` is called, it uses the current value.\n  // But we don't want to have the `useEffect` run setup + teardown + setup every time the prop might change, as that's unnecessary.\n  // So we use our own polyfill that lets us use an upcoming React hook that solves this exact problem.\n  // https://19.react.dev/learn/separating-events-from-effects#declaring-an-effect-event\n  const handleChange = useEffectEvent((change: EditorChange) =>\n    props.onChange(change),\n  )\n\n  useEffect(() => {\n    const sub = props.relayActor.on('*', (event) => {\n      const change = eventToChange(event)\n\n      if (change) {\n        handleChange(change)\n      }\n    })\n    return () => {\n      sub.unsubscribe()\n    }\n  }, [props.relayActor])\n\n  return null\n}\n\nexport function eventToChange(\n  event: InternalEditorEmittedEvent,\n): EditorChange | undefined {\n  switch (event.type) {\n    case 'blurred': {\n      return {type: 'blur', event: event.event}\n    }\n    case 'patch':\n      return event\n    case 'loading': {\n      return {type: 'loading', isLoading: true}\n    }\n    case 'done loading': {\n      return {type: 'loading', isLoading: false}\n    }\n    case 'focused': {\n      return {type: 'focus', event: event.event}\n    }\n    case 'value changed': {\n      return {type: 'value', value: event.value}\n    }\n    case 'invalid value': {\n      return {\n        type: 'invalidValue',\n        resolution: event.resolution,\n        value: event.value,\n      }\n    }\n    case 'mutation': {\n      return event\n    }\n    case 'ready': {\n      return event\n    }\n    case 'selection': {\n      return event\n    }\n    case 'unset': {\n      return event\n    }\n  }\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n} from '@sanity/types'\nimport {\n  Component,\n  useEffect,\n  type MutableRefObject,\n  type PropsWithChildren,\n} from 'react'\nimport {Subject} from 'rxjs'\nimport {Slate} from 'slate-react'\nimport {debugWithName} from '../internal-utils/debug'\nimport {stopActor} from '../internal-utils/stop-actor'\nimport type {AddedAnnotationPaths} from '../operations/behavior.operation.annotation.add'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorChange,\n  EditorChanges,\n  EditorSelection,\n  PatchObservable,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {createInternalEditor, type InternalEditor} from './create-editor'\nimport {EditorActorContext} from './editor-actor-context'\nimport type {EditorActor} from './editor-machine'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport type {MutationActor} from './mutation-machine'\nimport {RelayActorContext} from './relay-actor-context'\nimport type {RelayActor} from './relay-machine'\nimport {eventToChange} from './route-events-to-changes'\nimport type {SyncActor} from './sync-machine'\n\nconst debug = debugWithName('component:PortableTextEditor')\n\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport type PortableTextEditorProps<\n  TEditor extends InternalEditor | undefined = undefined,\n> = PropsWithChildren<\n  TEditor extends InternalEditor\n    ? {\n        /**\n         * @internal\n         */\n        editor: TEditor\n      }\n    : {\n        editor?: undefined\n\n        /**\n         * Function that gets called when the editor changes the value\n         */\n        onChange: (change: EditorChange) => void\n\n        /**\n         * Schema type for the portable text field\n         */\n        schemaType: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n\n        /**\n         * Maximum number of blocks to allow within the editor\n         */\n        maxBlocks?: number | string\n\n        /**\n         * Function used to generate keys for array items (`_key`)\n         */\n        keyGenerator?: () => string\n\n        /**\n         * Observable of local and remote patches for the edited value.\n         */\n        patches$?: PatchObservable\n\n        /**\n         * Backward compatibility (renamed to patches$).\n         */\n        incomingPatches$?: PatchObservable\n\n        /**\n         * Whether or not the editor should be in read-only mode\n         */\n        readOnly?: boolean\n\n        /**\n         * The current value of the portable text field\n         */\n        value?: PortableTextBlock[]\n\n        /**\n         * A ref to the editor instance\n         */\n        editorRef?: MutableRefObject<PortableTextEditor | null>\n      }\n>\n\n/**\n * The main Portable Text Editor component.\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport class PortableTextEditor extends Component<\n  PortableTextEditorProps<InternalEditor | undefined>\n> {\n  public static displayName = 'PortableTextEditor'\n  /**\n   * An observable of all the editor changes.\n   */\n  public change$: EditorChanges = new Subject()\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  public schemaTypes: PortableTextMemberSchemaTypes\n  /**\n   * The editor instance\n   */\n  private editor: InternalEditor\n  /*\n   * The editor API (currently implemented with Slate).\n   */\n  private editable: EditableAPI\n\n  private actors?: {\n    editorActor: EditorActor\n    mutationActor: MutationActor\n    relayActor: RelayActor\n    syncActor: SyncActor\n  }\n\n  private unsubscribers: Array<() => void> = []\n\n  constructor(props: PortableTextEditorProps) {\n    super(props)\n\n    if (props.editor) {\n      this.editor = props.editor as InternalEditor\n      this.schemaTypes = this.editor._internal.editorActor\n        .getSnapshot()\n        .context.getLegacySchema()\n    } else {\n      const {actors, editor, subscriptions} = createInternalEditor({\n        initialValue: props.value,\n        keyGenerator: props.keyGenerator,\n        maxBlocks:\n          props.maxBlocks === undefined\n            ? undefined\n            : Number.parseInt(props.maxBlocks.toString(), 10),\n        readOnly: props.readOnly,\n        schema: props.schemaType,\n      })\n\n      this.unsubscribers.push(\n        (() => {\n          const subscription = actors.relayActor.on('*', (event) => {\n            const change = eventToChange(event)\n\n            if (change) {\n              props.onChange(change)\n\n              this.change$.next(change)\n            }\n          })\n\n          return () => {\n            subscription.unsubscribe()\n          }\n        })(),\n      )\n\n      for (const subscription of subscriptions) {\n        this.unsubscribers.push(subscription())\n      }\n\n      this.actors = actors\n\n      this.editor = editor\n      this.schemaTypes = actors.editorActor\n        .getSnapshot()\n        .context.getLegacySchema()\n    }\n\n    this.editable = this.editor._internal.editable\n  }\n\n  componentDidMount(): void {\n    if (!this.actors) {\n      return\n    }\n\n    this.actors.editorActor.start()\n    this.actors.mutationActor.start()\n    this.actors.relayActor.start()\n    this.actors.syncActor.start()\n  }\n\n  componentDidUpdate(prevProps: PortableTextEditorProps) {\n    // Set up the schema type lookup table again if the source schema type changes\n    if (\n      !this.props.editor &&\n      !prevProps.editor &&\n      this.props.schemaType !== prevProps.schemaType\n    ) {\n      console.warn('Updating schema type is no longer supported')\n    }\n\n    if (!this.props.editor && !prevProps.editor) {\n      if (this.props.readOnly !== prevProps.readOnly) {\n        this.editor._internal.editorActor.send({\n          type: 'update readOnly',\n          readOnly: this.props.readOnly ?? false,\n        })\n      }\n\n      if (this.props.maxBlocks !== prevProps.maxBlocks) {\n        this.editor._internal.editorActor.send({\n          type: 'update maxBlocks',\n          maxBlocks:\n            this.props.maxBlocks === undefined\n              ? undefined\n              : Number.parseInt(this.props.maxBlocks.toString(), 10),\n        })\n      }\n\n      if (this.props.value !== prevProps.value) {\n        this.editor.send({\n          type: 'update value',\n          value: this.props.value,\n        })\n      }\n\n      if (\n        this.props.editorRef !== prevProps.editorRef &&\n        this.props.editorRef\n      ) {\n        this.props.editorRef.current = this\n      }\n    }\n  }\n\n  componentWillUnmount(): void {\n    for (const unsubscribe of this.unsubscribers) {\n      unsubscribe()\n    }\n\n    if (this.actors) {\n      stopActor(this.actors.editorActor)\n      stopActor(this.actors.mutationActor)\n      stopActor(this.actors.relayActor)\n      stopActor(this.actors.syncActor)\n    }\n  }\n\n  public setEditable = (editable: EditableAPI) => {\n    this.editor._internal.editable = {\n      ...this.editor._internal.editable,\n      ...editable,\n    }\n  }\n\n  render() {\n    const legacyPatches = !this.props.editor\n      ? (this.props.incomingPatches$ ?? this.props.patches$)\n      : undefined\n\n    return (\n      <>\n        {legacyPatches ? (\n          <RoutePatchesObservableToEditorActor\n            editorActor={this.editor._internal.editorActor}\n            patches$={legacyPatches}\n          />\n        ) : null}\n        <EditorActorContext.Provider value={this.editor._internal.editorActor}>\n          <RelayActorContext.Provider value={this.actors!.relayActor}>\n            <Slate\n              editor={this.editor._internal.slateEditor.instance}\n              initialValue={this.editor._internal.slateEditor.initialValue}\n            >\n              <PortableTextEditorContext.Provider value={this}>\n                <PortableTextEditorSelectionProvider\n                  editorActor={this.editor._internal.editorActor}\n                >\n                  {this.props.children}\n                </PortableTextEditorSelectionProvider>\n              </PortableTextEditorContext.Provider>\n            </Slate>\n          </RelayActorContext.Provider>\n        </EditorActorContext.Provider>\n      </>\n    )\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.getActiveAnnotations)\n   * ```\n   */\n  static activeAnnotations = (\n    editor: PortableTextEditor,\n  ): PortableTextObject[] => {\n    return editor && editor.editable ? editor.editable.activeAnnotations() : []\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveAnnotation(...))\n   * ```\n   */\n  static isAnnotationActive = (\n    editor: PortableTextEditor,\n    annotationType: PortableTextObject['_type'],\n  ): boolean => {\n    return editor && editor.editable\n      ? editor.editable.isAnnotationActive(annotationType)\n      : false\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.add',\n   *  annotation: {\n   *    name: '...',\n   *    value: {...},\n   *  }\n   * })\n   * ```\n   */\n  static addAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): AddedAnnotationPaths | undefined =>\n    editor.editable?.addAnnotation(type, value)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'blur',\n   * })\n   * ```\n   */\n  static blur = (editor: PortableTextEditor): void => {\n    debug('Host blurred')\n    editor.editable?.blur()\n  }\n\n  static delete = (\n    editor: PortableTextEditor,\n    selection: EditorSelection,\n    options?: EditableAPIDeleteOptions,\n  ) => editor.editable?.delete(selection, options)\n\n  static findDOMNode = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.findDOMNode(element)\n  }\n\n  static findByPath = (editor: PortableTextEditor, path: Path) => {\n    return editor.editable?.findByPath(path) || []\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'focus',\n   * })\n   * ```\n   */\n  static focus = (editor: PortableTextEditor): void => {\n    debug('Host requesting focus')\n    editor.editable?.focus()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusBlock = useEditorSelector(editor, selectors.getFocusBlock)\n   * ```\n   */\n  static focusBlock = (editor: PortableTextEditor) => {\n    return editor.editable?.focusBlock()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusChild = useEditorSelector(editor, selectors.getFocusChild)\n   * ```\n   */\n  static focusChild = (\n    editor: PortableTextEditor,\n  ): PortableTextChild | undefined => {\n    return editor.editable?.focusChild()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selection = useEditorSelector(editor, selectors.getSelection)\n   * ```\n   */\n  static getSelection = (editor: PortableTextEditor) => {\n    return editor.editable ? editor.editable.getSelection() : null\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const value = useEditorSelector(editor, selectors.getValue)\n   * ```\n   */\n  static getValue = (editor: PortableTextEditor) => {\n    return editor.editable?.getValue()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveStyle(...))\n   * ```\n   */\n  static hasBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    return editor.editable?.hasBlockStyle(blockStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveListItem(...))\n   * ```\n   */\n  static hasListStyle = (editor: PortableTextEditor, listStyle: string) => {\n    return editor.editable?.hasListStyle(listStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionCollapsed = useEditorSelector(editor, selectors.isSelectionCollapsed)\n   * ```\n   */\n  static isCollapsedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isCollapsedSelection()\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionExpanded = useEditorSelector(editor, selectors.isSelectionExpanded)\n   * ```\n   */\n  static isExpandedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isExpandedSelection()\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveDecorator(...))\n   * ```\n   */\n  static isMarkActive = (editor: PortableTextEditor, mark: string) =>\n    editor.editable?.isMarkActive(mark)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.span',\n   *  text: '...',\n   *  annotations: [{name: '...', value: {...}}],\n   *  decorators: ['...'],\n   * })\n   * editor.send({\n   *  type: 'insert.inline object',\n   *  inlineObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   * })\n   * ```\n   */\n  static insertChild = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    debug(`Host inserting child`)\n    return editor.editable?.insertChild(type, value)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.block object',\n   *  blockObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   *  placement: 'auto' | 'after' | 'before',\n   * })\n   * ```\n   */\n  static insertBlock = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    return editor.editable?.insertBlock(type, value)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.break',\n   * })\n   * ```\n   */\n  static insertBreak = (editor: PortableTextEditor): void => {\n    return editor.editable?.insertBreak()\n  }\n\n  static isVoid = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.isVoid(element)\n  }\n\n  static isObjectPath = (_editor: PortableTextEditor, path: Path): boolean => {\n    if (!path || !Array.isArray(path)) return false\n    const isChildObjectEditPath = path.length > 3 && path[1] === 'children'\n    const isBlockObjectEditPath = path.length > 1 && path[1] !== 'children'\n    return isBlockObjectEditPath || isChildObjectEditPath\n  }\n\n  static marks = (editor: PortableTextEditor) => {\n    return editor.editable?.marks()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'select',\n   *  selection: {...},\n   * })\n   * ```\n   */\n  static select = (\n    editor: PortableTextEditor,\n    selection: EditorSelection | null,\n  ) => {\n    debug(`Host setting selection`, selection)\n    editor.editable?.select(selection)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.remove',\n   *  annotation: {\n   *    name: '...',\n   *  },\n   * })\n   * ```\n   */\n  static removeAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n  ) => editor.editable?.removeAnnotation(type)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'style.toggle',\n   *  style: '...',\n   * })\n   * ```\n   */\n  static toggleBlockStyle = (\n    editor: PortableTextEditor,\n    blockStyle: string,\n  ) => {\n    debug(`Host is toggling block style`)\n    return editor.editable?.toggleBlockStyle(blockStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'list item.toggle',\n   *  listItem: '...',\n   * })\n   * ```\n   */\n  static toggleList = (editor: PortableTextEditor, listStyle: string): void => {\n    return editor.editable?.toggleList(listStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'decorator.toggle',\n   *  decorator: '...',\n   * })\n   * ```\n   */\n  static toggleMark = (editor: PortableTextEditor, mark: string): void => {\n    debug(`Host toggling mark`, mark)\n    editor.editable?.toggleMark(mark)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selectedSlice = useEditorSelector(editor, selectors.getSelectedSlice)\n   * ```\n   */\n  static getFragment = (\n    editor: PortableTextEditor,\n  ): PortableTextBlock[] | undefined => {\n    return editor.editable?.getFragment()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.undo',\n   * })\n   * ```\n   */\n  static undo = (editor: PortableTextEditor): void => {\n    debug('Host undoing')\n    editor.editable?.undo()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.redo',\n   * })\n   * ```\n   */\n  static redo = (editor: PortableTextEditor): void => {\n    debug('Host redoing')\n    editor.editable?.redo()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isOverlapping = useEditorSelector(editor, selectors.isOverlappingSelection(selectionB))\n   * ```\n   */\n  static isSelectionsOverlapping = (\n    editor: PortableTextEditor,\n    selectionA: EditorSelection,\n    selectionB: EditorSelection,\n  ) => {\n    return editor.editable?.isSelectionsOverlapping(selectionA, selectionB)\n  }\n}\n\nfunction RoutePatchesObservableToEditorActor(props: {\n  editorActor: EditorActor\n  patches$: PatchObservable\n}) {\n  useEffect(() => {\n    const subscription = props.patches$.subscribe((payload) => {\n      props.editorActor.send({\n        type: 'patches',\n        ...payload,\n      })\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, props.patches$])\n\n  return null\n}\n","import {useSelector} from '@xstate/react'\nimport {isEqual, uniq} from 'lodash'\nimport {\n  startTransition,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type ReactElement,\n} from 'react'\nimport {useSelected, useSlateStatic, type RenderLeafProps} from 'slate-react'\nimport type {\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {usePortableTextEditor} from '../hooks/usePortableTextEditor'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nexport interface RenderSpanProps extends RenderLeafProps {\n  children: ReactElement<any>\n  renderAnnotation?: RenderAnnotationFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  readOnly: boolean\n}\n\nexport function RenderSpan(props: RenderSpanProps) {\n  const slateEditor = useSlateStatic()\n  const editorActor = useContext(EditorActorContext)\n  const legacySchema = useSelector(editorActor, (s) =>\n    s.context.getLegacySchema(),\n  )\n  const spanRef = useRef<HTMLElement>(null)\n  const portableTextEditor = usePortableTextEditor()\n  const blockSelected = useSelected()\n  const [focused, setFocused] = useState(false)\n  const [selected, setSelected] = useState(false)\n\n  const parent = props.children.props.parent\n  const block = parent && slateEditor.isTextBlock(parent) ? parent : undefined\n\n  const path = useMemo(\n    () =>\n      block\n        ? [{_key: block._key}, 'children', {_key: props.leaf._key}]\n        : undefined,\n    [block, props.leaf._key],\n  )\n\n  const decoratorSchemaTypes = editorActor\n    .getSnapshot()\n    .context.schema.decorators.map((decorator) => decorator.name)\n\n  const decorators = uniq(\n    (props.leaf.marks ?? []).filter((mark) =>\n      decoratorSchemaTypes.includes(mark),\n    ),\n  )\n\n  const annotationMarkDefs = (props.leaf.marks ?? []).flatMap((mark) => {\n    if (decoratorSchemaTypes.includes(mark)) {\n      return []\n    }\n\n    const markDef = block?.markDefs?.find((markDef) => markDef._key === mark)\n\n    if (markDef) {\n      return [markDef]\n    }\n\n    return []\n  })\n\n  const shouldTrackSelectionAndFocus =\n    annotationMarkDefs.length > 0 && blockSelected\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(false)\n      return\n    }\n\n    const sel = PortableTextEditor.getSelection(portableTextEditor)\n\n    if (\n      sel &&\n      isEqual(sel.focus.path, path) &&\n      PortableTextEditor.isCollapsedSelection(portableTextEditor)\n    ) {\n      startTransition(() => {\n        setFocused(true)\n      })\n    }\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor])\n\n  // Function to check if this leaf is currently inside the user's text selection\n  const setSelectedFromRange = useCallback(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return\n    }\n\n    const winSelection = window.getSelection()\n\n    if (!winSelection) {\n      setSelected(false)\n      return\n    }\n\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0)\n\n      if (spanRef.current && range.intersectsNode(spanRef.current)) {\n        setSelected(true)\n      } else {\n        setSelected(false)\n      }\n    } else {\n      setSelected(false)\n    }\n  }, [shouldTrackSelectionAndFocus])\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return undefined\n    }\n\n    const onBlur = editorActor.on('blurred', () => {\n      setFocused(false)\n      setSelected(false)\n    })\n\n    const onFocus = editorActor.on('focused', () => {\n      const sel = PortableTextEditor.getSelection(portableTextEditor)\n\n      if (\n        sel &&\n        isEqual(sel.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      }\n\n      setSelectedFromRange()\n    })\n\n    const onSelection = editorActor.on('selection', (event) => {\n      if (\n        event.selection &&\n        isEqual(event.selection.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      } else {\n        setFocused(false)\n      }\n      setSelectedFromRange()\n    })\n\n    return () => {\n      onBlur.unsubscribe()\n      onFocus.unsubscribe()\n      onSelection.unsubscribe()\n    }\n  }, [\n    editorActor,\n    path,\n    portableTextEditor,\n    setSelectedFromRange,\n    shouldTrackSelectionAndFocus,\n  ])\n\n  useEffect(() => setSelectedFromRange(), [setSelectedFromRange])\n\n  let children = props.children\n\n  /**\n   * Support `renderDecorator` render function for each Decorator\n   */\n  for (const mark of decorators) {\n    const legacyDecoratorSchemaType = legacySchema.decorators.find(\n      (dec) => dec.value === mark,\n    )\n\n    if (path && legacyDecoratorSchemaType && props.renderDecorator) {\n      children = props.renderDecorator({\n        children: children,\n        editorElementRef: spanRef,\n        focused,\n        path,\n        selected,\n        schemaType: legacyDecoratorSchemaType,\n        value: mark,\n        type: legacyDecoratorSchemaType,\n      })\n    }\n  }\n\n  /**\n   * Support `renderAnnotation` render function for each Annotation\n   */\n  for (const annotationMarkDef of annotationMarkDefs) {\n    const legacyAnnotationSchemaType = legacySchema.annotations.find(\n      (t) => t.name === annotationMarkDef._type,\n    )\n    if (legacyAnnotationSchemaType) {\n      if (block && path && props.renderAnnotation) {\n        children = (\n          <span ref={spanRef}>\n            {props.renderAnnotation({\n              block,\n              children: children,\n              editorElementRef: spanRef,\n              focused,\n              path,\n              selected,\n              schemaType: legacyAnnotationSchemaType,\n              value: annotationMarkDef,\n              type: legacyAnnotationSchemaType,\n            })}\n          </span>\n        )\n      } else {\n        children = <span ref={spanRef}>{children}</span>\n      }\n    }\n  }\n\n  /**\n   * Support `renderChild` render function for the Span itself\n   */\n  if (block && path && props.renderChild) {\n    const child = block.children.find(\n      (_child) => _child._key === props.leaf._key,\n    ) // Ensure object equality\n\n    if (child) {\n      children = props.renderChild({\n        annotations: annotationMarkDefs,\n        children: children,\n        editorElementRef: spanRef,\n        focused,\n        path,\n        schemaType: legacySchema.span,\n        selected,\n        value: child,\n        type: legacySchema.span,\n      })\n    }\n  }\n\n  return (\n    <span {...props.attributes} ref={spanRef}>\n      {children}\n    </span>\n  )\n}\n","import {useSelector} from '@xstate/react'\nimport {useContext, type CSSProperties} from 'react'\nimport type {Text} from 'slate'\nimport type {RenderLeafProps} from 'slate-react'\nimport type {\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderPlaceholderFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {RenderSpan} from './render-span'\n\nconst PLACEHOLDER_STYLE: CSSProperties = {\n  position: 'absolute',\n  userSelect: 'none',\n  pointerEvents: 'none',\n  left: 0,\n  right: 0,\n}\n\nexport function RenderLeaf(\n  props: RenderLeafProps & {\n    leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n    readOnly: boolean\n    renderAnnotation?: RenderAnnotationFunction\n    renderChild?: RenderChildFunction\n    renderDecorator?: RenderDecoratorFunction\n    renderPlaceholder?: RenderPlaceholderFunction\n  },\n) {\n  const editorActor = useContext(EditorActorContext)\n  const schema = useSelector(editorActor, (s) => s.context.schema)\n\n  if (props.leaf._type !== schema.span.name) {\n    return props.children\n  }\n\n  let renderedSpan = <RenderSpan {...props} />\n\n  if (\n    props.renderPlaceholder &&\n    props.leaf.placeholder &&\n    props.text.text === ''\n  ) {\n    return (\n      <>\n        <span style={PLACEHOLDER_STYLE} contentEditable={false}>\n          {props.renderPlaceholder()}\n        </span>\n        {renderedSpan}\n      </>\n    )\n  }\n\n  const rangeDecoration = props.leaf.rangeDecoration\n\n  if (rangeDecoration) {\n    renderedSpan = rangeDecoration.component({children: renderedSpan})\n  }\n\n  return renderedSpan\n}\n","import type {Editable} from 'slate-react'\n\nexport type RenderTextProps = Parameters<\n  NonNullable<React.ComponentProps<typeof Editable>['renderText']>\n>[0]\n\nexport function RenderText(props: RenderTextProps) {\n  return (\n    <span\n      {...props.attributes}\n      data-child-key={props.text._key}\n      data-child-name={props.text._type}\n      data-child-type=\"span\"\n    >\n      {props.children}\n    </span>\n  )\n}\n","import type {KeyboardEvent} from 'react'\nimport type {ReactEditor} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isHotkey} from '../../internal-utils/is-hotkey'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {HotkeyOptions} from '../../types/options'\nimport type {EditorActor} from '../editor-machine'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withHotKeys')\n\n/**\n * This plugin takes care of all hotkeys in the editor\n *\n */\nexport function createWithHotkeys(\n  editorActor: EditorActor,\n  portableTextEditor: PortableTextEditor,\n  hotkeysFromOptions?: HotkeyOptions,\n): (editor: PortableTextSlateEditor & ReactEditor) => any {\n  const reservedHotkeys = ['enter', 'tab', 'shift', 'delete', 'end']\n  const activeHotkeys = hotkeysFromOptions ?? {}\n  return function withHotKeys(editor: PortableTextSlateEditor & ReactEditor) {\n    editor.pteWithHotKeys = (event: KeyboardEvent<HTMLDivElement>): void => {\n      // Wire up custom marks hotkeys\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === 'marks') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault()\n              const possibleMark = activeHotkeys[cat]\n              if (possibleMark) {\n                const mark = possibleMark[hotkey]\n                debug(`HotKey ${hotkey} to toggle ${mark}`)\n                editorActor.send({\n                  type: 'behavior event',\n                  behaviorEvent: {\n                    type: 'decorator.toggle',\n                    decorator: mark,\n                  },\n                  editor,\n                })\n              }\n            }\n          }\n        }\n        if (cat === 'custom') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat]\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey]\n                command(event, portableTextEditor)\n              }\n            }\n          }\n        }\n      })\n    }\n    return editor\n  }\n}\n","import {isEqual} from 'lodash'\nimport {\n  Element,\n  Path,\n  Range,\n  type BaseRange,\n  type NodeEntry,\n  type Operation,\n} from 'slate'\nimport {\n  and,\n  assign,\n  fromCallback,\n  setup,\n  type ActorRefFrom,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport {moveRangeByOperation, toSlateRange} from '../internal-utils/ranges'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {isEqualToEmptyEditor} from '../internal-utils/values'\nimport type {PortableTextSlateEditor, RangeDecoration} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\n\nconst slateOperationCallback: CallbackLogicFunction<\n  AnyEventObject,\n  {type: 'slate operation'; operation: Operation},\n  {slateEditor: PortableTextSlateEditor}\n> = ({input, sendBack}) => {\n  const originalApply = input.slateEditor.apply\n\n  input.slateEditor.apply = (op) => {\n    if (op.type !== 'set_selection') {\n      sendBack({type: 'slate operation', operation: op})\n    }\n\n    originalApply(op)\n  }\n\n  return () => {\n    input.slateEditor.apply = originalApply\n  }\n}\n\ntype DecoratedRange = BaseRange & {rangeDecoration: RangeDecoration}\n\nexport const rangeDecorationsMachine = setup({\n  types: {\n    context: {} as {\n      decoratedRanges: Array<DecoratedRange>\n      pendingRangeDecorations: Array<RangeDecoration>\n      skipSetup: boolean\n      readOnly: boolean\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n      updateCount: number\n    },\n    input: {} as {\n      rangeDecorations: Array<RangeDecoration>\n      readOnly: boolean\n      schema: EditorSchema\n      skipSetup: boolean\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'ready'\n        }\n      | {\n          type: 'range decorations updated'\n          rangeDecorations: Array<RangeDecoration>\n        }\n      | {\n          type: 'slate operation'\n          operation: Operation\n        }\n      | {\n          type: 'update read only'\n          readOnly: boolean\n        },\n  },\n  actions: {\n    'update pending range decorations': assign({\n      pendingRangeDecorations: ({context, event}) => {\n        if (event.type !== 'range decorations updated') {\n          return context.pendingRangeDecorations\n        }\n\n        return event.rangeDecorations\n      },\n    }),\n    'set up initial range decorations': assign({\n      decoratedRanges: ({context}) => {\n        const rangeDecorationState: Array<DecoratedRange> = []\n\n        for (const rangeDecoration of context.pendingRangeDecorations) {\n          const slateRange = toSlateRange(\n            rangeDecoration.selection,\n            context.slateEditor,\n          )\n\n          if (!Range.isRange(slateRange)) {\n            rangeDecoration.onMoved?.({\n              newSelection: null,\n              rangeDecoration,\n              origin: 'local',\n            })\n            continue\n          }\n\n          rangeDecorationState.push({\n            rangeDecoration,\n            ...slateRange,\n          })\n        }\n\n        return rangeDecorationState\n      },\n    }),\n    'update range decorations': assign({\n      decoratedRanges: ({context, event}) => {\n        if (event.type !== 'range decorations updated') {\n          return context.decoratedRanges\n        }\n\n        const rangeDecorationState: Array<DecoratedRange> = []\n\n        for (const rangeDecoration of event.rangeDecorations) {\n          const slateRange = toSlateRange(\n            rangeDecoration.selection,\n            context.slateEditor,\n          )\n\n          if (!Range.isRange(slateRange)) {\n            rangeDecoration.onMoved?.({\n              newSelection: null,\n              rangeDecoration,\n              origin: 'local',\n            })\n            continue\n          }\n\n          rangeDecorationState.push({\n            rangeDecoration,\n            ...slateRange,\n          })\n        }\n\n        return rangeDecorationState\n      },\n    }),\n    'move range decorations': assign({\n      decoratedRanges: ({context, event}) => {\n        if (event.type !== 'slate operation') {\n          return context.decoratedRanges\n        }\n\n        const rangeDecorationState: Array<DecoratedRange> = []\n\n        for (const decoratedRange of context.decoratedRanges) {\n          const slateRange = toSlateRange(\n            decoratedRange.rangeDecoration.selection,\n            context.slateEditor,\n          )\n\n          if (!Range.isRange(slateRange)) {\n            decoratedRange.rangeDecoration.onMoved?.({\n              newSelection: null,\n              rangeDecoration: decoratedRange.rangeDecoration,\n              origin: 'local',\n            })\n            continue\n          }\n\n          let newRange: BaseRange | null | undefined\n\n          newRange = moveRangeByOperation(slateRange, event.operation)\n          if (\n            (newRange && newRange !== slateRange) ||\n            (newRange === null && slateRange)\n          ) {\n            const newRangeSelection = newRange\n              ? slateRangeToSelection({\n                  schema: context.schema,\n                  editor: context.slateEditor,\n                  range: newRange,\n                })\n              : null\n\n            decoratedRange.rangeDecoration.onMoved?.({\n              newSelection: newRangeSelection,\n              rangeDecoration: decoratedRange.rangeDecoration,\n              origin: 'local',\n            })\n          }\n\n          // If the newRange is null, it means that the range is not valid anymore and should be removed\n          // If it's undefined, it means that the slateRange is still valid and should be kept\n          if (newRange !== null) {\n            rangeDecorationState.push({\n              ...(newRange || slateRange),\n              rangeDecoration: {\n                ...decoratedRange.rangeDecoration,\n                selection: slateRangeToSelection({\n                  schema: context.schema,\n                  editor: context.slateEditor,\n                  range: newRange,\n                }),\n              },\n            })\n          }\n        }\n\n        return rangeDecorationState\n      },\n    }),\n    'assign readOnly': assign({\n      readOnly: ({context, event}) => {\n        if (event.type !== 'update read only') {\n          return context.readOnly\n        }\n\n        return event.readOnly\n      },\n    }),\n    'increment update count': assign({\n      updateCount: ({context}) => {\n        return context.updateCount + 1\n      },\n    }),\n  },\n  actors: {\n    'slate operation listener': fromCallback(slateOperationCallback),\n  },\n  guards: {\n    'has pending range decorations': ({context}) =>\n      context.pendingRangeDecorations.length > 0,\n    'has range decorations': ({context}) => context.decoratedRanges.length > 0,\n    'has different decorations': ({context, event}) => {\n      if (event.type !== 'range decorations updated') {\n        return false\n      }\n\n      const existingRangeDecorations = context.decoratedRanges.map(\n        (decoratedRange) => ({\n          anchor: decoratedRange.rangeDecoration.selection?.anchor,\n          focus: decoratedRange.rangeDecoration.selection?.focus,\n        }),\n      )\n\n      const newRangeDecorations = event.rangeDecorations.map(\n        (rangeDecoration) => ({\n          anchor: rangeDecoration.selection?.anchor,\n          focus: rangeDecoration.selection?.focus,\n        }),\n      )\n\n      const different = !isEqual(existingRangeDecorations, newRangeDecorations)\n\n      return different\n    },\n    'not read only': ({context}) => !context.readOnly,\n    'should skip setup': ({context}) => context.skipSetup,\n  },\n}).createMachine({\n  id: 'range decorations',\n  context: ({input}) => ({\n    readOnly: input.readOnly,\n    pendingRangeDecorations: input.rangeDecorations,\n    decoratedRanges: [],\n    skipSetup: input.skipSetup,\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n    updateCount: 0,\n  }),\n  invoke: {\n    src: 'slate operation listener',\n    input: ({context}) => ({slateEditor: context.slateEditor}),\n  },\n  on: {\n    'update read only': {\n      actions: ['assign readOnly'],\n    },\n  },\n  initial: 'setting up',\n  states: {\n    'setting up': {\n      always: [\n        {\n          guard: and(['should skip setup', 'has pending range decorations']),\n          target: 'ready',\n          actions: [\n            'set up initial range decorations',\n            'increment update count',\n          ],\n        },\n        {\n          guard: 'should skip setup',\n          target: 'ready',\n        },\n      ],\n      on: {\n        'range decorations updated': {\n          actions: ['update pending range decorations'],\n        },\n        'ready': [\n          {\n            target: 'ready',\n            guard: 'has pending range decorations',\n            actions: [\n              'set up initial range decorations',\n              'increment update count',\n            ],\n          },\n          {\n            target: 'ready',\n          },\n        ],\n      },\n    },\n    'ready': {\n      initial: 'idle',\n      on: {\n        'range decorations updated': {\n          target: '.idle',\n          guard: 'has different decorations',\n          actions: ['update range decorations', 'increment update count'],\n        },\n      },\n      states: {\n        'idle': {\n          on: {\n            'slate operation': {\n              target: 'moving range decorations',\n              guard: and(['has range decorations', 'not read only']),\n            },\n          },\n        },\n        'moving range decorations': {\n          entry: ['move range decorations'],\n          always: {\n            target: 'idle',\n          },\n        },\n      },\n    },\n  },\n})\n\nexport function createDecorate(\n  rangeDecorationActor: ActorRefFrom<typeof rangeDecorationsMachine>,\n) {\n  return function decorate([node, path]: NodeEntry): Array<BaseRange> {\n    if (\n      isEqualToEmptyEditor(\n        rangeDecorationActor.getSnapshot().context.slateEditor.children,\n        rangeDecorationActor.getSnapshot().context.schema,\n      )\n    ) {\n      return [\n        {\n          anchor: {\n            path: [0, 0],\n            offset: 0,\n          },\n          focus: {\n            path: [0, 0],\n            offset: 0,\n          },\n          placeholder: true,\n        } as BaseRange,\n      ]\n    }\n\n    // Editor node has a path length of 0 (should never be decorated)\n    if (path.length === 0) {\n      return []\n    }\n\n    if (!Element.isElement(node) || node.children.length === 0) {\n      return []\n    }\n\n    const blockIndex = path.at(0)\n\n    if (blockIndex === undefined) {\n      return []\n    }\n\n    return rangeDecorationActor\n      .getSnapshot()\n      .context.decoratedRanges.filter((decoratedRange) => {\n        // Special case in order to only return one decoration for collapsed ranges\n        if (Range.isCollapsed(decoratedRange)) {\n          // Collapsed ranges should only be decorated if they are on a block child level (length 2)\n          return node.children.some(\n            (_, childIndex) =>\n              Path.equals(decoratedRange.anchor.path, [\n                blockIndex,\n                childIndex,\n              ]) &&\n              Path.equals(decoratedRange.focus.path, [blockIndex, childIndex]),\n          )\n        }\n\n        return (\n          Range.intersection(decoratedRange, {\n            anchor: {path, offset: 0},\n            focus: {path, offset: 0},\n          }) || Range.includes(decoratedRange, path)\n        )\n      })\n  }\n}\n","import {useActorRef, useSelector} from '@xstate/react'\nimport {noop} from 'lodash'\nimport {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n  type ClipboardEvent,\n  type FocusEventHandler,\n  type KeyboardEvent,\n  type MutableRefObject,\n  type TextareaHTMLAttributes,\n} from 'react'\nimport {Editor, Transforms, type Text} from 'slate'\nimport {\n  ReactEditor,\n  Editable as SlateEditable,\n  useSlate,\n  type RenderElementProps,\n  type RenderLeafProps,\n} from 'slate-react'\nimport {getCompoundClientRect} from '../internal-utils/compound-client-rect'\nimport {debugWithName} from '../internal-utils/debug'\nimport {getDragSelection} from '../internal-utils/drag-selection'\nimport {getEventPosition} from '../internal-utils/event-position'\nimport {parseBlocks} from '../internal-utils/parse-blocks'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {normalizeSelection} from '../internal-utils/selection'\nimport {getSelectionDomNodes} from '../internal-utils/selection-elements'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport * as selectors from '../selectors'\nimport type {\n  EditorSelection,\n  OnCopyFn,\n  OnPasteFn,\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderListItemFunction,\n  RenderPlaceholderFunction,\n  RenderStyleFunction,\n  ScrollSelectionIntoViewFunction,\n} from '../types/editor'\nimport type {HotkeyOptions} from '../types/options'\nimport {isSelectionCollapsed} from '../utils'\nimport {getSelectionEndPoint} from '../utils/util.get-selection-end-point'\nimport {RenderElement} from './components/render-element'\nimport {RenderLeaf} from './components/render-leaf'\nimport {RenderText, type RenderTextProps} from './components/render-text'\nimport {EditorActorContext} from './editor-actor-context'\nimport {getEditorSnapshot} from './editor-selector'\nimport {usePortableTextEditor} from './hooks/usePortableTextEditor'\nimport {createWithHotkeys} from './plugins/createWithHotKeys'\nimport {PortableTextEditor} from './PortableTextEditor'\nimport {\n  createDecorate,\n  rangeDecorationsMachine,\n} from './range-decorations-machine'\nimport {RelayActorContext} from './relay-actor-context'\n\nconst debug = debugWithName('component:Editable')\n\n/**\n * @public\n */\nexport type PortableTextEditableProps = Omit<\n  TextareaHTMLAttributes<HTMLDivElement>,\n  'onPaste' | 'onCopy' | 'onBeforeInput'\n> & {\n  hotkeys?: HotkeyOptions\n  onBeforeInput?: (event: InputEvent) => void\n  onPaste?: OnPasteFn\n  onCopy?: OnCopyFn\n  ref: MutableRefObject<HTMLDivElement | null>\n  rangeDecorations?: RangeDecoration[]\n  renderAnnotation?: RenderAnnotationFunction\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  renderListItem?: RenderListItemFunction\n  renderPlaceholder?: RenderPlaceholderFunction\n  renderStyle?: RenderStyleFunction\n  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction\n  selection?: EditorSelection\n  spellCheck?: boolean\n}\n\n/**\n * @public\n *\n *\n * The core component that renders the editor. Must be placed within the {@link EditorProvider} component.\n *\n * @example\n * ```tsx\n * import { PortableTextEditable, EditorProvider } from '@portabletext/editor'\n *\n * function MyComponent() {\n *  return (\n *   <EditorProvider>\n *    <PortableTextEditable />\n *  </EditorProvider>\n *  )\n * }\n * ```\n * @group Components\n */\nexport const PortableTextEditable = forwardRef<\n  Omit<HTMLDivElement, 'as' | 'onPaste' | 'onBeforeInput'>,\n  PortableTextEditableProps\n>(function PortableTextEditable(props, forwardedRef) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onCut,\n    onClick,\n    onDragStart,\n    onDrag,\n    onDragEnd,\n    onDragEnter,\n    onDragOver,\n    onDrop,\n    onDragLeave,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props\n\n  const portableTextEditor = usePortableTextEditor()\n  const ref = useRef<HTMLDivElement | null>(null)\n  const [editableElement, setEditableElement] = useState<HTMLDivElement | null>(\n    null,\n  )\n  const [hasInvalidValue, setHasInvalidValue] = useState(false)\n\n  // Forward ref to parent component\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(\n    forwardedRef,\n    () => ref.current,\n  )\n\n  const editorActor = useContext(EditorActorContext)\n  const relayActor = useContext(RelayActorContext)\n  const readOnly = useSelector(editorActor, (s) =>\n    s.matches({'edit mode': 'read only'}),\n  )\n  const slateEditor = useSlate()\n\n  const rangeDecorationsActor = useActorRef(rangeDecorationsMachine, {\n    input: {\n      rangeDecorations: rangeDecorations ?? [],\n      readOnly,\n      schema: editorActor.getSnapshot().context.schema,\n      slateEditor,\n      skipSetup: !editorActor.getSnapshot().matches({setup: 'setting up'}),\n    },\n  })\n  useSelector(rangeDecorationsActor, (s) => s.context.updateCount)\n  const decorate = useMemo(\n    () => createDecorate(rangeDecorationsActor),\n    [rangeDecorationsActor],\n  )\n\n  useEffect(() => {\n    rangeDecorationsActor.send({\n      type: 'update read only',\n      readOnly,\n    })\n  }, [rangeDecorationsActor, readOnly])\n\n  useEffect(() => {\n    rangeDecorationsActor.send({\n      type: 'range decorations updated',\n      rangeDecorations: rangeDecorations ?? [],\n    })\n  }, [rangeDecorationsActor, rangeDecorations])\n\n  // Output a minimal React editor inside Editable when in readOnly mode.\n  // NOTE: make sure all the plugins used here can be safely run over again at any point.\n  // There will be a problem if they redefine editor methods and then calling the original method within themselves.\n  useMemo(() => {\n    // React/UI-specific plugins\n    if (readOnly) {\n      return slateEditor\n    }\n    const withHotKeys = createWithHotkeys(\n      editorActor,\n      portableTextEditor,\n      hotkeys,\n    )\n\n    return withHotKeys(slateEditor)\n  }, [editorActor, hotkeys, portableTextEditor, readOnly, slateEditor])\n\n  const renderElement = useCallback(\n    (eProps: RenderElementProps) => (\n      <RenderElement\n        {...eProps}\n        readOnly={readOnly}\n        renderBlock={renderBlock}\n        renderChild={renderChild}\n        renderListItem={renderListItem}\n        renderStyle={renderStyle}\n        spellCheck={spellCheck}\n      />\n    ),\n    [\n      spellCheck,\n      readOnly,\n      renderBlock,\n      renderChild,\n      renderListItem,\n      renderStyle,\n    ],\n  )\n\n  const renderLeaf = useCallback(\n    (\n      leafProps: RenderLeafProps & {\n        leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n      },\n    ) => (\n      <RenderLeaf\n        {...leafProps}\n        readOnly={readOnly}\n        renderAnnotation={renderAnnotation}\n        renderChild={renderChild}\n        renderDecorator={renderDecorator}\n        renderPlaceholder={renderPlaceholder}\n      />\n    ),\n    [\n      readOnly,\n      renderAnnotation,\n      renderChild,\n      renderDecorator,\n      renderPlaceholder,\n    ],\n  )\n\n  const renderText = useCallback(\n    (props: RenderTextProps) => <RenderText {...props} />,\n    [],\n  )\n\n  const restoreSelectionFromProps = useCallback(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`)\n      const normalizedSelection = normalizeSelection(\n        propsSelection,\n        fromSlateValue(\n          slateEditor.children,\n          editorActor.getSnapshot().context.schema.block.name,\n        ),\n      )\n      if (normalizedSelection !== null) {\n        debug(\n          `Normalized selection from props ${JSON.stringify(normalizedSelection)}`,\n        )\n        const slateRange = toSlateRange(normalizedSelection, slateEditor)\n        if (slateRange) {\n          Transforms.select(slateEditor, slateRange)\n          // Output selection here in those cases where the editor selection was the same, and there are no set_selection operations made.\n          // The selection is usually automatically emitted to change$ by the withPortableTextSelections plugin whenever there is a set_selection operation applied.\n          if (!slateEditor.operations.some((o) => o.type === 'set_selection')) {\n            editorActor.send({\n              type: 'update selection',\n              selection: normalizedSelection,\n            })\n          }\n          slateEditor.onChange()\n        }\n      }\n    }\n  }, [editorActor, propsSelection, slateEditor])\n\n  // Restore selection from props when the editor has been initialized properly with it's value\n  useEffect(() => {\n    const onReady = editorActor.on('ready', () => {\n      rangeDecorationsActor.send({\n        type: 'ready',\n      })\n\n      restoreSelectionFromProps()\n    })\n\n    const onInvalidValue = editorActor.on('invalid value', () => {\n      setHasInvalidValue(true)\n    })\n\n    const onValueChanged = editorActor.on('value changed', () => {\n      setHasInvalidValue(false)\n    })\n\n    return () => {\n      onReady.unsubscribe()\n      onInvalidValue.unsubscribe()\n      onValueChanged.unsubscribe()\n    }\n  }, [rangeDecorationsActor, editorActor, restoreSelectionFromProps])\n\n  // Restore selection from props when it changes\n  useEffect(() => {\n    if (propsSelection && !hasInvalidValue) {\n      restoreSelectionFromProps()\n    }\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps])\n\n  // Handle from props onCopy function\n  const handleCopy = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): void | ReactEditor => {\n      if (onCopy) {\n        const result = onCopy(event)\n        // CopyFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.stopPropagation()\n        event.preventDefault()\n\n        const selection = slateEditor.selection\n          ? slateRangeToSelection({\n              schema: editorActor.getSnapshot().context.schema,\n              editor: slateEditor,\n              range: slateEditor.selection,\n            })\n          : undefined\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for copy event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.copy',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCopy, editorActor, slateEditor],\n  )\n\n  const handleCut = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>) => {\n      if (onCut) {\n        const result = onCut(event)\n        // CutFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.stopPropagation()\n        event.preventDefault()\n\n        const selection = editorActor.getSnapshot().context.selection\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for cut event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.cut',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCut, editorActor, slateEditor],\n  )\n\n  // Handle incoming pasting events in the editor\n  const handlePaste = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): Promise<void> | void => {\n      const value = fromSlateValue(\n        slateEditor.children,\n        editorActor.getSnapshot().context.schema.block.name,\n        KEY_TO_VALUE_ELEMENT.get(slateEditor),\n      )\n      const ptRange = slateEditor.selection\n        ? slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor: slateEditor,\n            range: slateEditor.selection,\n          })\n        : null\n      const path = ptRange?.focus.path || []\n      const onPasteResult = onPaste?.({\n        event,\n        value,\n        path,\n        schemaTypes: portableTextEditor.schemaTypes,\n      })\n\n      if (onPasteResult || !slateEditor.selection) {\n        event.preventDefault()\n\n        // Resolve it as promise (can be either async promise or sync return value)\n        relayActor.send({type: 'loading'})\n\n        Promise.resolve(onPasteResult)\n          .then((result) => {\n            debug('Custom paste function from client resolved', result)\n\n            if (!result || !result.insert) {\n              debug('No result from custom paste handler, pasting normally')\n\n              const selection = editorActor.getSnapshot().context.selection\n              const position = selection ? {selection} : undefined\n\n              if (!position) {\n                console.warn('Could not find position for paste event')\n                return\n              }\n\n              editorActor.send({\n                type: 'behavior event',\n                behaviorEvent: {\n                  type: 'clipboard.paste',\n                  originEvent: {\n                    dataTransfer: event.clipboardData,\n                  },\n                  position,\n                },\n                editor: slateEditor,\n                nativeEvent: event,\n              })\n            } else if (result.insert) {\n              editorActor.send({\n                type: 'behavior event',\n                behaviorEvent: {\n                  type: 'insert.blocks',\n                  blocks: parseBlocks({\n                    context: {\n                      keyGenerator:\n                        editorActor.getSnapshot().context.keyGenerator,\n                      schema: editorActor.getSnapshot().context.schema,\n                    },\n                    blocks: result.insert,\n                    options: {\n                      refreshKeys: true,\n                      validateFields: true,\n                    },\n                  }),\n                  placement: 'auto',\n                },\n                editor: slateEditor,\n              })\n            } else {\n              console.warn(\n                'Your onPaste function returned something unexpected:',\n                result,\n              )\n            }\n          })\n          .catch((error) => {\n            console.warn(error)\n\n            return error\n          })\n          .finally(() => {\n            relayActor.send({type: 'done loading'})\n          })\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.preventDefault()\n        event.stopPropagation()\n\n        const selection = editorActor.getSnapshot().context.selection\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for paste event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.paste',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n\n      debug('No result from custom paste handler, pasting normally')\n    },\n    [editorActor, onPaste, portableTextEditor, relayActor, slateEditor],\n  )\n\n  const handleOnFocus: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onFocus) {\n        onFocus(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        const selection = PortableTextEditor.getSelection(portableTextEditor)\n        // Create an editor selection if it does'nt exist\n        if (selection === null) {\n          Transforms.select(slateEditor, Editor.start(slateEditor, []))\n          slateEditor.onChange()\n        }\n        relayActor.send({type: 'focused', event})\n        const newSelection = PortableTextEditor.getSelection(portableTextEditor)\n        // If the selection is the same, emit it explicitly here as there is no actual onChange event triggered.\n        if (selection === newSelection) {\n          editorActor.send({\n            type: 'update selection',\n            selection,\n          })\n        }\n      }\n    },\n    [editorActor, onFocus, slateEditor, portableTextEditor, relayActor],\n  )\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (onClick) {\n        onClick(event)\n      }\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (position) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'mouse.click',\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onClick, editorActor, slateEditor],\n  )\n\n  const handleOnBlur: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onBlur) {\n        onBlur(event)\n      }\n      if (!event.isPropagationStopped()) {\n        relayActor.send({type: 'blurred', event})\n      }\n    },\n    [relayActor, onBlur],\n  )\n\n  const handleOnBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (onBeforeInput) {\n        onBeforeInput(event)\n      }\n    },\n    [onBeforeInput],\n  )\n\n  // This function will handle unexpected DOM changes inside the Editable rendering,\n  // and make sure that we can maintain a stable slateEditor.selection when that happens.\n  //\n  // For example, if this Editable is rendered inside something that might re-render\n  // this component (hidden contexts) while the user is still actively changing the\n  // contentEditable, this could interfere with the intermediate DOM selection,\n  // which again could be picked up by ReactEditor's event listeners.\n  // If that range is invalid at that point, the slate.editorSelection could be\n  // set either wrong, or invalid, to which slateEditor will throw exceptions\n  // that are impossible to recover properly from or result in a wrong selection.\n  //\n  // Also the other way around, when the ReactEditor will try to create a DOM Range\n  // from the current slateEditor.selection, it may throw unrecoverable errors\n  // if the current editor.selection is invalid according to the DOM.\n  // If this is the case, default to selecting the top of the document, if the\n  // user already had a selection.\n  const validateSelection = useCallback(() => {\n    if (!slateEditor.selection) {\n      return\n    }\n    const root = ReactEditor.findDocumentOrShadowRoot(slateEditor)\n    const {activeElement} = root\n    // Return if the editor isn't the active element\n    if (ref.current !== activeElement) {\n      return\n    }\n    const window = ReactEditor.getWindow(slateEditor)\n    const domSelection = window.getSelection()\n    if (!domSelection || domSelection.rangeCount === 0) {\n      return\n    }\n    const existingDOMRange = domSelection.getRangeAt(0)\n    try {\n      const newDOMRange = ReactEditor.toDOMRange(\n        slateEditor,\n        slateEditor.selection,\n      )\n      if (\n        newDOMRange.startOffset !== existingDOMRange.startOffset ||\n        newDOMRange.endOffset !== existingDOMRange.endOffset\n      ) {\n        debug('DOM range out of sync, validating selection')\n        // Remove all ranges temporary\n        domSelection?.removeAllRanges()\n        // Set the correct range\n        domSelection.addRange(newDOMRange)\n      }\n    } catch {\n      debug(`Could not resolve selection, selecting top document`)\n      // Deselect the editor\n      Transforms.deselect(slateEditor)\n      // Select top document if there is a top block to select\n      if (slateEditor.children.length > 0) {\n        Transforms.select(slateEditor, [0, 0])\n      }\n      slateEditor.onChange()\n    }\n  }, [ref, slateEditor])\n\n  // Observe mutations (child list and subtree) to this component's DOM,\n  // and make sure the editor selection is valid when that happens.\n  useEffect(() => {\n    if (editableElement) {\n      const mutationObserver = new MutationObserver(validateSelection)\n      mutationObserver.observe(editableElement, {\n        attributeOldValue: false,\n        attributes: false,\n        characterData: false,\n        childList: true,\n        subtree: true,\n      })\n      return () => {\n        mutationObserver.disconnect()\n      }\n    }\n    return undefined\n  }, [validateSelection, editableElement])\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyDown) {\n        props.onKeyDown(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        slateEditor.pteWithHotKeys(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'keyboard.keydown',\n            originEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyUp) {\n        props.onKeyUp(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'keyboard.keyup',\n            originEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const scrollSelectionIntoViewToSlate = useMemo(() => {\n    // Use slate-react default scroll into view\n    if (scrollSelectionIntoView === undefined) {\n      return undefined\n    }\n    // Disable scroll into view totally\n    if (scrollSelectionIntoView === null) {\n      return noop\n    }\n    // Translate PortableTextEditor prop fn to Slate plugin fn\n    return (_editor: ReactEditor, domRange: Range) => {\n      scrollSelectionIntoView(portableTextEditor, domRange)\n    }\n  }, [portableTextEditor, scrollSelectionIntoView])\n\n  // Set the forwarded ref to be the Slate editable DOM element\n  // Also set the editable element in a state so that the MutationObserver\n  // is setup when this element is ready.\n  useEffect(() => {\n    ref.current = ReactEditor.toDOMNode(\n      slateEditor,\n      slateEditor,\n    ) as HTMLDivElement | null\n    setEditableElement(ref.current)\n  }, [slateEditor, ref])\n\n  useEffect(() => {\n    const window = ReactEditor.getWindow(slateEditor)\n\n    const onDragEnd = () => {\n      editorActor.send({type: 'dragend'})\n    }\n    const onDrop = () => {\n      editorActor.send({type: 'drop'})\n    }\n\n    window.document.addEventListener('dragend', onDragEnd)\n    window.document.addEventListener('drop', onDrop)\n\n    return () => {\n      window.document.removeEventListener('dragend', onDragEnd)\n      window.document.removeEventListener('drop', onDrop)\n    }\n  }, [slateEditor, editorActor])\n\n  const handleDragStart = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragStart?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        console.warn('Could not find position for dragstart event')\n        return\n      }\n\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: slateEditor,\n      })\n      const dragSelection = getDragSelection({\n        eventSelection: position.selection,\n        snapshot,\n      })\n\n      const selectingEntireBlocks = selectors.isSelectingEntireBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection,\n        },\n      })\n\n      const dragGhost = document.createElement('div')\n\n      const draggedDomNodes = getSelectionDomNodes({\n        snapshot: {\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragSelection,\n          },\n        },\n        slateEditor,\n      })\n\n      if (selectingEntireBlocks) {\n        // Clone the DOM Nodes so they won't be visually clipped by scroll-containers etc.\n        const clonedBlockNodes = draggedDomNodes.blockNodes.map((node) =>\n          node.cloneNode(true),\n        )\n\n        for (const block of clonedBlockNodes) {\n          if (block instanceof HTMLElement) {\n            block.style.position = 'relative'\n          }\n          dragGhost.appendChild(block)\n        }\n\n        // A custom drag ghost element can be configured using this data attribute\n        const customGhost = dragGhost.querySelector(\n          '[data-pt-drag-ghost-element]',\n        )\n        if (customGhost) {\n          dragGhost.replaceChildren(customGhost)\n        }\n\n        // Setting the `data-dragged` attribute so the consumer can style the element while it’s dragged\n        dragGhost.setAttribute('data-dragged', '')\n\n        dragGhost.style.position = 'absolute'\n        dragGhost.style.left = '-99999px'\n        dragGhost.style.boxSizing = 'border-box'\n        document.body.appendChild(dragGhost)\n\n        if (customGhost) {\n          const customGhostRect = customGhost.getBoundingClientRect()\n          const x = event.clientX - customGhostRect.left\n          const y = event.clientY - customGhostRect.top\n          dragGhost.style.width = `${customGhostRect.width}px`\n          dragGhost.style.height = `${customGhostRect.height}px`\n          event.dataTransfer.setDragImage(dragGhost, x, y)\n        } else {\n          const blocksDomRect = getCompoundClientRect(\n            draggedDomNodes.blockNodes,\n          )\n          const x = event.clientX - blocksDomRect.left\n          const y = event.clientY - blocksDomRect.top\n          dragGhost.style.width = `${blocksDomRect.width}px`\n          dragGhost.style.height = `${blocksDomRect.height}px`\n          event.dataTransfer.setDragImage(dragGhost, x, y)\n        }\n      } else {\n        const clonedChildNodes = draggedDomNodes.childNodes.map((node) =>\n          node.cloneNode(true),\n        )\n\n        for (const child of clonedChildNodes) {\n          dragGhost.appendChild(child)\n        }\n\n        dragGhost.style.position = 'absolute'\n        dragGhost.style.left = '-99999px'\n        dragGhost.style.boxSizing = 'border-box'\n        document.body.appendChild(dragGhost)\n\n        const childrenDomRect = getCompoundClientRect(\n          draggedDomNodes.childNodes,\n        )\n        const x = event.clientX - childrenDomRect.left\n        const y = event.clientY - childrenDomRect.top\n        dragGhost.style.width = `${childrenDomRect.width}px`\n        dragGhost.style.height = `${childrenDomRect.height}px`\n\n        event.dataTransfer.setDragImage(dragGhost, x, y)\n      }\n\n      // Select drag selection\n      // If the selection is expanded then we just select the end of the\n      // selection\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'select',\n          at: isSelectionCollapsed(dragSelection)\n            ? dragSelection\n            : {\n                anchor: getSelectionEndPoint(dragSelection),\n                focus: getSelectionEndPoint(dragSelection),\n                backward: false,\n              },\n        },\n        editor: slateEditor,\n      })\n\n      editorActor.send({\n        type: 'dragstart',\n        origin: {\n          selection: dragSelection,\n        },\n        ghost: dragGhost,\n      })\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragstart',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          position: {\n            selection: dragSelection,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragStart, editorActor, slateEditor],\n  )\n\n  const handleDrag = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDrag?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.drag',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDrag, editorActor, slateEditor],\n  )\n\n  const handleDragEnd = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragEnd?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragend',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragEnd, editorActor, slateEditor],\n  )\n\n  const handleDragEnter = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragEnter?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragenter',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          position,\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragEnter, editorActor, slateEditor],\n  )\n\n  const handleDragOver = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragOver?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragover',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          position,\n        },\n        editor: slateEditor,\n        nativeEvent: event,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragOver, editorActor, slateEditor],\n  )\n\n  const handleDrop = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDrop?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        console.warn('Could not find position for drop event')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.drop',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          position,\n        },\n        editor: slateEditor,\n        nativeEvent: event,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDrop, editorActor, slateEditor],\n  )\n\n  const handleDragLeave = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragLeave?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragleave',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragLeave, editorActor, slateEditor],\n  )\n\n  if (!portableTextEditor) {\n    return null\n  }\n\n  return hasInvalidValue ? null : (\n    <SlateEditable\n      {...restProps}\n      data-read-only={readOnly}\n      autoFocus={false}\n      className={restProps.className || 'pt-editable'}\n      decorate={decorate}\n      onBlur={handleOnBlur}\n      onCopy={handleCopy}\n      onCut={handleCut}\n      onClick={handleClick}\n      onDOMBeforeInput={handleOnBeforeInput}\n      onDragStart={handleDragStart}\n      onDrag={handleDrag}\n      onDragEnd={handleDragEnd}\n      onDragEnter={handleDragEnter}\n      onDragOver={handleDragOver}\n      onDrop={handleDrop}\n      onDragLeave={handleDragLeave}\n      onFocus={handleOnFocus}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      onPaste={handlePaste}\n      readOnly={readOnly}\n      // We have implemented our own placeholder logic with decorations.\n      // This 'renderPlaceholder' should not be used.\n      renderPlaceholder={undefined}\n      renderElement={renderElement}\n      renderLeaf={renderLeaf}\n      renderText={renderText}\n      scrollSelectionIntoView={scrollSelectionIntoViewToSlate}\n    />\n  )\n})\n\nPortableTextEditable.displayName = 'ForwardRef(PortableTextEditable)'\n","import React from 'react'\n\ntype ConstantRef<TConstant> = {constant: TConstant}\n\nexport default function useConstant<TConstant>(\n  factory: () => TConstant,\n): TConstant {\n  const ref = React.useRef<ConstantRef<TConstant>>(null)\n\n  if (!ref.current) {\n    ref.current = {constant: factory()}\n  }\n\n  return ref.current.constant\n}\n","import type React from 'react'\nimport {useEffect} from 'react'\nimport {Slate} from 'slate-react'\nimport type {EditorConfig} from '../editor'\nimport {stopActor} from '../internal-utils/stop-actor'\nimport useConstant from '../internal-utils/use-constant'\nimport {createInternalEditor} from './create-editor'\nimport {EditorActorContext} from './editor-actor-context'\nimport {EditorContext} from './editor-context'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport {\n  PortableTextEditor,\n  type PortableTextEditorProps,\n} from './PortableTextEditor'\nimport {RelayActorContext} from './relay-actor-context'\nimport {RouteEventsToChanges} from './route-events-to-changes'\n\n/**\n * @public\n */\nexport type EditorProviderProps = {\n  initialConfig: EditorConfig\n  children?: React.ReactNode\n}\n\n/**\n * @public\n * The EditorProvider component is used to set up the editor context and configure the Portable Text Editor.\n * @example\n * ```tsx\n * import {EditorProvider} from '@portabletext/editor'\n *\n * function App() {\n *  return (\n *    <EditorProvider initialConfig={{ ... }} >\n *      ...\n *    </EditorProvider>\n *  )\n * }\n *\n * ```\n * @group Components\n */\nexport function EditorProvider(props: EditorProviderProps) {\n  const {internalEditor, portableTextEditor} = useConstant(() => {\n    const internalEditor = createInternalEditor(props.initialConfig)\n    const portableTextEditor = new PortableTextEditor({\n      editor: internalEditor.editor,\n    } as unknown as PortableTextEditorProps)\n\n    return {internalEditor, portableTextEditor}\n  })\n\n  useEffect(() => {\n    const unsubscribers: Array<() => void> = []\n\n    for (const subscription of internalEditor.subscriptions) {\n      unsubscribers.push(subscription())\n    }\n\n    internalEditor.actors.editorActor.start()\n    internalEditor.actors.mutationActor.start()\n    internalEditor.actors.relayActor.start()\n    internalEditor.actors.syncActor.start()\n\n    return () => {\n      for (const unsubscribe of unsubscribers) {\n        unsubscribe()\n      }\n\n      stopActor(internalEditor.actors.editorActor)\n      stopActor(internalEditor.actors.mutationActor)\n      stopActor(internalEditor.actors.relayActor)\n      stopActor(internalEditor.actors.syncActor)\n    }\n  }, [internalEditor])\n\n  return (\n    <EditorContext.Provider value={internalEditor.editor}>\n      <RouteEventsToChanges\n        relayActor={internalEditor.actors.relayActor}\n        onChange={(change) => {\n          portableTextEditor.change$.next(change)\n        }}\n      />\n      <EditorActorContext.Provider value={internalEditor.actors.editorActor}>\n        <RelayActorContext.Provider value={internalEditor.actors.relayActor}>\n          <Slate\n            editor={internalEditor.editor._internal.slateEditor.instance}\n            initialValue={\n              internalEditor.editor._internal.slateEditor.initialValue\n            }\n          >\n            <PortableTextEditorContext.Provider value={portableTextEditor}>\n              <PortableTextEditorSelectionProvider\n                editorActor={internalEditor.actors.editorActor}\n              >\n                {props.children}\n              </PortableTextEditorSelectionProvider>\n            </PortableTextEditorContext.Provider>\n          </Slate>\n        </RelayActorContext.Provider>\n      </EditorActorContext.Provider>\n    </EditorContext.Provider>\n  )\n}\n"],"names":["EditorEventListener","props","$","_c","editor","useEditor","on","useEffectEvent","t0","subscription","unsubscribe","t1","useEffect","getCompoundClientRect","nodes","length","DOMRect","elements","filter","node","Element","firstRect","at","getBoundingClientRect","left","top","right","bottom","i","rect","Math","min","max","rootName","debug","debugWithName","name","namespace","enabled","getDragSelection","eventSelection","snapshot","dragSelection","selectors","context","selection","draggingCollapsedSelection","draggedTextBlock","draggedSpan","anchor","utils","block","focus","selectedBlocks","getSelectedBlocks","selectionStartBlock","selectionEndBlock","selectionStartPoint","selectionEndPoint","EMPTY_MARKDEFS","VOID_CHILD_KEY","keepObjectEquality","object","keyMap","value","_key","isEqual","toSlateValue","schemaTypes","Array","isArray","map","_type","rest","textBlock","hasInlines","hasMissingStyle","style","hasMissingMarkDefs","markDefs","hasMissingChildren","children","child","cType","cKey","cRest","text","marks","__inline","isElement","styles","fromSlateValue","textBlockType","Error","_cType","v","k","t","_i","blockValue","isEqualToEmptyEditor","undefined","Text","isText","join","getFocusBlock","Editor","path","slice","getSelectionStartBlock","Range","start","getPointBlock","point","getSelectionEndBlock","end","getFocusChild","focusBlock","focusBlockPath","childIndex","focusChild","Node","getPointChild","blockPath","pointChild","getFirstBlock","firstBlockPath","getLastBlock","lastBlockPath","getNodeBlock","schema","isEditor","isBlockElement","elementToBlock","element","parent","from","mode","match","n","some","isInline","blockObjects","blockObject","isListItemActive","listItem","isTextBlock","every","isListBlock","isStyleActive","slateRangeToSelection","range","anchorBlock","anchorChild","offset","backward","isBackward","push","getEventPosition","editorActor","slateEditor","event","getSnapshot","matches","setup","getEventNode","positionBlock","getEventPositionBlock","getEventSelection","focusBlockKey","DOMEditor","hasTarget","target","toSlateNode","firstBlock","firstBlockRect","toDOMNode","pageY","lastBlock","lastBlockRef","elementRect","height","abs","getSlateRangeFromEvent","isDOMNode","window","getWindow","domRange","document","caretPositionFromPoint","position","clientX","clientY","createRange","setStart","offsetNode","setEnd","caretRangeFromPoint","console","warn","toSlateRange","exactMatch","suppressThrow","toSlatePath","isKeySegment","isVoid","childPath","findIndex","concat","moveRangeByOperation","operation","Point","transform","equals","normalizePoint","newPath","newOffset","blockKey","childKey","find","blk","cld","normalizeSelection","newAnchor","newFocus","getSelectionDomNodes","blockNodes","childNodes","blockEntries","childEntries","isTextSpan","isBlock","blockNode","childNode","IS_PROCESSING_REMOTE_CHANGES","WeakMap","KEY_TO_SLATE_ELEMENT","KEY_TO_VALUE_ELEMENT","SLATE_TO_PORTABLE_TEXT_RANGE","EditorActorContext","createContext","DropIndicator","Symbol","for","jsx","width","borderBottom","zIndex","RenderDefaultBlockObject","userSelect","jsxs","RenderDefaultInlineObject","inlineObject","defaultKeyGenerator","randomKey","getByteHexTable","table","toString","whatwgRNG","rnds8","Uint8Array","getRandomValues","reduce","str","createEditorPriority","config","id","reference","corePriority","createCoreBlockElementBehaviorsConfig","key","onSetDragPositionBlock","behavior","defineBehavior","guard","dropFocusBlock","dragOrigin","beta","internalDrag","origin","draggedBlock","actions","type","effect","priority","importance","forward","useCoreBlockElementBehaviors","useContext","t2","behaviorConfigs","behaviorConfig","send","behaviorConfig_0","RenderBlockObject","dragPositionBlock","setDragPositionBlock","useState","blockObjectRef","useRef","useSlateStatic","selected","useSelected","legacySchemaType","useSelector","s","getLegacySchema","error","focused","isCollapsed","attributes","readOnly","renderBlock","editorElementRef","schemaType","RenderInlineObject","inlineObjectRef","inlineObjects","findPath","display","renderChild","annotations","RenderTextBlock","blockRef","legacySchema","legacyBlockSchemaType","renderStyle","legacyStyleSchemaType","renderListItem","legacyListItemSchemaType","lists","list","level","spellCheck","RenderElement","_temp","parseInlineObject","keyGenerator","_temp2","options","refreshKeys","validateFields","parseTextBlock","_temp3","parseBlockObject","_temp4","t3","PortableTextEditorContext","usePortableTextEditor","forEachActor","actorRef","callback","Object","values","forEach","stopActor","persistedSnapshots","ref","observers","Set","systemSnapshot","system","stop","_snapshot","_processingStatus","converterJson","mimeType","serialize","portableTextConverter","converters","converter","originEvent","reason","deserialize","converterPortableText","blocks","sliceBlocks","data","JSON","stringify","parse","parsedBlocks","flatMap","parsedBlock","parseBlock","hasTag","createConverterTextHtml","html","toHTML","onMissingComponent","components","unknownType","htmlToBlocks","portableText","unstable_whitespaceOnPasteMode","createConverterTextPlain","span","inlineObjectType","title","blockObjectType","textToHtml","escapeHtml","split","line","replace","entityMap","String","createCoreConverters","compileType","rawType","Schema","compile","types","get","createOperationToPatches","textBlockName","insertTextPatch","beforeValue","textChild","prevBlock","prevChild","prevText","patch","diffMatchPatch","removeTextPatch","beforeBlock","prevTextChild","setNodePatch","setNode","omitBy","newProperties","isUndefined","set","patches","keys","keyName","val","indexOf","insertNodePatch","targetKey","insert","setIfMissing","splitNodePatch","splitBlock","oldBlock","targetValue","unset","splitSpan","targetSpans","removeNodePatch","spanToRemove","mergeNodePatch","updatedBlock","newBlock","updatedSpan","removedSpan","moveNodePatch","targetBlock","targetChild","childToInsert","insertTextOperationImplementation","Transforms","insertNodes","insertText","isPortableTextSpan","mark","isPortableTextBlock","def","getPreviousSpan","spanPath","previousSpan","reverse","Path","isBefore","getNextSpan","nextSpan","isAfter","withRemoteChanges","fn","prev","isChangingRemotely","IS_UDOING","IS_REDOING","withUndoing","isUndoing","setIsUndoing","withRedoing","isRedoing","setIsRedoing","createWithPortableTextMarkModel","apply","normalizeNode","decorators","nodeEntry","nextNode","includes","mergeNodes","voids","setNodes","decorator","orphanedAnnotations","markDefKeys","newMarkDefs","markDef","has","add","operations","op","properties","previousSelectionIsCollapsed","newSelectionIsCollapsed","focusSpan","newFocusSpan","movedToNextSpan","movedToPreviousSpan","_block","depth","previousSpanAnnotations","nextSpanAnnotations","annotationsEnding","annotation","atTheEndOfAnnotation","annotationsStarting","atTheStartOfAnnotation","nextSpanDecorators","collapsedSelection","marksWithoutAnnotations","spanHasAnnotations","spanIsEmpty","atTheBeginningOfSpan","atTheEndOfSpan","spanAnnotations","previousSpanHasAnnotations","previousSpanHasSameAnnotations","previousSpanHasSameAnnotation","previousSpanHasSameMarks","nextSpanSharesSomeAnnotations","isExpanded","deletingFromTheEnd","deletingAllText","nextSpanHasSameAnnotation","marksWithoutAnnotationMarks","withoutNormalizing","onChange","targetPath","oldDefs","uniq","removeDecoratorOperationImplementation","hanging","eMark","lonelyEmptySpan","existingMarksWithoutDecorator","existingMark","existingMarks","isDecoratorActive","selectedTextNodes","cloneDiff","diff2","CURRENT_UNDO_STEP","withUndoStep","current","undoStepId","getCurrentUndoStepId","SAVING","REMOTE_PATCHES","UNDO_STEP_LIMIT","isSaving","state","getRemotePatches","createWithUndoRedo","previousSnapshot","remotePatches","previousUndoStepId","subscriptions","sub","reset","history","undos","redos","splice","time","Date","step","lastOp","overwrite","shouldOverwrite","save","currentUndoStepId","merge","shouldMerge","newStep","createSelectOperation","timestamp","shift","shouldClear","historyUndoOperationImplementation","otherPatches","item","transformedOperations","flatten","transformOperation","reversedOperations","Operation","inverse","withoutSaving","err","deselect","pop","historyRedoOperationImplementation","transformedOperation","insertBlockIndex","items","adjustBlockPath","unsetBlockIndex","operationTargetBlock","findOperationTargetBlock","parsePatch","diffPatch","adjustOffsetBy","changedOffset","utf8Start1","diffs","diff","index","diffType","DIFF_INSERT","DIFF_DELETE","DIFF_EQUAL","dType","currentFocus","currentAnchor","blockIndex","addAnnotationOperationImplementation","parsedAnnotation","parseAnnotation","paths","markDefPath","markDefPaths","annotationKey","unshift","existingSameTypeAnnotations","removeAnnotationOperationImplementation","potentialAnnotations","selectedChild","selectedChildPath","annotationToRemove","previousSpansWithSameAnnotation","nextSpansWithSameAnnotation","marksWithoutAnnotation","blockSetOperationImplementation","location","filteredProps","slateBlock","blockUnsetOperationImplementation","propsToRemove","prop","updatedTextBlock","omit","propsToSet","updatedBlockObject","decoratorAddOperationImplementation","manualAnchor","blockOffset","direction","manualFocus","manualSelection","editorSelection","anchorOffset","selectionPoint","focusOffset","newValue","newSelection","offsets","trimmedSelection","activeDecorators","newRange","splitTextNodes","isRange","deleteOperationImplementation","delete","deleteBackwardOperationImplementation","unit","deleteBlockOperationImplementation","removeNodes","deleteForwardOperationImplementation","insertInlineObjectOperationImplementation","parsedInlineObject","focusTextBlock","insertSpanOperationImplementation","insertBlockOperationImplementation","fragment","placement","select","insertBlock","startBlock","startBlockPath","endBlock","endBlockPath","nextPath","selectionBefore","insertFragment","currentSelection","endBlockEndPoint","adjustedSelection","next","endBlockStartPoint","moveBackwardOperationImplementation","move","distance","moveBlockOperationImplementation","to","moveNodes","moveForwardOperationImplementation","selectOperationImplementation","behaviorOperationImplementations","performOperation","message","CURRENT_OPERATION_ID","withApplyingBehaviorOperations","getCurrentOperationId","isApplyingBehaviorOperations","createWithEventListeners","maxBlocks","deleteBackward","behaviorEvent","deleteForward","insertBreak","insertData","dataTransfer","insertSoftBreak","redo","setFragmentData","undo","createWithMaxBlocks","rows","createWithObjectKeys","existingKeys","descendants","entry","debugVerbose","createApplyPatch","changed","insertPatch","unsetPatch","setPatch","findBlockAndChildFromPath","diffMatchPatchApplyPatches","allowExceedingIndices","cleanupEfficiency","makeDiff","debugState","targetBlockPath","targetChildPath","blocksToInsert","targetBlockIndex","normalizedIdx","editorWasEmptyBefore","childrenToInsert","targetChildIndex","childInsertPath","newText","nextRest","prevChildren","prevRest","c","cIndex","newVal","applyAll","previousSelection","_","pteCreateTextBlock","isKeyedSegment","segment","stateName","findBlockFromPath","isMatch","PATCHING","withoutPatching","isPatching","createWithPatches","relayActor","patchFunctions","previousChildren","applyPatch","bufferedPatches","handleBufferedRemotePatches","normalize","handlePatches","p","editorWasEmpty","editorIsEmpty","previousValue","operationId","createWithPlaceholderBlock","insertNode","createWithPortableTextBlockStyle","defaultStyle","SlateText","createWithPortableTextSelections","prevSelection","emitPortableTextSelection","ptRange","existing","createWithSchemaTypes","isSpan","obj","createWithUtils","withPlugins","e","operationToPatches","withObjectKeys","withSchemaTypes","withPatches","withMaxBlocks","withUndoRedo","withPortableTextMarkModel","withPortableTextBlockStyle","withPlaceholderBlock","withUtils","withPortableTextSelections","createSlateEditor","instance","withReact","createEditor","initialValue","addAnnotationOnCollapsedSelection","isSelectionCollapsed","caretWordSelection","getCaretWordSelection","raise","coreAnnotationBehaviors","IS_MAC","test","navigator","userAgent","modifiers","alt","control","meta","aliases","break","cmd","command","ctl","ctrl","del","down","esc","ins","mod","opt","option","return","space","spacebar","up","win","windows","keyCodes","isHotkey","hotkey","compareHotkey","parseHotkey","parsedHotkey","altKey","ctrlKey","metaKey","shiftKey","hotkeySegments","rawHotkeySegment","optional","endsWith","hotkeySegment","toKeyName","modifier","alias","code","TypeError","keyCode","toKeyCode","toLowerCase","toUpperCase","charCodeAt","arrowDownOnLonelyBlockObject","focusBlockObject","nextBlock","arrowUpOnLonelyBlockObject","previousBlock","breakingBlockObject","getFocusBlockObject","clickingAboveLonelyBlockObject","clickingBelowLonelyBlockObject","deletingEmptyTextBlockAfterBlockObject","selectionCollapsed","isEmptyTextBlock","deletingEmptyTextBlockBeforeBlockObject","coreBlockObjectBehaviors","coreDecoratorBehaviors","strongShortcut","emShortcut","underlineShortcut","codeShortcut","coreDndBehaviors","isOverlappingSelection","breakingAtTheEndOfTextBlock","atTheEndOfBlock","focusListItem","focusLevel","breakingAtTheStartOfTextBlock","focusDecorators","focusAnnotations","breakingEntireDocument","firstBlockStartPoint","lastBlockEndPoint","breakingEntireBlocks","startBlockStartPoint","coreInsertBreakBehaviors","MAX_LIST_LEVEL","clearListOnBackspace","unindentListOnBackspace","clearListOnEnter","focusListBlock","indentListOnTab","selectedListBlocks","selectedListBlock","unindentListOnShiftTab","coreListBehaviors","coreBehaviorsConfig","abstractAnnotationBehaviors","isActiveAnnotation","abstractDecoratorBehaviors","isActiveDecorator","blockOffsetsToSelection","abstractDeleteBehaviors","abstractInsertBehaviors","getFocusTextBlock","keyIs","lineBreak","abstractKeyboardBehaviors","abstractListItemBehaviors","selectedTextBlocks","getSelectedTextBlocks","isActiveListItem","abstractMoveBehaviors","getPreviousBlock","getNextBlock","abstractSelectBehaviors","getBlockEndPoint","getBlockStartPoint","abstractSplitBehaviors","getSelectionStartPoint","getSelectionEndPoint","blockEndPoint","newTextBlockSelection","newTextBlock","abstractStyleBehaviors","isActiveStyle","raiseDeserializationSuccessOrFailure","success","failures","getData","deserializeEvent","failure","raiseSerializationSuccessOrFailure","serializeEvents","serializeEvent","abstractBehaviors","setData","dropPosition","droppingOnDragOrigin","draggingEntireBlocks","draggedBlocks","activeAnnotations","getActiveAnnotations","textRuns","getTextBlockText","textRun","isSelectionExpanded","isSyntheticBehaviorEvent","isCustomBehaviorEvent","isNativeBehaviorEvent","isAbstractBehaviorEvent","abstractBehaviorEventTypes","nativeBehaviorEventTypes","startsWith","eventCategory","performEvent","behaviors","remainingEventBehaviors","nativeEvent","eventBehaviors","listenedNamespace","eventNamespace","preventDefault","guardSnapshot","nativeEventPrevented","defaultBehaviorOverwritten","eventBehaviorIndex","eventBehavior","shouldRun","actionSet","actionsSnapshot","action","sortByPriority","itemsWithPriority","itemsWithoutPriority","itemsByPriorityId","Map","graph","inDegree","ensureNode","addEdge","fromId","toId","visited","refId","queue","degree","result","currentId","currentItem","neighborId","newDegree","slateChildrenToBlocks","descendant","processedChildren","getActiveDecorators","slateEditorInstance","createEditorSnapshot","editorMachine","events","emitted","input","tags","assign","assertEvent","enqueueActions","enqueue","emit","pendingEvents","pendingIncomingPatchesEvents","handle blur","blur","handle focus","handle behavior event","self","tag","guards","slate is busy","createMachine","initialReadOnly","states","initial","exit","dragstart","ghost","always","after","parentNode","removeChild","dragend","drop","pristine","idle","normalizing","dirty","createLegacySchema","portableTextType","blockType","of","findBlockType","childrenField","fields","field","ofType","spanType","memberType","inlineObjectTypes","blockObjectTypes","resolveEnabledStyles","resolveEnabledDecorators","resolveEnabledListItems","styleField","btField","textStyles","listField","listItems","defineSchema","definition","temporaryImageName","temporaryUrlName","temporaryObjectNames","image","url","objectNames","defaultObjectTitles","legacySchemaToEditorSchema","jsonType","compileSchemaDefinitionToLegacySchema","defineType","portableTextSchema","defineField","startCase","SanitySchema","pteSchema","defaultCompare","a","b","useEditorSelector","selector","compare","editorActorSnapshot","getEditorSnapshot","_internal","mutationMachine","bulk","pendingMutations","lastBulk","pendingPatchEvents","actors","fromCallback","sendBack","originalApply","is read-only","stateIn","typing","no pending mutations","slate is normalizing","isNormalizing","delays","process","env","NODE_ENV","invoke","src","reenter","mutations","and","not","createEditableAPI","toggleMark","toggleList","toggleBlockStyle","isMarkActive","slateSelection","insertChild","focusChildPath","isSpanNode","focusNode","hasBlockStyle","hasListStyle","findByPath","slatePath","ptBlock","ptChild","findDOMNode","ReactEditor","spans","isAnnotationActive","annotationType","addAnnotation","SlateElement","removeAnnotation","getSelection","getValue","isCollapsedSelection","isExpandedSelection","getFragment","isSelectionsOverlapping","selectionA","selectionB","rangeA","rangeB","selectionMarkDefs","accMarkDefs","markKey","relayMachine","validateValue","resolution","valid","validChildTypes","validBlockTypes","description","i18n","isPlainObject","currentBlockTypeName","expectedTypeName","typeName","newSpan","autoResolve","allUsedMarks","unusedMarkDefs","markDefKey","m","orphanedMarks","dec","spanChildren","orphaned","cMrk","newChild","childType","syncValueCallback","streamBlocks","syncValueLogic","syncMachine","initialValueSynced","pendingValue","initial value synced","is busy","editable","isProcessingLocalChanges","isChanging","isBusy","is empty value","is empty array","is new value","value changed while syncing","pending value equals previous value","busy","syncing","updateValue","doneSyncing","isChanged","isValid","hadSelection","childrenLength","slateValueFromProps","Promise","resolve","removeExtraBlocks","currentBlock","currentBlockIndex","getStreamedBlocks","slateValue","blockChanged","blockValid","syncBlock","setTimeout","hasChanges","validationValue","validation","_updateBlock","_replaceBlock","selectionFocusOnBlock","oldBlockChildrenLength","currentBlockChild","currentBlockChildIndex","oldBlockChild","isChildChanged","isTextChanged","createInternalEditor","createActor","editorConfigToMachineInput","mutationActor","syncActor","createActors","registerBehavior","behaviorConfigWithPriority","listener","compileSchemasFromEditorConfig","schemaDefinition","hasOwnProperty","subscribe","PortableTextEditorSelectionContext","usePortableTextEditorSelection","PortableTextEditorSelectionProvider","setSelection","startTransition","RelayActorContext","RouteEventsToChanges","change","handleChange","change_0","eventToChange","isLoading","PortableTextEditor","Component","displayName","change$","Subject","unsubscribers","constructor","Number","parseInt","componentDidMount","componentDidUpdate","prevProps","editorRef","componentWillUnmount","setEditable","render","legacyPatches","incomingPatches$","patches$","Slate","blockStyle","listStyle","isObjectPath","_editor","isChildObjectEditPath","RoutePatchesObservableToEditorActor","payload","RenderSpan","spanRef","portableTextEditor","blockSelected","setFocused","setSelected","useMemo","leaf","decoratorSchemaTypes","annotationMarkDefs","shouldTrackSelectionAndFocus","sel","setSelectedFromRange","useCallback","winSelection","rangeCount","getRangeAt","intersectsNode","onBlur","onFocus","onSelection","legacyDecoratorSchemaType","renderDecorator","annotationMarkDef","legacyAnnotationSchemaType","renderAnnotation","_child","PLACEHOLDER_STYLE","pointerEvents","RenderLeaf","renderedSpan","renderPlaceholder","placeholder","rangeDecoration","component","RenderText","createWithHotkeys","hotkeysFromOptions","reservedHotkeys","activeHotkeys","pteWithHotKeys","cat","possibleMark","possibleCommand","slateOperationCallback","rangeDecorationsMachine","pendingRangeDecorations","rangeDecorations","decoratedRanges","rangeDecorationState","slateRange","onMoved","decoratedRange","newRangeSelection","updateCount","has pending range decorations","has range decorations","has different decorations","existingRangeDecorations","newRangeDecorations","not read only","should skip setup","skipSetup","createDecorate","rangeDecorationActor","intersection","PortableTextEditable","forwardRef","forwardedRef","hotkeys","onBeforeInput","onPaste","onCopy","onCut","onClick","onDragStart","onDrag","onDragEnd","onDragEnter","onDragOver","onDrop","onDragLeave","propsSelection","scrollSelectionIntoView","restProps","editableElement","setEditableElement","hasInvalidValue","setHasInvalidValue","useSlate","rangeDecorationsActor","useActorRef","decorate","renderElement","eProps","renderLeaf","leafProps","renderText","restoreSelectionFromProps","normalizedSelection","o","onReady","onInvalidValue","onValueChanged","handleCopy","clipboardData","stopPropagation","handleCut","handlePaste","onPasteResult","then","parseBlocks","catch","finally","handleOnFocus","isDefaultPrevented","handleClick","isPropagationStopped","handleOnBlur","handleOnBeforeInput","validateSelection","root","findDocumentOrShadowRoot","activeElement","domSelection","existingDOMRange","newDOMRange","toDOMRange","startOffset","endOffset","removeAllRanges","addRange","mutationObserver","MutationObserver","observe","attributeOldValue","characterData","childList","subtree","disconnect","handleKeyDown","onKeyDown","handleKeyUp","onKeyUp","scrollSelectionIntoViewToSlate","noop","addEventListener","removeEventListener","handleDragStart","selectingEntireBlocks","dragGhost","createElement","draggedDomNodes","clonedBlockNodes","cloneNode","HTMLElement","appendChild","customGhost","querySelector","replaceChildren","setAttribute","boxSizing","body","customGhostRect","x","y","setDragImage","blocksDomRect","clonedChildNodes","childrenDomRect","handleDrag","handleDragEnd","handleDragEnter","handleDragOver","handleDrop","handleDragLeave","SlateEditable","className","useConstant","factory","React","constant","EditorProvider","initialConfig","internalEditor","internalEditor_0","portableTextEditor_0","t4","t5","t6","t7","t8","t9","t10","EditorContext"],"mappings":"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","x_google_ignoreList":[34,39]}